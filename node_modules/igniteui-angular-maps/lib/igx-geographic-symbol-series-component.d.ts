import { Type } from '@angular/core';
import { IgDataTemplate } from "igniteui-angular-core";
import { MarkerType } from "igniteui-angular-charts";
import { CollisionAvoidanceType } from "igniteui-angular-charts";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicSymbolSeries } from "./GeographicSymbolSeries";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
export declare const IgxGeographicSymbolSeriesComponent_PROVIDERS: ({
    provide: typeof IgxGeographicMapSeriesHostComponent;
    useExisting: Type<any>;
} | {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
})[];
export declare class IgxGeographicSymbolSeriesComponent extends IgxGeographicMapSeriesHostComponent {
    protected createImplementation(): GeographicSymbolSeries;
    /**
                                 * @hidden
                                 */
    readonly i: GeographicSymbolSeries;
    constructor();
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    latitudeMemberPath: string;
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    longitudeMemberPath: string;
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    markerType: MarkerType;
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    markerCollisionAvoidance: CollisionAvoidanceType;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    markerTemplate: IgDataTemplate;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    markerBrush: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    markerOutline: string;
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
    */
    maximumMarkers: number;
    /**
     * Gets or sets thickness of the marker outline
    */
    markerThickness: number;
}
