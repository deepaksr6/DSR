import { EventEmitter } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { IgxGeographicMapComponent } from "./igx-geographic-map-component";
import { IgxImageTilesReadyEventArgs } from "./igx-image-tiles-ready-event-args";
import { IgxImagesChangedEventArgs } from "./igx-images-changed-event-args";
import { IgxCancellingMultiScaleImageEventArgs } from "igniteui-angular-core";
import { IgxDownloadingMultiScaleImageEventArgs } from "igniteui-angular-core";
import { GeographicMapImagery as GeographicMapImagery_internal } from "./GeographicMapImagery";
import { IMapRenderDeferralHandler } from "igniteui-angular-core";
/**
 * Control class used for displaying multi-scale TileSource imagery.  Designed to be used for background imagery in the IgxGeographicMap.Component
*/
export declare abstract class IgxGeographicMapImagery {
    protected createImplementation(): GeographicMapImagery_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: GeographicMapImagery_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * The deferral handler to use for deferred refreshes.
    */
    deferralHandler: IMapRenderDeferralHandler;
    /**
     * A rectangle representing the portion of the map imagery currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
    */
    windowRect: IgRect;
    /**
     * The IgxGeographicMapComponent which is hosting this GeographicMapImagery control.
    */
    geographicMap: IgxGeographicMapComponent;
    /**
     * Gets or sets the referer sent in the headers of the tile request.
    */
    referer: string;
    /**
     * Gets or sets the UserAgent sent in the headers of the tile request.
    */
    userAgent: string;
    opacity: number;
    findByName(name: string): any;
    /**
     * Removes all cached tile Imagery from the
    
    */
    clearTileCache(): void;
    private _imageTilesReady;
    /**
     * Event raised when the image tiles have been downloaded.
    */
    readonly imageTilesReady: EventEmitter<{
        sender: any;
        args: IgxImageTilesReadyEventArgs;
    }>;
    private _imagesChanged;
    /**
     * Event raised when tile images have changed.
    */
    readonly imagesChanged: EventEmitter<{
        sender: any;
        args: IgxImagesChangedEventArgs;
    }>;
    private _cancellingImage;
    /**
     * Event raised when an image is being downloaded.
    */
    readonly cancellingImage: EventEmitter<{
        sender: any;
        args: IgxCancellingMultiScaleImageEventArgs;
    }>;
    private _downloadingImage;
    /**
     * Event raised when an image is being downloaded.
    */
    readonly downloadingImage: EventEmitter<{
        sender: any;
        args: IgxDownloadingMultiScaleImageEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
}
