import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { MarkerType, MarkerType_$type } from "igniteui-angular-charts";
import { IgxSizeScaleComponent } from "igniteui-angular-charts";
import { IgxBrushScaleComponent } from "igniteui-angular-charts";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicProportionalSymbolSeries } from "./GeographicProportionalSymbolSeries";
import { ensureEnum, brushToString, stringToBrush, ensureBool } from "igniteui-angular-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
export var IgxGeographicProportionalSymbolSeriesComponent_PROVIDERS = [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(function () { return IgxGeographicProportionalSymbolSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxGeographicProportionalSymbolSeriesComponent; }) }];
var IgxGeographicProportionalSymbolSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGeographicProportionalSymbolSeriesComponent, _super);
    function IgxGeographicProportionalSymbolSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxGeographicProportionalSymbolSeriesComponent_1 = IgxGeographicProportionalSymbolSeriesComponent;
    IgxGeographicProportionalSymbolSeriesComponent.prototype.createImplementation = function () {
        return new GeographicProportionalSymbolSeries();
    };
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "latitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mt;
        },
        set: function (v) {
            this.i.mt = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "longitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mv;
        },
        set: function (v) {
            this.i.mv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.md;
        },
        set: function (v) {
            this.i.md = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.na;
        },
        set: function (v) {
            this.i.na = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.nt);
        },
        set: function (v) {
            this.i.nt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.nu);
        },
        set: function (v) {
            this.i.nu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "maximumMarkers", {
        /**
         * Gets or sets the maximum number of markerItems displayed by the current series.
         * If more than the specified number of markerItems are visible, the series will automatically
         * choose a representative set.
        */
        get: function () {
            return this.i.mm;
        },
        set: function (v) {
            this.i.mm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "radiusMemberPath", {
        /**
         * Gets or sets the radius mapping property for the current series object.
        */
        get: function () {
            return this.i.m6;
        },
        set: function (v) {
            this.i.m6 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "radiusScale", {
        /**
         * Gets or sets the radius size scale for the bubbles.
        */
        get: function () {
            if (this.i.me == null) {
                return null;
            }
            if (!this.i.me.externalObject) {
                var e = IgxSizeScaleComponent._createFromInternal(this.i.me);
                if (e) {
                    e._implementation = this.i.me;
                }
                this.i.me.externalObject = e;
            }
            return this.i.me.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.me = null : this.i.me = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "labelMemberPath", {
        /**
         * Gets or sets the Label mapping property for the current series object.
        */
        get: function () {
            return this.i.mr;
        },
        set: function (v) {
            this.i.mr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "fillMemberPath", {
        /**
         * Gets or sets the fill mapping property for the current series object.
        */
        get: function () {
            return this.i.mn;
        },
        set: function (v) {
            this.i.mn = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "fillScale", {
        /**
         * Gets or sets the brush scale for the marker brush.
        */
        get: function () {
            if (this.i.mb == null) {
                return null;
            }
            if (!this.i.mb.externalObject) {
                var e = IgxBrushScaleComponent._createFromInternal(this.i.mb);
                if (e) {
                    e._implementation = this.i.mb;
                }
                this.i.mb.externalObject = e;
            }
            return this.i.mb.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mb = null : this.i.mb = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "fillScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the FillScale uses global values of FillMemberPath of multiple series.
         * This setting applies only if multiple series are using the same FillScale.
        */
        get: function () {
            return this.i.mg;
        },
        set: function (v) {
            this.i.mg = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerOutlineUsesFillScale", {
        /**
         * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
         * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
        */
        get: function () {
            return this.i.mh;
        },
        set: function (v) {
            this.i.mh = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerOutlineBrightness", {
        /**
         * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
         * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerBrushBrightness", {
        /**
         * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
         * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
        */
        get: function () {
            return this.i.mj;
        },
        set: function (v) {
            this.i.mj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.ml;
        },
        set: function (v) {
            this.i.ml = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicProportionalSymbolSeriesComponent.prototype, "radiusScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath of multiple series.
         * This setting applies only if multiple series are using the same RadiusScale.
        */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgxGeographicProportionalSymbolSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    };
    IgxGeographicProportionalSymbolSeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    var IgxGeographicProportionalSymbolSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "latitudeMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "longitudeMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerType", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "maximumMarkers", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "radiusMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxSizeScaleComponent),
        tslib_1.__metadata("design:paramtypes", [IgxSizeScaleComponent])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "radiusScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "labelMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "fillMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxBrushScaleComponent),
        tslib_1.__metadata("design:paramtypes", [IgxBrushScaleComponent])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "fillScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "fillScaleUseGlobalValues", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerOutlineUsesFillScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerOutlineBrightness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerBrushBrightness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "markerThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGeographicProportionalSymbolSeriesComponent.prototype, "radiusScaleUseGlobalValues", null);
    IgxGeographicProportionalSymbolSeriesComponent = IgxGeographicProportionalSymbolSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-geographic-proportional-symbol-series',
            template: "",
            providers: [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(function () { return IgxGeographicProportionalSymbolSeriesComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxGeographicProportionalSymbolSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxGeographicProportionalSymbolSeriesComponent);
    return IgxGeographicProportionalSymbolSeriesComponent;
}(IgxGeographicMapSeriesHostComponent));
export { IgxGeographicProportionalSymbolSeriesComponent };
//# sourceMappingURL=igx-geographic-proportional-symbol-series-component.js.map