import * as tslib_1 from "tslib";
import { EventEmitter, Output } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxImageTilesReadyEventArgs } from "./igx-image-tiles-ready-event-args";
import { IgxImagesChangedEventArgs } from "./igx-images-changed-event-args";
import { IgxCancellingMultiScaleImageEventArgs } from "igniteui-angular-core";
import { IgxDownloadingMultiScaleImageEventArgs } from "igniteui-angular-core";
import { fromRect, toRect } from "igniteui-angular-core";
/**
 * Control class used for displaying multi-scale TileSource imagery.  Designed to be used for background imagery in the IgxGeographicMap.Component
*/
var IgxGeographicMapImagery = /** @class */ (function () {
    function IgxGeographicMapImagery() {
        this._imageTilesReady = null;
        this._imagesChanged = null;
        this._cancellingImage = null;
        this._downloadingImage = null;
        this._zoneRunner = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgxGeographicMapImagery.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgxGeographicMapImagery.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgxGeographicMapImagery.prototype.onImplementationCreated = function () {
    };
    IgxGeographicMapImagery.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgxGeographicMapImagery.prototype, "deferralHandler", {
        /**
         * The deferral handler to use for deferred refreshes.
        */
        get: function () {
            return this.i.deferralHandler;
        },
        set: function (v) {
            this.i.deferralHandler = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "windowRect", {
        /**
         * A rectangle representing the portion of the map imagery currently in view.
         * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
        */
        get: function () {
            return fromRect(this.i.windowRect);
        },
        set: function (v) {
            this.i.windowRect = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "geographicMap", {
        /**
         * The IgxGeographicMapComponent which is hosting this GeographicMapImagery control.
        */
        get: function () {
            if (this.i.geographicMap == null) {
                return null;
            }
            return this.i.geographicMap.externalObject;
        },
        set: function (v) {
            v == null ? this.i.geographicMap = null : this.i.geographicMap = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "referer", {
        /**
         * Gets or sets the referer sent in the headers of the tile request.
        */
        get: function () {
            return this.i.referer;
        },
        set: function (v) {
            this.i.referer = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "userAgent", {
        /**
         * Gets or sets the UserAgent sent in the headers of the tile request.
        */
        get: function () {
            return this.i.userAgent;
        },
        set: function (v) {
            this.i.userAgent = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "opacity", {
        get: function () {
            return this.i.opacity;
        },
        set: function (v) {
            this.i.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgxGeographicMapImagery.prototype.findByName = function (name) {
        if (this.geographicMap && this.geographicMap.name && this.geographicMap.name == name) {
            return this.geographicMap;
        }
        return null;
    };
    /**
     * Removes all cached tile Imagery from the
    
    */
    IgxGeographicMapImagery.prototype.clearTileCache = function () {
        this.i.clearTileCache();
    };
    Object.defineProperty(IgxGeographicMapImagery.prototype, "imageTilesReady", {
        /**
         * Event raised when the image tiles have been downloaded.
        */
        get: function () {
            var _this = this;
            if (this._imageTilesReady == null) {
                this._imageTilesReady = new EventEmitter();
                this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxImageTilesReadyEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeImageTilesReady) {
                            _this.beforeImageTilesReady(_this, outerArgs);
                        }
                        _this._imageTilesReady.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._imageTilesReady;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "imagesChanged", {
        /**
         * Event raised when tile images have changed.
        */
        get: function () {
            var _this = this;
            if (this._imagesChanged == null) {
                this._imagesChanged = new EventEmitter();
                this.i.imagesChanged = delegateCombine(this.i.imagesChanged, function (o, e) {
                    var outerArgs = new IgxImagesChangedEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeImagesChanged) {
                        _this.beforeImagesChanged(_this, outerArgs);
                    }
                    _this._imagesChanged.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._imagesChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "cancellingImage", {
        /**
         * Event raised when an image is being downloaded.
        */
        get: function () {
            var _this = this;
            if (this._cancellingImage == null) {
                this._cancellingImage = new EventEmitter();
                this.i.cancellingImage = delegateCombine(this.i.cancellingImage, function (o, e) {
                    var outerArgs = new IgxCancellingMultiScaleImageEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeCancellingImage) {
                        _this.beforeCancellingImage(_this, outerArgs);
                    }
                    _this._cancellingImage.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._cancellingImage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGeographicMapImagery.prototype, "downloadingImage", {
        /**
         * Event raised when an image is being downloaded.
        */
        get: function () {
            var _this = this;
            if (this._downloadingImage == null) {
                this._downloadingImage = new EventEmitter();
                this.i.downloadingImage = delegateCombine(this.i.downloadingImage, function (o, e) {
                    var outerArgs = new IgxDownloadingMultiScaleImageEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeDownloadingImage) {
                        _this.beforeDownloadingImage(_this, outerArgs);
                    }
                    _this._downloadingImage.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._downloadingImage;
        },
        enumerable: true,
        configurable: true
    });
    IgxGeographicMapImagery.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxGeographicMapImagery.prototype, "imageTilesReady", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxGeographicMapImagery.prototype, "imagesChanged", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxGeographicMapImagery.prototype, "cancellingImage", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxGeographicMapImagery.prototype, "downloadingImage", null);
    return IgxGeographicMapImagery;
}());
export { IgxGeographicMapImagery };
//# sourceMappingURL=igx-geographic-map-imagery.js.map