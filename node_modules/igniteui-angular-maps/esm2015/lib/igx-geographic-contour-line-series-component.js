var IgxGeographicContourLineSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxValueBrushScaleComponent } from "igniteui-angular-charts";
import { IgxContourValueResolverComponent } from "igniteui-angular-charts";
import { IgxTriangulationStatusEventArgs } from "igniteui-angular-core";
import { IgxGeographicXYTriangulatingSeriesComponent } from "./igx-geographic-xy-triangulating-series-component";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicContourLineSeries } from "./GeographicContourLineSeries";
/**
 * Represents a class for Geographic Contour Series displayed on a map.
*/
export const IgxGeographicContourLineSeriesComponent_PROVIDERS = [{ provide: IgxGeographicXYTriangulatingSeriesComponent, useExisting: forwardRef(() => IgxGeographicContourLineSeriesComponent) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicContourLineSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicContourLineSeriesComponent) }];
let IgxGeographicContourLineSeriesComponent = IgxGeographicContourLineSeriesComponent_1 = class IgxGeographicContourLineSeriesComponent extends IgxGeographicXYTriangulatingSeriesComponent {
    constructor() {
        super();
        this._triangulationStatusChanged = null;
    }
    createImplementation() {
        return new GeographicContourLineSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property from which to retrieve the numeric values from the ItemsSource items.
    */
    get valueMemberPath() {
        return this.i.m0;
    }
    set valueMemberPath(v) {
        this.i.m0 = v;
    }
    /**
     * The ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
    */
    get fillScale() {
        if (this.i.mx == null) {
            return null;
        }
        if (!this.i.mx.externalObject) {
            let e = IgxValueBrushScaleComponent._createFromInternal(this.i.mx);
            if (e) {
                e._implementation = this.i.mx;
            }
            this.i.mx.externalObject = e;
        }
        return this.i.mx.externalObject;
    }
    set fillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mx = null : this.i.mx = v.i;
    }
    /**
     * The ContourValueResolver used to determine the numeric values of contours.
    */
    get valueResolver() {
        if (this.i.mu == null) {
            return null;
        }
        if (!this.i.mu.externalObject) {
            let e = IgxContourValueResolverComponent._createFromInternal(this.i.mu);
            if (e) {
                e._implementation = this.i.mu;
            }
            this.i.mu.externalObject = e;
        }
        return this.i.mu.externalObject;
    }
    set valueResolver(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mu = null : this.i.mu = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    get triangulationStatusChanged() {
        if (this._triangulationStatusChanged == null) {
            this._triangulationStatusChanged = new EventEmitter();
            this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxTriangulationStatusEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeTriangulationStatusChanged) {
                        this.beforeTriangulationStatusChanged(this, outerArgs);
                    }
                    this._triangulationStatusChanged.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._triangulationStatusChanged;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicContourLineSeriesComponent.prototype, "valueMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxValueBrushScaleComponent),
    tslib_1.__metadata("design:paramtypes", [IgxValueBrushScaleComponent])
], IgxGeographicContourLineSeriesComponent.prototype, "fillScale", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxContourValueResolverComponent),
    tslib_1.__metadata("design:paramtypes", [IgxContourValueResolverComponent])
], IgxGeographicContourLineSeriesComponent.prototype, "valueResolver", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicContourLineSeriesComponent.prototype, "triangulationStatusChanged", null);
IgxGeographicContourLineSeriesComponent = IgxGeographicContourLineSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-contour-line-series',
        template: ``,
        providers: [{ provide: IgxGeographicXYTriangulatingSeriesComponent, useExisting: forwardRef(() => IgxGeographicContourLineSeriesComponent_1) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicContourLineSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicContourLineSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicContourLineSeriesComponent);
export { IgxGeographicContourLineSeriesComponent };
//# sourceMappingURL=igx-geographic-contour-line-series-component.js.map