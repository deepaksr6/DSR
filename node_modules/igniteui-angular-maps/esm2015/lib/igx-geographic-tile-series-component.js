var IgxGeographicTileSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxGeographicMapImagery } from "./igx-geographic-map-imagery";
import { IgxImageTilesReadyEventArgs } from "./igx-image-tiles-ready-event-args";
import { IgxGeographicShapeSeriesBaseComponent } from "./igx-geographic-shape-series-base-component";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicTileSeries } from "./GeographicTileSeries";
/**
 * Series class used for displaying a tile set, and using shapes to define the areas that should be rendered.
*/
export const IgxGeographicTileSeriesComponent_PROVIDERS = [{ provide: IgxGeographicShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxGeographicTileSeriesComponent) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicTileSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicTileSeriesComponent) }];
let IgxGeographicTileSeriesComponent = IgxGeographicTileSeriesComponent_1 = class IgxGeographicTileSeriesComponent extends IgxGeographicShapeSeriesBaseComponent {
    constructor() {
        super();
        this._imageTilesReady = null;
    }
    createImplementation() {
        return new GeographicTileSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The MapImagery which is used to provide the tiles for display.
    */
    get tileImagery() {
        if (this.i.mq == null) {
            return null;
        }
        return this.i.mq.externalObject;
    }
    set tileImagery(v) {
        v == null ? this.i.mq = null : this.i.mq = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.tileImagery && this.tileImagery.name && this.tileImagery.name == name) {
            return this.tileImagery;
        }
        return null;
    }
    /**
     * Removes all cached tile Imagery from the
    
    */
    clearTileCache() {
        this.i.mu();
    }
    /**
     * This event is fired whenever the image tiles transition from a loading state (e.g. some are fading in) to a loaded state.
    */
    get imageTilesReady() {
        if (this._imageTilesReady == null) {
            this._imageTilesReady = new EventEmitter();
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxImageTilesReadyEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeImageTilesReady) {
                        this.beforeImageTilesReady(this, outerArgs);
                    }
                    this._imageTilesReady.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._imageTilesReady;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxGeographicMapImagery),
    tslib_1.__metadata("design:paramtypes", [IgxGeographicMapImagery])
], IgxGeographicTileSeriesComponent.prototype, "tileImagery", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicTileSeriesComponent.prototype, "imageTilesReady", null);
IgxGeographicTileSeriesComponent = IgxGeographicTileSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-tile-series',
        template: ``,
        providers: [{ provide: IgxGeographicShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxGeographicTileSeriesComponent_1) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicTileSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicTileSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicTileSeriesComponent);
export { IgxGeographicTileSeriesComponent };
//# sourceMappingURL=igx-geographic-tile-series-component.js.map