/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicShapeSeriesBaseView } from "./GeographicShapeSeriesBaseView";
import { ScatterPolylineSeries } from "igniteui-angular-charts";
import { markType, runOn, delegateCombine, markDep } from "igniteui-angular-core";
import { GeographicShapeSeriesBase } from "./GeographicShapeSeriesBase";
import { StyleSelector } from "igniteui-angular-charts";
import { DependencyProperty } from "igniteui-angular-core";
import { Style } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
/**
 * @hidden
 */
export class GeographicPolylineSeriesView extends GeographicShapeSeriesBaseView {
    constructor(a) {
        super(a);
        this.b7 = null;
        this.b7 = a;
    }
    bv() {
        super.bv();
        this.b7.l3.nd = this.b7.mo;
        this.b7.l3.ni = this.b7.mw;
    }
    b8() {
        this.b7.l3.nd = this.b7.mo;
    }
    b9() {
        this.b7.l3.ni = this.b7.mw;
    }
}
GeographicPolylineSeriesView.$t = markType(GeographicPolylineSeriesView, 'GeographicPolylineSeriesView', GeographicShapeSeriesBaseView.$);
/**
 * @hidden
 */
export class GeographicPolylineSeries extends GeographicShapeSeriesBase {
    constructor() {
        super();
        this.styleShape = null;
        this.ab = GeographicPolylineSeries.$;
    }
    bf() {
        return new GeographicPolylineSeriesView(this);
    }
    iv(a) {
        super.iv(a);
        this.mp = a;
    }
    l2() {
        let a = new ScatterPolylineSeries();
        a.styleShape = delegateCombine(a.styleShape, runOn(this, this.mt));
        return a;
    }
    mt(a, b) {
        if (this.styleShape != null) {
            this.styleShape(this, b);
        }
    }
    i0(a, b, c, d) {
        super.i0(a, b, c, d);
        switch (b) {
            case GeographicPolylineSeries.$$p[1]:
                this.mp.b8();
                break;
            case GeographicPolylineSeries.$$p[0]:
                this.mp.b9();
                break;
        }
    }
}
GeographicPolylineSeries.$t = markType(GeographicPolylineSeries, 'GeographicPolylineSeries', GeographicShapeSeriesBase.$);
GeographicPolylineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicPolylineSeries, 'raisePropertyChanged', ['ShapeStyle:mw:mu', [Style.$, null], 'ShapeStyleSelector:mo:mv', [StyleSelector.$, null]]);
//# sourceMappingURL=GeographicPolylineSeriesView_combined.js.map