var IgxGeographicSymbolSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { MarkerType, MarkerType_$type } from "igniteui-angular-charts";
import { CollisionAvoidanceType, CollisionAvoidanceType_$type } from "igniteui-angular-charts";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicSymbolSeries } from "./GeographicSymbolSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
export const IgxGeographicSymbolSeriesComponent_PROVIDERS = [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicSymbolSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicSymbolSeriesComponent) }];
let IgxGeographicSymbolSeriesComponent = IgxGeographicSymbolSeriesComponent_1 = class IgxGeographicSymbolSeriesComponent extends IgxGeographicMapSeriesHostComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new GeographicSymbolSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    get latitudeMemberPath() {
        return this.i.mi;
    }
    set latitudeMemberPath(v) {
        this.i.mi = v;
    }
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    get longitudeMemberPath() {
        return this.i.mk;
    }
    set longitudeMemberPath(v) {
        this.i.mk = v;
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.mc;
    }
    set markerType(v) {
        this.i.mc = ensureEnum(MarkerType_$type, v);
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance() {
        return this.i.mb;
    }
    set markerCollisionAvoidance(v) {
        this.i.mb = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.mu;
    }
    set markerTemplate(v) {
        this.i.mu = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.m5);
    }
    set markerBrush(v) {
        this.i.m5 = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.m6);
    }
    set markerOutline(v) {
        this.i.m6 = stringToBrush(v);
    }
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
    */
    get maximumMarkers() {
        return this.i.mh;
    }
    set maximumMarkers(v) {
        this.i.mh = +v;
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.mg;
    }
    set markerThickness(v) {
        this.i.mg = +v;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicSymbolSeriesComponent.prototype, "latitudeMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicSymbolSeriesComponent.prototype, "longitudeMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicSymbolSeriesComponent.prototype, "markerType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicSymbolSeriesComponent.prototype, "markerCollisionAvoidance", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGeographicSymbolSeriesComponent.prototype, "markerTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicSymbolSeriesComponent.prototype, "markerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicSymbolSeriesComponent.prototype, "markerOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicSymbolSeriesComponent.prototype, "maximumMarkers", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicSymbolSeriesComponent.prototype, "markerThickness", null);
IgxGeographicSymbolSeriesComponent = IgxGeographicSymbolSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-symbol-series',
        template: ``,
        providers: [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicSymbolSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicSymbolSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicSymbolSeriesComponent);
export { IgxGeographicSymbolSeriesComponent };
//# sourceMappingURL=igx-geographic-symbol-series-component.js.map