var IgxGeographicHighDensityScatterSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxProgressiveLoadStatusEventArgs } from "igniteui-angular-charts";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicHighDensityScatterSeries } from "./GeographicHighDensityScatterSeries";
import { ensureBool, colorToString, stringToColor } from "igniteui-angular-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a HighDensityScatterSeries.
*/
export const IgxGeographicHighDensityScatterSeriesComponent_PROVIDERS = [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicHighDensityScatterSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicHighDensityScatterSeriesComponent) }];
let IgxGeographicHighDensityScatterSeriesComponent = IgxGeographicHighDensityScatterSeriesComponent_1 = class IgxGeographicHighDensityScatterSeriesComponent extends IgxGeographicMapSeriesHostComponent {
    constructor() {
        super();
        this._progressiveLoadStatusChanged = null;
    }
    createImplementation() {
        return new GeographicHighDensityScatterSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    get latitudeMemberPath() {
        return this.i.mq;
    }
    set latitudeMemberPath(v) {
        this.i.mq = v;
    }
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    get longitudeMemberPath() {
        return this.i.ms;
    }
    set longitudeMemberPath(v) {
        this.i.ms = v;
    }
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    get useBruteForce() {
        return this.i.mf;
    }
    set useBruteForce(v) {
        this.i.mf = ensureBool(v);
    }
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    get progressiveLoad() {
        return this.i.me;
    }
    set progressiveLoad(v) {
        this.i.me = ensureBool(v);
    }
    /**
     * Gets or sets the whether the chart reacts to mouse move events.
    */
    get mouseOverEnabled() {
        return this.i.md;
    }
    set mouseOverEnabled(v) {
        this.i.md = ensureBool(v);
    }
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    get heatMinimum() {
        return this.i.mh;
    }
    set heatMinimum(v) {
        this.i.mh = +v;
    }
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    get heatMaximum() {
        return this.i.mg;
    }
    set heatMaximum(v) {
        this.i.mg = +v;
    }
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    get heatMinimumColor() {
        return colorToString(this.i.na);
    }
    set heatMinimumColor(v) {
        this.i.na = stringToColor(v);
    }
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    get heatMaximumColor() {
        return colorToString(this.i.m9);
    }
    set heatMaximumColor(v) {
        this.i.m9 = stringToColor(v);
    }
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    get pointExtent() {
        return this.i.mk;
    }
    set pointExtent(v) {
        this.i.mk = +v;
    }
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    get progressiveStatus() {
        return this.i.ml;
    }
    set progressiveStatus(v) {
        this.i.ml = +v;
    }
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    get progressiveLoadStatusChanged() {
        if (this._progressiveLoadStatusChanged == null) {
            this._progressiveLoadStatusChanged = new EventEmitter();
            this.i.progressiveLoadStatusChanged = delegateCombine(this.i.progressiveLoadStatusChanged, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxProgressiveLoadStatusEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeProgressiveLoadStatusChanged) {
                        this.beforeProgressiveLoadStatusChanged(this, outerArgs);
                    }
                    this._progressiveLoadStatusChanged.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._progressiveLoadStatusChanged;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "latitudeMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "longitudeMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "useBruteForce", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "progressiveLoad", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "mouseOverEnabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "heatMinimum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "heatMaximum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "heatMinimumColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "heatMaximumColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "pointExtent", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "progressiveStatus", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicHighDensityScatterSeriesComponent.prototype, "progressiveLoadStatusChanged", null);
IgxGeographicHighDensityScatterSeriesComponent = IgxGeographicHighDensityScatterSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-high-density-scatter-series',
        template: ``,
        providers: [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicHighDensityScatterSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicHighDensityScatterSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicHighDensityScatterSeriesComponent);
export { IgxGeographicHighDensityScatterSeriesComponent };
//# sourceMappingURL=igx-geographic-high-density-scatter-series-component.js.map