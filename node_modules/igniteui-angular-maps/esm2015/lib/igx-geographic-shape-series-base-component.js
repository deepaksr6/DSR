import * as tslib_1 from "tslib";
import { forwardRef, Input } from '@angular/core';
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { IgxShapeDataSource } from "igniteui-angular-core";
/**
 * Base class for series which render polygons on a map.
*/
export const IgxGeographicShapeSeriesBaseComponent_PROVIDERS = [{ provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesBaseComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesBaseComponent) }];
export class IgxGeographicShapeSeriesBaseComponent extends IgxGeographicMapSeriesHostComponent {
    constructor() {
        super();
        this._currData = null;
        this._sub = null;
    }
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the string path of the .shp portion of the Shapefile.
    */
    set shapeDataSource(value) {
        this._shapeDataSource = value;
        this.updateShapeDataSource();
    }
    get shapeDataSource() {
        return this._shapeDataSource;
    }
    /**
     * Gets or sets the string path of the .dbf portion of the Shapefile.
    */
    set databaseSource(value) {
        this._databaseSource = value;
        this.updateShapeDataSource();
    }
    get databaseSource() {
        return this._databaseSource;
    }
    onUpdateDataSource(dataSource) {
        if (dataSource && dataSource.getPointData) {
            this._currData = dataSource;
            if (this._sub != null) {
                this._sub();
            }
            if (dataSource.count > 0) {
                return dataSource.getPointData();
            }
            this._sub = dataSource.importCompleted.subscribe((o, e) => {
                if (this._currData == dataSource) {
                    if (this._sub != null) {
                        this._sub();
                        this._sub == null;
                    }
                    this.i.itemsSource = dataSource.getPointData();
                }
            });
            return null;
        }
        return dataSource;
    }
    updateShapeDataSource() {
        if (this._cachedShapeDataSource == null) {
            this._cachedShapeDataSource = new IgxShapeDataSource();
            this.onShapeDataSourceImportCompleted = this.onShapeDataSourceImportCompleted.bind(this);
            this._cachedShapeDataSource.importCompleted.subscribe(this.onShapeDataSourceImportCompleted);
        }
        this._cachedShapeDataSource.shapefileSource = this._shapeDataSource;
        this._cachedShapeDataSource.databaseSource = this._databaseSource;
        if (this._shapeDataSource && this._databaseSource) {
            this._cachedShapeDataSource.dataBind();
        }
    }
    onShapeDataSourceImportCompleted(args) {
        this.dataSource = this._cachedShapeDataSource.getPointData();
    }
    /**
 * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.
 * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
*/
    get shapeMemberPath() {
        return this.i.mi;
    }
    set shapeMemberPath(v) {
        this.i.mi = v;
    }
    /**
     * Set a shapefile datasource to use with the series.
    */
    get shapefileDataSource() {
        if (this.i.md == null) {
            return null;
        }
        if (!this.i.md.externalObject) {
            let e = new IgxShapeDataSource();
            e._implementation = this.i.md;
            this.i.md.externalObject = e;
        }
        return this.i.md.externalObject;
    }
    set shapefileDataSource(v) {
        v == null ? this.i.md = null : this.i.md = v.i;
    }
    /**
     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
     * In the case of GeographicPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.
    */
    get shapeFilterResolution() {
        return this.i.mf;
    }
    set shapeFilterResolution(v) {
        this.i.mf = +v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapefileDataSource && this.shapefileDataSource.name && this.shapefileDataSource.name == name) {
            return this.shapefileDataSource;
        }
        return null;
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesBaseComponent.prototype, "shapeDataSource", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesBaseComponent.prototype, "databaseSource", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesBaseComponent.prototype, "shapeMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxShapeDataSource),
    tslib_1.__metadata("design:paramtypes", [IgxShapeDataSource])
], IgxGeographicShapeSeriesBaseComponent.prototype, "shapefileDataSource", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicShapeSeriesBaseComponent.prototype, "shapeFilterResolution", null);
//# sourceMappingURL=igx-geographic-shape-series-base-component.js.map