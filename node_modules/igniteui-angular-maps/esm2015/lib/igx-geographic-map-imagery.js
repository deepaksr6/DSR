import * as tslib_1 from "tslib";
import { EventEmitter, Output } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxImageTilesReadyEventArgs } from "./igx-image-tiles-ready-event-args";
import { IgxImagesChangedEventArgs } from "./igx-images-changed-event-args";
import { IgxCancellingMultiScaleImageEventArgs } from "igniteui-angular-core";
import { IgxDownloadingMultiScaleImageEventArgs } from "igniteui-angular-core";
import { fromRect, toRect } from "igniteui-angular-core";
/**
 * Control class used for displaying multi-scale TileSource imagery.  Designed to be used for background imagery in the IgxGeographicMap.Component
*/
export class IgxGeographicMapImagery {
    constructor() {
        this._imageTilesReady = null;
        this._imagesChanged = null;
        this._cancellingImage = null;
        this._downloadingImage = null;
        this._zoneRunner = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The deferral handler to use for deferred refreshes.
    */
    get deferralHandler() {
        return this.i.deferralHandler;
    }
    set deferralHandler(v) {
        this.i.deferralHandler = v;
    }
    /**
     * A rectangle representing the portion of the map imagery currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
    */
    get windowRect() {
        return fromRect(this.i.windowRect);
    }
    set windowRect(v) {
        this.i.windowRect = toRect(v);
    }
    /**
     * The IgxGeographicMapComponent which is hosting this GeographicMapImagery control.
    */
    get geographicMap() {
        if (this.i.geographicMap == null) {
            return null;
        }
        return this.i.geographicMap.externalObject;
    }
    set geographicMap(v) {
        v == null ? this.i.geographicMap = null : this.i.geographicMap = v.i;
    }
    /**
     * Gets or sets the referer sent in the headers of the tile request.
    */
    get referer() {
        return this.i.referer;
    }
    set referer(v) {
        this.i.referer = v;
    }
    /**
     * Gets or sets the UserAgent sent in the headers of the tile request.
    */
    get userAgent() {
        return this.i.userAgent;
    }
    set userAgent(v) {
        this.i.userAgent = v;
    }
    get opacity() {
        return this.i.opacity;
    }
    set opacity(v) {
        this.i.opacity = +v;
    }
    findByName(name) {
        if (this.geographicMap && this.geographicMap.name && this.geographicMap.name == name) {
            return this.geographicMap;
        }
        return null;
    }
    /**
     * Removes all cached tile Imagery from the
    
    */
    clearTileCache() {
        this.i.clearTileCache();
    }
    /**
     * Event raised when the image tiles have been downloaded.
    */
    get imageTilesReady() {
        if (this._imageTilesReady == null) {
            this._imageTilesReady = new EventEmitter();
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxImageTilesReadyEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeImageTilesReady) {
                        this.beforeImageTilesReady(this, outerArgs);
                    }
                    this._imageTilesReady.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._imageTilesReady;
    }
    /**
     * Event raised when tile images have changed.
    */
    get imagesChanged() {
        if (this._imagesChanged == null) {
            this._imagesChanged = new EventEmitter();
            this.i.imagesChanged = delegateCombine(this.i.imagesChanged, (o, e) => {
                let outerArgs = new IgxImagesChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (this.beforeImagesChanged) {
                    this.beforeImagesChanged(this, outerArgs);
                }
                this._imagesChanged.emit({
                    sender: this,
                    args: outerArgs
                });
            });
        }
        return this._imagesChanged;
    }
    /**
     * Event raised when an image is being downloaded.
    */
    get cancellingImage() {
        if (this._cancellingImage == null) {
            this._cancellingImage = new EventEmitter();
            this.i.cancellingImage = delegateCombine(this.i.cancellingImage, (o, e) => {
                let outerArgs = new IgxCancellingMultiScaleImageEventArgs();
                outerArgs._provideImplementation(e);
                if (this.beforeCancellingImage) {
                    this.beforeCancellingImage(this, outerArgs);
                }
                this._cancellingImage.emit({
                    sender: this,
                    args: outerArgs
                });
            });
        }
        return this._cancellingImage;
    }
    /**
     * Event raised when an image is being downloaded.
    */
    get downloadingImage() {
        if (this._downloadingImage == null) {
            this._downloadingImage = new EventEmitter();
            this.i.downloadingImage = delegateCombine(this.i.downloadingImage, (o, e) => {
                let outerArgs = new IgxDownloadingMultiScaleImageEventArgs();
                outerArgs._provideImplementation(e);
                if (this.beforeDownloadingImage) {
                    this.beforeDownloadingImage(this, outerArgs);
                }
                this._downloadingImage.emit({
                    sender: this,
                    args: outerArgs
                });
            });
        }
        return this._downloadingImage;
    }
    _runInZone(act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    }
}
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicMapImagery.prototype, "imageTilesReady", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicMapImagery.prototype, "imagesChanged", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicMapImagery.prototype, "cancellingImage", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicMapImagery.prototype, "downloadingImage", null);
//# sourceMappingURL=igx-geographic-map-imagery.js.map