/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicShapeSeriesBaseView } from "./GeographicShapeSeriesBaseView";
import { GeographicShapeSeriesBase } from "./GeographicShapeSeriesBase";
import { ScatterPolygonSeries } from "igniteui-angular-charts";
import { markType, runOn, delegateCombine, enumGetBox, markDep } from "igniteui-angular-core";
import { StyleSelector } from "igniteui-angular-charts";
import { DependencyProperty } from "igniteui-angular-core";
import { Style } from "igniteui-angular-core";
import { MarkerType_$type } from "igniteui-angular-charts";
import { DataTemplate } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { CollisionAvoidanceType_$type } from "igniteui-angular-charts";
import { PropertyMetadata } from "igniteui-angular-core";
/**
 * @hidden
 */
export class GeographicShapeSeriesView extends GeographicShapeSeriesBaseView {
    constructor(a) {
        super(a);
        this.b7 = null;
        this.b7 = a;
        if (!this.n) {
            this.b7.mi = "points";
        }
    }
    bv() {
        super.bv();
        this.b7.l3.ok = this.b7.nh;
        this.b7.l3.nk = this.b7.mq;
        this.b7.l3.n1 = this.b7.m4;
        this.b7.l3.nm = this.b7.ms;
        this.b7.l3.ne = this.b7.mo;
    }
    cc() {
        this.b7.l3.n1 = this.b7.m4;
    }
    ce() {
        this.b7.l3.nm = this.b7.ms;
    }
    b9() {
        this.b7.l3.ne = this.b7.mo;
    }
    cd() {
        this.b7.l3.nf = this.b7.mp;
    }
    b8() {
        this.b7.l3.og = this.b7.ne;
    }
    ca() {
        this.b7.l3.oh = this.b7.nf;
    }
    cb() {
        this.b7.l3.oj = this.b7.ng;
    }
    cf() {
        this.b7.l3.nk = this.b7.mq;
    }
    cg() {
        this.b7.l3.ok = this.b7.nh;
    }
}
GeographicShapeSeriesView.$t = markType(GeographicShapeSeriesView, 'GeographicShapeSeriesView', GeographicShapeSeriesBaseView.$);
/**
 * @hidden
 */
export class GeographicShapeSeries extends GeographicShapeSeriesBase {
    constructor() {
        super();
        this.styleShape = null;
        this.ms = 2;
        this.ab = GeographicShapeSeries.$;
    }
    bf() {
        return new GeographicShapeSeriesView(this);
    }
    iv(a) {
        super.iv(a);
        this.mr = a;
    }
    l2() {
        let a = new ScatterPolygonSeries();
        a.styleShape = delegateCombine(a.styleShape, runOn(this, this.m3));
        return a;
    }
    m3(a, b) {
        if (this.styleShape != null) {
            this.styleShape(this, b);
        }
    }
    i0(a, b, c, d) {
        super.i0(a, b, c, d);
        switch (b) {
            case GeographicShapeSeries.$$p[4]:
                this.mr.cc();
                break;
            case GeographicShapeSeries.$$p[5]:
                this.mr.ce();
                break;
            case GeographicShapeSeries.$$p[1]:
                this.mr.b9();
                break;
            case GeographicShapeSeries.$$p[6]:
                this.mr.cd();
                break;
            case GeographicShapeSeries.$$p[0]:
                this.mr.b8();
                break;
            case GeographicShapeSeries.$$p[2]:
                this.mr.ca();
                break;
            case GeographicShapeSeries.$$p[3]:
                this.mr.cb();
                break;
            case GeographicShapeSeries.$$p[8]:
                this.mr.cf();
                break;
            case GeographicShapeSeries.$$p[7]:
                this.mr.cg();
                break;
        }
    }
}
GeographicShapeSeries.$t = markType(GeographicShapeSeries, 'GeographicShapeSeries', GeographicShapeSeriesBase.$);
GeographicShapeSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicShapeSeries, 'raisePropertyChanged', ['MarkerBrush:ne:m5', [Brush.$], 'MarkerCollisionAvoidance:mo:m6', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:nf:m7', [Brush.$], 'MarkerStyle:ng:m8', [Style.$], 'MarkerTemplate:m4:m9', [DataTemplate.$, null], 'MarkerThickness:ms:na', [1], 'MarkerType:mp:nb', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:nh:nc', [Style.$, null], 'ShapeStyleSelector:mq:nd', [StyleSelector.$, null]]);
//# sourceMappingURL=GeographicShapeSeriesView_combined.js.map