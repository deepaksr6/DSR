var IgxGeographicScatterAreaSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxColorScaleComponent } from "igniteui-angular-charts";
import { IgxTriangulationStatusEventArgs } from "igniteui-angular-core";
import { IgxGeographicXYTriangulatingSeriesComponent } from "./igx-geographic-xy-triangulating-series-component";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicScatterAreaSeries } from "./GeographicScatterAreaSeries";
/**
 * Series class which draws a colored 2D surface, in a geographic context, based on a triangulation of XY data with numeric values assigned to each point.
*/
export const IgxGeographicScatterAreaSeriesComponent_PROVIDERS = [{ provide: IgxGeographicXYTriangulatingSeriesComponent, useExisting: forwardRef(() => IgxGeographicScatterAreaSeriesComponent) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicScatterAreaSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicScatterAreaSeriesComponent) }];
let IgxGeographicScatterAreaSeriesComponent = IgxGeographicScatterAreaSeriesComponent_1 = class IgxGeographicScatterAreaSeriesComponent extends IgxGeographicXYTriangulatingSeriesComponent {
    constructor() {
        super();
        this._triangulationStatusChanged = null;
    }
    createImplementation() {
        return new GeographicScatterAreaSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
    */
    get colorMemberPath() {
        return this.i.mz;
    }
    set colorMemberPath(v) {
        this.i.mz = v;
    }
    /**
     * The ColorScale used to resolve the color values of points in the series.
    */
    get colorScale() {
        if (this.i.mv == null) {
            return null;
        }
        if (!this.i.mv.externalObject) {
            let e = IgxColorScaleComponent._createFromInternal(this.i.mv);
            if (e) {
                e._implementation = this.i.mv;
            }
            this.i.mv.externalObject = e;
        }
        return this.i.mv.externalObject;
    }
    set colorScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mv = null : this.i.mv = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {
            return this.colorScale;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    get triangulationStatusChanged() {
        if (this._triangulationStatusChanged == null) {
            this._triangulationStatusChanged = new EventEmitter();
            this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxTriangulationStatusEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeTriangulationStatusChanged) {
                        this.beforeTriangulationStatusChanged(this, outerArgs);
                    }
                    this._triangulationStatusChanged.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._triangulationStatusChanged;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicScatterAreaSeriesComponent.prototype, "colorMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxColorScaleComponent),
    tslib_1.__metadata("design:paramtypes", [IgxColorScaleComponent])
], IgxGeographicScatterAreaSeriesComponent.prototype, "colorScale", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicScatterAreaSeriesComponent.prototype, "triangulationStatusChanged", null);
IgxGeographicScatterAreaSeriesComponent = IgxGeographicScatterAreaSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-scatter-area-series',
        template: ``,
        providers: [{ provide: IgxGeographicXYTriangulatingSeriesComponent, useExisting: forwardRef(() => IgxGeographicScatterAreaSeriesComponent_1) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicScatterAreaSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicScatterAreaSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicScatterAreaSeriesComponent);
export { IgxGeographicScatterAreaSeriesComponent };
//# sourceMappingURL=igx-geographic-scatter-area-series-component.js.map