/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicMapImagery } from "./GeographicMapImagery";
import { ITileGenerator_$type } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { TileGeneratorTileSource } from "igniteui-angular-core";
import { runOn, delegateCombine, markType, markDep } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { stringReplace } from "igniteui-angular-core";
/**
 * @hidden
 */
export class TileGeneratorMapImagery extends GeographicMapImagery {
    constructor() {
        super(new TileGeneratorTileSource());
        this.downloadingImage = delegateCombine(this.downloadingImage, runOn(this, this.bo));
        this.cancellingImage = delegateCombine(this.cancellingImage, runOn(this, this.bn));
    }
    bn(a, b) {
        let c = b.uri.toString().split('/');
        let d = parseInt(stringReplace(c[3], "/", ""));
        let e = parseInt(stringReplace(c[4], "/", ""));
        let f = parseInt(stringReplace(stringReplace(c[5], "/", ""), ".png", ""));
        if (this.tileGenerator != null) {
            this.tileGenerator.cancelTile(d, e, f);
        }
    }
    bo(a, b) {
        let c = b.uri.toString().split('/');
        let d = parseInt(stringReplace(c[3], "/", ""));
        let e = parseInt(stringReplace(c[4], "/", ""));
        let f = parseInt(stringReplace(stringReplace(c[5], "/", ""), ".png", ""));
        b.uri = null;
        let img_ = b.image;
        if (this.tileGenerator != null) {
            this.tileGenerator.getTile(d, e, f, (g, h) => this.deferralHandler.deferAction(() => img_.src = h.url), (g, h) => {
            }, (g, h) => {
            }, img_);
        }
    }
}
TileGeneratorMapImagery.$t = markType(TileGeneratorMapImagery, 'TileGeneratorMapImagery', GeographicMapImagery.$);
TileGeneratorMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, TileGeneratorMapImagery, 'a8', ['TileGenerator', [ITileGenerator_$type, null]]);
//# sourceMappingURL=TileGeneratorMapImagery.js.map