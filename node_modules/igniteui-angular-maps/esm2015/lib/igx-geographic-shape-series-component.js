var IgxGeographicShapeSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { MarkerType, MarkerType_$type } from "igniteui-angular-charts";
import { CollisionAvoidanceType, CollisionAvoidanceType_$type } from "igniteui-angular-charts";
import { IgxStyleShapeEventArgs } from "igniteui-angular-charts";
import { IgxGeographicShapeSeriesBaseComponent } from "./igx-geographic-shape-series-base-component";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicShapeSeries } from "./GeographicShapeSeries";
import { Style } from "igniteui-angular-core";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
/**
 * Series class which renders polygons as Paths, in a geographic context, based on lists of points in the ItemsSource.
*/
export const IgxGeographicShapeSeriesComponent_PROVIDERS = [{ provide: IgxGeographicShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesComponent) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesComponent) }];
let IgxGeographicShapeSeriesComponent = IgxGeographicShapeSeriesComponent_1 = class IgxGeographicShapeSeriesComponent extends IgxGeographicShapeSeriesBaseComponent {
    constructor() {
        super();
        this._styleShape = null;
    }
    createImplementation() {
        return new GeographicShapeSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the fill brush.
    */
    get shapeFill() {
        return this.i.nh ? this.i.nh.fill : null;
    }
    set shapeFill(v) {
        this.ensureShapeStyle();
        this.i.nh.fill = v;
    }
    /**
     * Gets or sets the stroke brush.
    */
    get shapeStroke() {
        return this.i.nh ? this.i.nh.stroke : null;
    }
    set shapeStroke(v) {
        this.ensureShapeStyle();
        this.i.nh.stroke = v;
    }
    /**
     * Gets or sets the stroke thickness.
    */
    get shapeStrokeThickness() {
        return this.i.nh ? this.i.nh.strokeThickness : NaN;
    }
    set shapeStrokeThickness(v) {
        this.ensureShapeStyle();
        this.i.nh.strokeThickness = +v;
    }
    /**
     * Gets or sets the opacity.
    */
    get shapeOpacity() {
        return this.i.nh ? this.i.nh.opacity : NaN;
    }
    set shapeOpacity(v) {
        this.ensureShapeStyle();
        this.i.nh.opacity = +v;
    }
    ensureShapeStyle() {
        if (this.i.nh) {
            return;
        }
        this.i.nh = new Style();
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.mp;
    }
    set markerType(v) {
        this.i.mp = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.m4;
    }
    set markerTemplate(v) {
        this.i.m4 = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.ne);
    }
    set markerBrush(v) {
        this.i.ne = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.nf);
    }
    set markerOutline(v) {
        this.i.nf = stringToBrush(v);
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.ms;
    }
    set markerThickness(v) {
        this.i.ms = +v;
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance() {
        return this.i.mo;
    }
    set markerCollisionAvoidance(v) {
        this.i.mo = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    get styleShape() {
        if (this._styleShape == null) {
            this._styleShape = new EventEmitter();
            this.i.styleShape = delegateCombine(this.i.styleShape, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxStyleShapeEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeStyleShape) {
                        this.beforeStyleShape(this, outerArgs);
                    }
                    this._styleShape.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._styleShape;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesComponent.prototype, "shapeFill", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesComponent.prototype, "shapeStroke", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicShapeSeriesComponent.prototype, "shapeStrokeThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicShapeSeriesComponent.prototype, "shapeOpacity", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicShapeSeriesComponent.prototype, "markerType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGeographicShapeSeriesComponent.prototype, "markerTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesComponent.prototype, "markerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicShapeSeriesComponent.prototype, "markerOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicShapeSeriesComponent.prototype, "markerThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicShapeSeriesComponent.prototype, "markerCollisionAvoidance", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicShapeSeriesComponent.prototype, "styleShape", null);
IgxGeographicShapeSeriesComponent = IgxGeographicShapeSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-shape-series',
        template: ``,
        providers: [{ provide: IgxGeographicShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesComponent_1) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicShapeSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicShapeSeriesComponent);
export { IgxGeographicShapeSeriesComponent };
//# sourceMappingURL=igx-geographic-shape-series-component.js.map