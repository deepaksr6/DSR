var IgxGeographicPolylineSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxStyleShapeEventArgs } from "igniteui-angular-charts";
import { IgxGeographicShapeSeriesBaseComponent } from "./igx-geographic-shape-series-base-component";
import { IgxGeographicMapSeriesHostComponent } from "./igx-geographic-map-series-host-component";
import { IgxSeriesComponent } from "igniteui-angular-charts";
import { GeographicPolylineSeries } from "./GeographicPolylineSeries";
import { Style } from "igniteui-angular-core";
/**
 * Series class used for displaying multiple polylines, in a geographic context, for datasources which contain multiple lists of points.
*/
export const IgxGeographicPolylineSeriesComponent_PROVIDERS = [{ provide: IgxGeographicShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxGeographicPolylineSeriesComponent) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicPolylineSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicPolylineSeriesComponent) }];
let IgxGeographicPolylineSeriesComponent = IgxGeographicPolylineSeriesComponent_1 = class IgxGeographicPolylineSeriesComponent extends IgxGeographicShapeSeriesBaseComponent {
    constructor() {
        super();
        this._styleShape = null;
    }
    createImplementation() {
        return new GeographicPolylineSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the fill brush.
    */
    get shapeFill() {
        return this.i.mw ? this.i.mw.fill : null;
    }
    set shapeFill(v) {
        this.ensureShapeStyle();
        this.i.mw.fill = v;
    }
    /**
     * Gets or sets the stroke brush.
    */
    get shapeStroke() {
        return this.i.mw ? this.i.mw.stroke : null;
    }
    set shapeStroke(v) {
        this.ensureShapeStyle();
        this.i.mw.stroke = v;
    }
    /**
     * Gets or sets the stroke thickness.
    */
    get shapeStrokeThickness() {
        return this.i.mw ? this.i.mw.strokeThickness : NaN;
    }
    set shapeStrokeThickness(v) {
        this.ensureShapeStyle();
        this.i.mw.strokeThickness = +v;
    }
    /**
     * Gets or sets the opacity.
    */
    get shapeOpacity() {
        return this.i.mw ? this.i.mw.opacity : NaN;
    }
    set shapeOpacity(v) {
        this.ensureShapeStyle();
        this.i.mw.opacity = +v;
    }
    ensureShapeStyle() {
        if (this.i.mw) {
            return;
        }
        this.i.mw = new Style();
    }
    get styleShape() {
        if (this._styleShape == null) {
            this._styleShape = new EventEmitter();
            this.i.styleShape = delegateCombine(this.i.styleShape, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxStyleShapeEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeStyleShape) {
                        this.beforeStyleShape(this, outerArgs);
                    }
                    this._styleShape.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._styleShape;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicPolylineSeriesComponent.prototype, "shapeFill", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGeographicPolylineSeriesComponent.prototype, "shapeStroke", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicPolylineSeriesComponent.prototype, "shapeStrokeThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGeographicPolylineSeriesComponent.prototype, "shapeOpacity", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicPolylineSeriesComponent.prototype, "styleShape", null);
IgxGeographicPolylineSeriesComponent = IgxGeographicPolylineSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-geographic-polyline-series',
        template: ``,
        providers: [{ provide: IgxGeographicShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxGeographicPolylineSeriesComponent_1) }, { provide: IgxGeographicMapSeriesHostComponent, useExisting: forwardRef(() => IgxGeographicPolylineSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxGeographicPolylineSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxGeographicPolylineSeriesComponent);
export { IgxGeographicPolylineSeriesComponent };
//# sourceMappingURL=igx-geographic-polyline-series-component.js.map