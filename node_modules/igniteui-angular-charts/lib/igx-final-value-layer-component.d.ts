import { Type } from '@angular/core';
import { IgxSeriesComponent } from "./igx-series-component";
import { FinalValueSelectionMode } from "./FinalValueSelectionMode";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { FinalValueLayer } from "./FinalValueLayer";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export declare const IgxFinalValueLayerComponent_PROVIDERS: ({
    provide: typeof IgxAnnotationLayerComponent;
    useExisting: Type<any>;
} | {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
})[];
export declare class IgxFinalValueLayerComponent extends IgxAnnotationLayerComponent {
    protected createImplementation(): FinalValueLayer;
    /**
                                 * @hidden
                                 */
    readonly i: FinalValueLayer;
    constructor();
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    targetSeries: IgxSeriesComponent;
    /**
     * Gets or sets how to select the final value to annotate.
    */
    finalValueSelectionMode: FinalValueSelectionMode;
    /**
     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
    */
    axisAnnotationTextColor: string;
    /**
     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
    */
    axisAnnotationBackground: string;
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    axisAnnotationInterpolatedValuePrecision: number;
    /**
     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
    */
    axisAnnotationOutline: string;
    /**
     * Gets or sets the left padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingLeft: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingTop: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingRight: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingBottom: number;
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    axisAnnotationStrokeThickness: number;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
}
