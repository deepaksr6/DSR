import { Type, EventEmitter } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxProgressiveLoadStatusEventArgs } from "./igx-progressive-load-status-event-args";
import { IgxSeriesComponent } from "./igx-series-component";
import { HighDensityScatterSeries } from "./HighDensityScatterSeries";
/**
 * Represents a IgxDataChartComponent series where a high volume of scatter points can be displayed.
*/
export declare const IgxHighDensityScatterSeriesComponent_PROVIDERS: {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
}[];
export declare class IgxHighDensityScatterSeriesComponent extends IgxSeriesComponent {
    protected createImplementation(): HighDensityScatterSeries;
    /**
                                 * @hidden
                                 */
    readonly i: HighDensityScatterSeries;
    constructor();
    /**
     * Checks if this series is a scatter series
    */
    readonly isScatter: boolean;
    /**
     * Gets or sets the effective x-axis for the current object.
    */
    xAxis: IgxNumericXAxisComponent;
    /**
     * Gets or sets the effective y-axis for the current object.
    */
    yAxis: IgxNumericYAxisComponent;
    /**
     * Gets or sets the x value mapping property for the current series object.
    */
    xMemberPath: string;
    /**
     * Gets or sets the y value mapping property for the current series object.
    */
    yMemberPath: string;
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    useBruteForce: boolean;
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    progressiveLoad: boolean;
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    heatMinimum: number;
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    heatMaximum: number;
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    heatMinimumColor: string;
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    heatMaximumColor: string;
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    pointExtent: number;
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    progressiveStatus: number;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    private _progressiveLoadStatusChanged;
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    readonly progressiveLoadStatusChanged: EventEmitter<{
        sender: any;
        args: IgxProgressiveLoadStatusEventArgs;
    }>;
}
