import { OnInit } from "@angular/core";
import { TimeAxisInterval } from "./TimeAxisInterval";
import { TimeAxisIntervalType } from "./TimeAxisIntervalType";
export declare const IgxTimeAxisIntervalComponent_PROVIDERS: any[];
export declare class IgxTimeAxisIntervalComponent implements OnInit {
    protected _implementation: any;
    readonly i: TimeAxisInterval;
    private onImplementationCreated;
    constructor();
    protected createImplementation(): TimeAxisInterval;
    ngOnInit(): void;
    private _renderer;
    private _provideRenderer;
    static _createFromInternal(internal: any): IgxTimeAxisIntervalComponent;
    /**
 * The visible axis range at which to apply this interval.
*
* Use `range` property for the visible axis range at which to apply this interval.
*
* ```ts
* let xAxis = new IgxTimeXAxisComponent();
* xAxis.dataTimeMemberPath="date";
* this.chart.axes.add(xAxis);
* ```
*
* ```html
* <igx-data-chart
*     [dataSource]="data">
* 	<igx-time-x-axis
* 		[labelFormats]="labelFormats"
* 		dateTimeMemberPath="time"
*
* 		#xAxis>
*     </igx-time-x-axis>
* </igx-data-chart>
* ```
*/
    range: number;
    /**
     * The interval, expressed as a multiple of IntervalType.
    *
    * Use the `interval` property expressed as a multiple of IntervalType.
    *
    * ```ts
    * let xAxis = new IgxTimeXAxisComponent();
    * xAxis.dataTimeMemberPath="date";
    * this.chart.axes.add(xAxis);
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    * 	<igx-time-x-axis
    * 		[labelFormats]="labelFormats"
    * 		dateTimeMemberPath="time"
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    */
    interval: number;
    /**
     * The unit of time for this interval.
    *
    * The `intervalType` is the unit of time for this interval.
    */
    intervalType: TimeAxisIntervalType;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
}
