import { EventEmitter, OnInit } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { StackedSeriesBase } from "./StackedSeriesBase";
import { IgxStackedSeriesCreatedEventArgs } from './igx-stacked-series-created-event-args';
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { AfterContentInit, QueryList } from '@angular/core';
import { IgxStackedFragmentSeriesComponent } from './igx-stacked-fragment-series-component';
import { IgxStackedSeriesCollection } from './igx-stacked-series-collection';
/**
 * Represents a IgxStackedSeriesBaseComponent base series.
*/
export declare const IgxStackedSeriesBaseComponent_PROVIDERS: any[];
export declare abstract class IgxStackedSeriesBaseComponent extends IgxCategorySeriesComponent implements AfterContentInit, OnInit {
    protected createImplementation(): StackedSeriesBase;
    ngOnInit(): void;
    protected _implementation: any;
    readonly i: StackedSeriesBase;
    constructor();
    ngAfterContentInit(): void;
    fragments: QueryList<IgxStackedFragmentSeriesComponent>;
    private _seriesAdapter;
    /**
     * The series actually present in the chart. Do not directly modify this array.
     * This array's contents can be modified by causing Angular to reproject the child content.
     * Or adding and removing series from the manual series collection on the series property.
     */
    actualSeries: IgxStackedFragmentSeriesComponent[];
    private _series;
    /**
     * A collection or manually added series for the chart.
    */
    readonly series: IgxStackedSeriesCollection;
    static _createFromInternal(internal: any): IgxStackedSeriesBaseComponent;
    /**
 * Gets or sets whether series should be automatically generated. Reqiures the use of GroupBy as the ItemsSource.
*/
    autoGenerateSeries: boolean;
    /**
     * Gets or sets whether the order of the fragment series should be reversed in the legend.
    */
    reverseLegendOrder: boolean;
    /**
     * Checks if this series is a stacked series
    */
    readonly isStacked: boolean;
    findByName(name: string): any;
    /**
 * Simulates a pointer hover over the series surface.

* @param point  * The pointer position relative to the series viewport over which to hover.
*/
    simulateHover(point: IgPoint): void;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item: any): boolean;
    private _seriesCreated;
    /**
     * Event raised when a new fragment series is automatically generated.
    */
    readonly seriesCreated: EventEmitter<{
        sender: any;
        args: IgxStackedSeriesCreatedEventArgs;
    }>;
}
