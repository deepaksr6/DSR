import { Type } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { IgPoint } from "igniteui-angular-core";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { TrendLineType } from "igniteui-angular-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterBase } from "./ScatterBase";
/**
 * Represents the base class for all IgxDataChartComponent scatter series
*/
export declare const IgxScatterBaseComponent_PROVIDERS: ({
    provide: typeof IgxMarkerSeriesComponent;
    useExisting: Type<any>;
} | {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
})[];
export declare abstract class IgxScatterBaseComponent extends IgxMarkerSeriesComponent {
    /**
                                 * @hidden
                                 */
    readonly i: ScatterBase;
    constructor();
    /**
     * Checks if this series is a scatter series
    */
    readonly isScatter: boolean;
    /**
     * Gets or sets the effective x-axis for the current object.
    */
    xAxis: IgxNumericXAxisComponent;
    /**
     * Gets or sets the effective y-axis for the current object.
    */
    yAxis: IgxNumericYAxisComponent;
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    xMemberPath: string;
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    yMemberPath: string;
    /**
     * Gets or sets the trend type for the current scatter series.
    */
    trendLineType: TrendLineType;
    /**
     * Gets or sets the brush to use to draw the trend line.
    */
    trendLineBrush: string;
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    actualTrendLineBrush: string;
    /**
     * Gets or sets the thickness of the current scatter series object's trend line.
    */
    trendLineThickness: number;
    /**
     * Gets or sets the moving average period for the current scatter series object.
     * The typical, and initial, value for trend line period is 7.
    */
    trendLinePeriod: number;
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    markerCollisionAvoidance: CollisionAvoidanceType;
    /**
     * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
    */
    trendLineZIndex: number;
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
    */
    maximumMarkers: number;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinates for which to get a value marker bounding box for
    */
    getSeriesValueMarkerBoundingBox(world: IgPoint): IgRect;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world: IgPoint): number;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item: any): boolean;
}
