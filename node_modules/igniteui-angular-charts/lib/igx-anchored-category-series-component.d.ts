import { Type } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { TrendLineType } from "igniteui-angular-core";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior } from "./ConsolidatedItemHitTestBehavior";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
/**
 * Represents the base class for all IgxDataChartComponent anchored category/value series.
*
* The `IgxAnchoredCategorySeriesComponent` represents the base class for all IgxDataChartComponent anchored category/value series.
*
* ```html
* <igx-data-chart [dataSource]="data">
*     <igx-category-x-axis
*         label="label"
*         #xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis #yAxis>
*     </igx-numeric-y-axis>
*     <igx-column-series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value"
*         markerType="circle" >
*     </igx-column-series>
* </igx-data-chart>
* ```
*/
export declare const IgxAnchoredCategorySeriesComponent_PROVIDERS: ({
    provide: typeof IgxMarkerSeriesComponent;
    useExisting: Type<any>;
} | {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
})[];
export declare abstract class IgxAnchoredCategorySeriesComponent extends IgxCategorySeriesComponent {
    /**
                                 * @hidden
                                 */
    readonly i: AnchoredCategorySeries;
    constructor();
    /**
     * Gets or sets the value mapping property for the current series object.
    *
    * The `valueMemberPath` property is used for the value mapping property of the current series object.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value" >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    valueMemberPath: string;
    /**
     * Gets or sets the trend type for the current series object.
    *
    * The `trendLineType` property is used for the current series object's trend type.'
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    *         trendLineType="simpleAverage" >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineType= "CubicFit";
    * ```
    */
    trendLineType: TrendLineType;
    /**
     * Gets or sets the brush to use to draw the trend line.
    *
    * The `trendLineBrush` property is used to brush the trend line.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    *         trendLineBrush= "grey"	>
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineBrush="red";
    * ```
    */
    trendLineBrush: string;
    /**
     * Gets the effective TrendLineBrush for this series.
    *
    * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.
    */
    actualTrendLineBrush: string;
    /**
     * Gets or sets the thickness of the current series object's trend line.
    *
    * The `trendLineThickness` property is used for thickness of the current series object's trend line.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    * 		trendLineThickness= 2  >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineThickness= 2;
    * ```
    */
    trendLineThickness: number;
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for trend line period is 7.
    *
    * The `trendLinePeriod` property is used for trend line period of the current series.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    *         trendLinePeriod: "7">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLinePeriod= 7;
    * ```
    */
    trendLinePeriod: number;
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    *
    * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    * 		markerCollisionAvoidance= "fade"
    *         >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    markerCollisionAvoidance: CategorySeriesMarkerCollisionAvoidance;
    /**
     * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.
    *
    * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.
    */
    consolidatedItemHitTestBehavior: ConsolidatedItemHitTestBehavior;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.
    *
    * ```ts
    * this.series.scrollIntoView(dataItem);
    * ```
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    *
    * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.
    *
    * ```ts
    * let item: number = this.series.getItem({x:.5,y:.5});
    * ```
    */
    getItem(world: IgPoint): any;
}
