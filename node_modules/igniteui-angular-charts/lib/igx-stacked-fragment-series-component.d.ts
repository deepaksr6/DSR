import { EventEmitter, OnInit } from '@angular/core';
import { IgDataTemplate } from "igniteui-angular-core";
import { Visibility } from "igniteui-angular-core";
import { MarkerType } from "./MarkerType";
import { IgxPropertyUpdatedEventArgs } from "igniteui-angular-core";
import { StackedFragmentSeries } from "./StackedFragmentSeries";
/**
 * Represents a non-visual child of StackedSeriesBase.
*/
export declare const IgxStackedFragmentSeriesComponent_PROVIDERS: any[];
export declare class IgxStackedFragmentSeriesComponent implements OnInit {
    protected createImplementation(): StackedFragmentSeries;
    ngOnInit(): void;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: StackedFragmentSeries; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgxStackedFragmentSeriesComponent;
    private onImplementationCreated;
    constructor();
    /**
     * Gets or sets the brush of the stacked fragment.
    */
    brush: string;
    /**
     * Gets the actual brush used by the series.
    */
    actualBrush: string;
    /**
     * Gets or sets whether drop shadow should be enabled for this series.
    */
    isDropShadowEnabled: boolean;
    /**
     * Gets whether drop shadow is actually enabled for this series.
    */
    actualIsDropShadowEnabled: boolean;
    /**
     * Gets or sets the shadow blur.
     * This property is ignored when StackedFragmentSeries.UseSingleShadow is set to true.
    */
    shadowBlur: number;
    /**
     * Gets the actual shadow blur used by the series.
    */
    actualShadowBlur: number;
    /**
     * Gets or sets the drop shadow color.
    */
    shadowColor: string;
    /**
     * Gets actual the drop shadow color used by the series.
    */
    actualShadowColor: string;
    /**
     * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
     * When this property is set to true, no StackedFragmentSeries.ShadowBlur is applied.
    */
    useSingleShadow: boolean;
    /**
     * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
    */
    actualUseSingleShadow: boolean;
    /**
     * Gets or sets the drop shadow x-offset.
    */
    shadowOffsetX: number;
    /**
     * Gets the actual drop shadow x-offset applied to the series.
    */
    actualShadowOffsetX: number;
    /**
     * Gets or sets the drop shadow y-offset.
    */
    shadowOffsetY: number;
    /**
     * Gets the actual drop shadow y-offset applied to the series.
    */
    actualShadowOffsetY: number;
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the series object itself.
    */
    legendItemBadgeTemplate: IgDataTemplate;
    /**
     * Gets the actual legend item badge template used by the series.
    */
    actualLegendItemBadgeTemplate: IgDataTemplate;
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the series object itself.
    */
    legendItemTemplate: IgDataTemplate;
    /**
     * Gets the actual legend item template used by the series.
    */
    actualLegendItemTemplate: IgDataTemplate;
    /**
     * Gets or sets the legend item visibility for the current series object.
    */
    legendItemVisibility: Visibility;
    /**
     * Gets the actual visibility of the legend items in the series.
    */
    actualLegendItemVisibility: Visibility;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    markerBrush: string;
    /**
     * Gets the actual marker brush of the series.
    */
    actualMarkerBrush: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    markerOutline: string;
    /**
     * Gets the actual marker outline of the series.
    */
    actualMarkerOutline: string;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    markerTemplate: IgDataTemplate;
    /**
     * Gets the actual marker template used by the series.
    */
    actualMarkerTemplate: IgDataTemplate;
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    markerType: MarkerType;
    /**
     * Gets the actual marker type set used in the series.
    */
    actualMarkerType: MarkerType;
    /**
     * Gets or sets the Name of the stacked fragment.
    */
    name: string;
    /**
     * Gets or sets the Opacity of the stacked fragment.
    */
    opacity: number;
    /**
     * Gets the series opacity.
    */
    actualOpacity: number;
    /**
     * Gets or sets the brush to use for the outline of the series.
     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
    */
    outline: string;
    /**
     * Gets the series outline.
    */
    actualOutline: string;
    /**
     * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.
    */
    areaFillOpacity: number;
    /**
     * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.
    */
    actualAreaFillOpacity: number;
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    radiusX: number;
    /**
     * Gets the actual corner radius of the series
    */
    actualRadiusX: number;
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    radiusY: number;
    /**
     * Gets the actual corner radius of the series
    */
    actualRadiusY: number;
    /**
     * Gets or sets the width of the current series object's line thickness.
    */
    thickness: number;
    /**
     * Gets or sets the thickness of this stacked fragment.
    */
    actualThickness: number;
    /**
     * Gets or sets the Title property.
     * The legend item control is created according to the Title on-demand by
     * the series object itself.
    */
    title: any;
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    valueMemberPath: string;
    /**
     * Gets or sets the Visibility of the stacked fragment.
    */
    visibility: Visibility;
    /**
     * Gets the actual visibility of the stacked fragment.
    */
    actualVisibility: Visibility;
    /**
     * Gets the resolved brush used between the local series and the parent series.
    */
    parentOrLocalBrush: string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    private _propertyUpdated;
    /**
     * Event raised when a property (including "effective" and non-dependency property) value changes.
    */
    readonly propertyUpdated: EventEmitter<{
        sender: any;
        args: IgxPropertyUpdatedEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
}
