import { Type } from '@angular/core';
import { IgxSeriesComponent } from "./igx-series-component";
import { Visibility } from "igniteui-angular-core";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { CrosshairLayer } from "./CrosshairLayer";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export declare const IgxCrosshairLayerComponent_PROVIDERS: ({
    provide: typeof IgxAnnotationLayerComponent;
    useExisting: Type<any>;
} | {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
})[];
export declare class IgxCrosshairLayerComponent extends IgxAnnotationLayerComponent {
    protected createImplementation(): CrosshairLayer;
    /**
                                 * @hidden
                                 */
    readonly i: CrosshairLayer;
    constructor();
    /**
     * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
    */
    horizontalLineStroke: string;
    /**
     * Gets or sets the color to use for vertical line. Leave null for an automatic value.
    */
    verticalLineStroke: string;
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    targetSeries: IgxSeriesComponent;
    /**
     * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
    */
    useInterpolation: boolean;
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    isAxisAnnotationEnabled: boolean;
    /**
     * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
    */
    xAxisAnnotationTextColor: string;
    /**
     * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
    */
    xAxisAnnotationBackground: string;
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    xAxisAnnotationInterpolatedValuePrecision: number;
    /**
     * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
    */
    xAxisAnnotationOutline: string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    xAxisAnnotationPaddingLeft: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    xAxisAnnotationPaddingTop: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    xAxisAnnotationPaddingRight: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    xAxisAnnotationPaddingBottom: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    yAxisAnnotationPaddingLeft: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    yAxisAnnotationPaddingTop: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    yAxisAnnotationPaddingRight: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    yAxisAnnotationPaddingBottom: number;
    /**
     * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
    */
    xAxisAnnotationStrokeThickness: number;
    /**
     * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
    */
    yAxisAnnotationTextColor: string;
    /**
     * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
    */
    yAxisAnnotationBackground: string;
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    yAxisAnnotationInterpolatedValuePrecision: number;
    /**
     * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
    */
    yAxisAnnotationOutline: string;
    /**
     * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
    */
    yAxisAnnotationStrokeThickness: number;
    /**
     * Gets or sets whether to display the vertical line.
    */
    verticalLineVisibility: Visibility;
    /**
     * Gets or sets whether to display the horizontal line.
    */
    horizontalLineVisibility: Visibility;
    /**
     * Gets or sets whether to skip unknown values when searching for series values.
    */
    skipUnknownValues: boolean;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
}
