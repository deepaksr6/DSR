import { Type, OnDestroy, Injector, ComponentFactoryResolver, AfterContentInit, Renderer2, QueryList, NgZone, ViewContainerRef } from '@angular/core';
import { IgxAxisComponent } from './igx-axis-component';
import { IgxSeriesComponent } from './igx-series-component';
import { GridMode } from './GridMode';
import { IgxSeriesViewerComponent } from './igx-series-viewer-component';
import { XamDataChart } from './XamDataChart';
import { IgxSeriesCollection } from './igx-series-collection';
import { IgxAxisCollection } from './igx-axis-collection';
export declare const IgxDataChartComponent_PROVIDERS: {
    provide: typeof IgxSeriesViewerComponent;
    useExisting: Type<any>;
}[];
/**
 * Represents a chart area containing axes, series, an optional legend and other hosted content.
*/
export declare class IgxDataChartComponent extends IgxSeriesViewerComponent implements AfterContentInit, OnDestroy {
    private _renderer;
    private _elRef;
    private _ngZone;
    private _componentFactoryResolver;
    private _injector;
    contentAxes: QueryList<IgxAxisComponent>;
    contentSeries: QueryList<IgxSeriesComponent>;
    _dynamicContent: ViewContainerRef;
    private _height;
    private _width;
    height: string;
    width: string;
    /**
     * Gets or sets the legend used for the current chart.
    */
    legend: any;
    /**
     * The series actually present in the chart. Do not directly modify this array.
     * This array's contents can be modified by causing Angular to reproject the child content.
     * Or adding and removing series from the manual series collection on the series property.
     */
    actualSeries: IgxSeriesComponent[];
    /**
     * The axes actually present in the chart. Do not directly modify this array.
     * This array's contents can be modified by causing Angular to reproject the child content.
     * Or adding and removing axes from the manual axes collection on the axes property.
     */
    actualAxes: IgxAxisComponent[];
    private _container;
    private _series;
    /**
     * A collection or manually added series for the chart.
    */
    readonly series: IgxSeriesCollection;
    private _axes;
    /**
     * A collection or manually added axes for the chart.
    */
    readonly axes: IgxAxisCollection;
    private _root;
    constructor(_renderer: Renderer2, _elRef: ViewContainerRef, _ngZone: NgZone, _componentFactoryResolver: ComponentFactoryResolver, _injector: Injector);
    ngOnDestroy(): void;
    private _wrapper;
    protected createImplementation(): XamDataChart;
    private _chart;
    private _dataSource;
    dataSource: any;
    bindData(): void;
    private _axesAdapter;
    private _seriesAdapter;
    ngAfterContentInit(): void;
    private _ensureTooltipCreated;
    private _defaultTooltips;
    private _ensureDefaultTooltip;
    private _onDefaultTooltipsReady;
    private createTooltip;
    /**
     * Gets or sets the channel with which to synchronize.
    *
    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.
    */
    syncChannel: string;
    /**
     * Gets or sets the bool used to display the window preview shadow.
    *
    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.
    */
    synchronizeVertically: boolean;
    /**
     * Gets or sets the bool used to display the window preview shadow.
    *
    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.
    */
    synchronizeHorizontally: boolean;
    /**
                             * @hidden
                             */
    readonly i: XamDataChart;
    /**
 * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
*
* Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.
*
* ```html
* <igx-data-chart [dataSource]="data"
*     isSquare="true"
*     width="800px"
*     height="400px">
*   <igx-category-x-axis #xAxis
*     label="label">
*   </igx-category-x-axis>
*   <igx-numeric-y-axis #yAxis
*     majorStroke="green">
*   </igx-numeric-y-axis>
*
*   <igx-column-series
*     [xAxis]="xAxis"
*     [yAxis]="yAxis"
*     valueMemberPath="value">
*   </igx-column-series>
* </igx-data-chart>
* ```
*
* ```ts
*  this.chart.isSquare="True";
* ```
*/
    isSquare: boolean;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the WindowRect property.
    *
    * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     windowScaleHorizontal="0.75">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.windowScaleHorizontal="0.75";
    * ```
    */
    windowScaleHorizontal: number;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the WindowRect property.
    *
    * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     windowScaleVertical="0.75">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.windowScaleVertical="0.75";
    * ```
    */
    windowScaleVertical: number;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the ActualWindowRect property.
    */
    actualWindowScaleHorizontal: number;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the ActualWindowRect property.
    */
    actualWindowScaleVertical: number;
    /**
     * Gets or sets horizontal zoomability of the current control
    *
    * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     isHorizontalZoomEnabled="true">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.IsHorizontalZoomEnabled= true;
    * ```
    */
    isHorizontalZoomEnabled: boolean;
    /**
     * Gets or sets vertical zoomability of the current control
    *
    * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     isVerticalZoomEnabled="true">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.isVerticalZoomEnabled="True";
    * ```
    */
    isVerticalZoomEnabled: boolean;
    /**
     * Gets or sets how grid lines are rendered in relation to series.
    *
    *  Try setting the `gridMode` property to bring your grid lines in front of the data series.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     gridMode="beforeSeries">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis
    *     majorStroke="green">
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    gridMode: GridMode;
    /**
     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
    */
    alignsGridLinesToPixels: boolean;
    /**
     * Gets or sets the palette of brushes to use for coloring the chart series.
    *
    * `brushes` can be set declaratively to a list of color strings.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     brushes="red,green,blue">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.brushes="red" ;
    * ```
    */
    brushes: string[];
    /**
     * Gets or sets the MarkerBrushes property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
    *
    * `markerBrushes` can be set declaratively to a list of color strings.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     markerBrushes="red,green,blue">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value"
    *     markerType="circle">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value"
    *     markerType="circle">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value"
    *     markerType="circle">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.markerBrushes="red,green,blue";
    * ```
    */
    markerBrushes: string[];
    /**
     * Gets or sets the palette of brushes to use for outlines on the chart series.
    *
    * `outlines` can be set declaratively to a list of color strings.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     outlines="red,green,blue">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.outlines="red,green,blue";
    * ```
    */
    outlines: string[];
    /**
     * Gets or sets the MarkerOutlines property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
    *
    * `markerOutlines` can be set declaratively to a list of color strings.
    *
    * ```html
    * <igx-data-chart [dataSource]="data"
    *     markerOutlines="red,green,blue">
    *   <igx-category-x-axis #xAxis
    *     label="label">
    *   </igx-category-x-axis>
    *   <igx-numeric-y-axis #yAxis>
    *   </igx-numeric-y-axis>
    *
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value"
    *     markerType="circle">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value"
    *     markerType="circle">
    *   </igx-column-series>
    *   <igx-column-series
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     valueMemberPath="value"
    *     markerType="circle">
    *   </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.markerOutlines="red,green,blue";
    * ```
    */
    markerOutlines: string[];
    /**
     * Gets or sets the DefaultAxisStroke property.
     * The DefaultAxisStroke property defines the brush which is used by the axes when no Axis.Stroke is set.
    */
    defaultAxisStroke: string;
    /**
     * Gets or sets the DefaultAxisMajorStroke property.
     * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no Axis.MajorStroke is set.
    */
    defaultAxisMajorStroke: string;
    /**
     * Gets or sets the DefaultAxisMinorStroke property.
     * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no Axis.MinorStroke is set.
    */
    defaultAxisMinorStroke: string;
    /**
     * Margin applied to the left of the plot area.
    */
    plotAreaMarginLeft: number;
    /**
     * Margin applied above the plot area.
    */
    plotAreaMarginTop: number;
    /**
     * Margin applied to the right of the plot area.
    */
    plotAreaMarginRight: number;
    /**
     * Margin applied below the plot area.
    */
    plotAreaMarginBottom: number;
    findByName(name: string): any;
    /**
 * Notifies the chart that the CSS styles in effect have been updated.

*/
    styleUpdated(): void;
    /**
     * Export serialized visual data.
    
    */
    exportSerializedVisualData(): string;
}
