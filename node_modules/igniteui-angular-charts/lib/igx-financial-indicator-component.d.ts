import { Type } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { IgPoint } from "igniteui-angular-core";
import { IndicatorDisplayType } from "./IndicatorDisplayType";
import { TrendLineType } from "igniteui-angular-core";
import { IgxFinancialSeriesComponent } from "./igx-financial-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { FinancialIndicator } from "./FinancialIndicator";
/**
 * Represents the base functionality for a IgxDataChartComponent financial indicator series.
*
* The `IgxFinancialIndicatorComponent` class represents the base functionality for a IgxDataChartComponent financial indicator series.
*
* ```html
* <igx-data-chart  #chart
*     [dataSource]="data" >
* <igx-ordinal-time-x-axis
*     label="label"
*     #xAxis>
*     </igx-ordinal-time-x-axis>
*  <igx-numeric-y-axis
*     minimumValue="0"
*     #yAxis>
*     </igx-numeric-y-axis>
* <igx-mass-index-indicator
* [xAxis]="xAxis"
*     [yAxis]="yAxis"
*     openMemberPath="open"
*     highMemberPath="high"
*     lowMemberPath="low"
*     closeMemberPath="close"
*     volumeMemberPath="volume"   >
*     </igx-mass-index-indicator >
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxMassIndexIndicatorComponent();
*    series.xAxis = this.xAxis;
*    series.yAxis = this.yAxis;
*    series.openMemberPath = "open";
*    series.highMemberPath = "high";
*    series.lowMemberPath = "low";
*    series.closeMemberPath = "close";
*    this.chart.series.add(series);
*
* ```
*/
export declare const IgxFinancialIndicatorComponent_PROVIDERS: ({
    provide: typeof IgxFinancialSeriesComponent;
    useExisting: Type<any>;
} | {
    provide: typeof IgxSeriesComponent;
    useExisting: Type<any>;
})[];
export declare abstract class IgxFinancialIndicatorComponent extends IgxFinancialSeriesComponent {
    /**
                                 * @hidden
                                 */
    readonly i: FinancialIndicator;
    constructor();
    /**
     * Gets or sets the display for the current FinancialIndicator object.
    *
    * The `displayType` property is used to display the current FinancialIndicator object.
    *
    * ```ts
    * series.displayType= IndicatorDisplayType.Column;
    * ```
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data" >
    * <igx-ordinal-time-x-axis
    *     label="label"
    *     #xAxis>
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    * <igx-mass-index-indicator
    * [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    *     volumeMemberPath="volume"
    * 	displayType="Column"   >
    *     </igx-mass-index-indicator >
    * </igx-data-chart>
    * ```
    */
    displayType: IndicatorDisplayType;
    /**
     * Gets or sets the number of values to hide at the beginning of the indicator.
    *
    * Use the `ignoreFirst` propert to hide the number of values at the beginning of the indicator.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data" >
    * <igx-ordinal-time-x-axis
    *     label="label"
    *     #xAxis>
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    * <igx-mass-index-indicator
    * [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    *     volumeMemberPath="volume"
    * 	ignoreFirst="2" >
    *     </igx-mass-index-indicator >
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.ignoreFirst  = 2;
    * ```
    */
    ignoreFirst: number;
    /**
     * Gets or sets the trend type for the current indicator series.
    *
    * Use `trendLineType` property to get the trend type for the current indicator series.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *    <igx-ordinal-time-x-axis
    *     label="label"
    *     #xAxis>
    *     </igx-ordinal-time-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-mass-index-indicator
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         openMemberPath="open"
    *         highMemberPath="high"
    *         lowMemberPath="low"
    *         closeMemberPath="close"
    * 		trendLineType="CubicFit">
    *     </igx-mass-index-indicator>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineType= TrendLineType.CubicFit;
    * ```
    */
    trendLineType: TrendLineType;
    /**
     * Gets or sets the brush to use to draw the trend line.
    *
    * Use the `trendLineBrush` propert to draw the trend line.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data" >
    * <igx-ordinal-time-x-axis
    *     label="label"
    *     #xAxis>
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    * <igx-mass-index-indicator
    * [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    *     volumeMemberPath="volume"
    * 	trendLineBrush="Red">
    *     </igx-mass-index-indicator >
    * </igx-data-chart>
    * ```
    */
    trendLineBrush: string;
    /**
     * Gets the effective TrendLineBrush for this indicator.
    *
    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.
    */
    actualTrendLineBrush: string;
    /**
     * Gets or sets the thickness of the current indicator object's trend line.
    *
    * Use `trendLineThickness` property for the thickness of the current indicator object's trend line.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data" >
    * <igx-ordinal-time-x-axis
    *     label="label"
    *     #xAxis>
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    * <igx-mass-index-indicator
    * [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    *     volumeMemberPath="volume"
    * 	trendLineThickness="2" >
    *     </igx-mass-index-indicator >
    * </igx-data-chart>
    * ```
    *
    * ```ts
    *  series.trendLineThickness=2 ;
    * ```
    */
    trendLineThickness: number;
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for trend line period is 7.
    *
    * Use `trendLinePeriod` property for the trend line period of the current series.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data" >
    * <igx-ordinal-time-x-axis
    *     label="label"
    *     #xAxis>
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    * <igx-mass-index-indicator
    * [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    *     volumeMemberPath="volume"
    * 	trendLinePeriod="30" >
    *     </igx-mass-index-indicator >
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLinePeriod  =30;
    * ```
    */
    trendLinePeriod: number;
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    *
    * The `getSeriesValueBoundingBox` method returns the best available value bounding box within the series that has the best value match for the world position provided.
    */
    getSeriesValueBoundingBox(world: IgPoint): IgRect;
    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `scrollIntoView` method scrolls the series to display the item for the specified data item.
    */
    scrollIntoView(item: any): boolean;
}
