var IgxScatterPolygonSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxStyle } from "igniteui-angular-core";
import { MarkerType, MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType, CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { IgxShapeSeriesBaseComponent } from "./igx-shape-series-base-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
export const IgxScatterPolygonSeriesComponent_PROVIDERS = [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent) }];
let IgxScatterPolygonSeriesComponent = IgxScatterPolygonSeriesComponent_1 = class IgxScatterPolygonSeriesComponent extends IgxShapeSeriesBaseComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new ScatterPolygonSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Returns whether the current series supports visual markers.
    */
    get hasMarkers() {
        return this.i.hasMarkers;
    }
    /**
     * The default style to apply to all Shapes in the series.
    */
    get shapeStyle() {
        if (this.i.ok == null) {
            return null;
        }
        if (!this.i.ok.externalObject) {
            let e = new IgxStyle();
            e._implementation = this.i.ok;
            this.i.ok.externalObject = e;
        }
        return this.i.ok.externalObject;
    }
    set shapeStyle(v) {
        v == null ? this.i.ok = null : this.i.ok = v.i;
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.nf;
    }
    set markerType(v) {
        this.i.nf = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.n1;
    }
    set markerTemplate(v) {
        this.i.n1 = v;
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.nm;
    }
    set markerThickness(v) {
        this.i.nm = +v;
    }
    /**
     * Gets the effective marker template for the current series object.
    */
    get actualMarkerTemplate() {
        return this.i.n0;
    }
    set actualMarkerTemplate(v) {
        this.i.n0 = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.og);
    }
    set markerBrush(v) {
        this.i.og = stringToBrush(v);
    }
    /**
     * Gets the effective marker brush for the current series object.
    */
    get actualMarkerBrush() {
        return brushToString(this.i.oe);
    }
    set actualMarkerBrush(v) {
        this.i.oe = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.oh);
    }
    set markerOutline(v) {
        this.i.oh = stringToBrush(v);
    }
    /**
     * Gets the effective marker outline for the current series object.
    */
    get actualMarkerOutline() {
        return brushToString(this.i.of);
    }
    set actualMarkerOutline(v) {
        this.i.of = stringToBrush(v);
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance() {
        return this.i.ne;
    }
    set markerCollisionAvoidance(v) {
        this.i.ne = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxStyle),
    tslib_1.__metadata("design:paramtypes", [IgxStyle])
], IgxScatterPolygonSeriesComponent.prototype, "shapeStyle", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxScatterPolygonSeriesComponent.prototype, "markerType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxScatterPolygonSeriesComponent.prototype, "markerTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxScatterPolygonSeriesComponent.prototype, "markerThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxScatterPolygonSeriesComponent.prototype, "actualMarkerTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxScatterPolygonSeriesComponent.prototype, "markerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxScatterPolygonSeriesComponent.prototype, "actualMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxScatterPolygonSeriesComponent.prototype, "markerOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxScatterPolygonSeriesComponent.prototype, "actualMarkerOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxScatterPolygonSeriesComponent.prototype, "markerCollisionAvoidance", null);
IgxScatterPolygonSeriesComponent = IgxScatterPolygonSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-scatter-polygon-series',
        template: ``,
        providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxScatterPolygonSeriesComponent);
export { IgxScatterPolygonSeriesComponent };
//# sourceMappingURL=igx-scatter-polygon-series-component.js.map