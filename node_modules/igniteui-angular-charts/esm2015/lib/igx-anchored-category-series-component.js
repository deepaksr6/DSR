import * as tslib_1 from "tslib";
import { forwardRef, Input } from '@angular/core';
import { TrendLineType, TrendLineType_$type } from "igniteui-angular-core";
import { CategorySeriesMarkerCollisionAvoidance, CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior, ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ensureEnum, brushToString, stringToBrush, toPoint } from "igniteui-angular-core";
/**
 * Represents the base class for all IgxDataChartComponent anchored category/value series.
*
* The `IgxAnchoredCategorySeriesComponent` represents the base class for all IgxDataChartComponent anchored category/value series.
*
* ```html
* <igx-data-chart [dataSource]="data">
*     <igx-category-x-axis
*         label="label"
*         #xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis #yAxis>
*     </igx-numeric-y-axis>
*     <igx-column-series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value"
*         markerType="circle" >
*     </igx-column-series>
* </igx-data-chart>
* ```
*/
export const IgxAnchoredCategorySeriesComponent_PROVIDERS = [{ provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxAnchoredCategorySeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxAnchoredCategorySeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxAnchoredCategorySeriesComponent) }];
export class IgxAnchoredCategorySeriesComponent extends IgxCategorySeriesComponent {
    constructor() {
        super();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the value mapping property for the current series object.
    *
    * The `valueMemberPath` property is used for the value mapping property of the current series object.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value" >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get valueMemberPath() {
        return this.i.ph;
    }
    set valueMemberPath(v) {
        this.i.ph = v;
    }
    /**
     * Gets or sets the trend type for the current series object.
    *
    * The `trendLineType` property is used for the current series object's trend type.'
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    *         trendLineType="simpleAverage" >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineType= "CubicFit";
    * ```
    */
    get trendLineType() {
        return this.i.trendLineType;
    }
    set trendLineType(v) {
        this.i.trendLineType = ensureEnum(TrendLineType_$type, v);
    }
    /**
     * Gets or sets the brush to use to draw the trend line.
    *
    * The `trendLineBrush` property is used to brush the trend line.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    *         trendLineBrush= "grey"	>
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineBrush="red";
    * ```
    */
    get trendLineBrush() {
        return brushToString(this.i.trendLineBrush);
    }
    set trendLineBrush(v) {
        this.i.trendLineBrush = stringToBrush(v);
    }
    /**
     * Gets the effective TrendLineBrush for this series.
    *
    * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.
    */
    get actualTrendLineBrush() {
        return brushToString(this.i.pz);
    }
    set actualTrendLineBrush(v) {
        this.i.pz = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness of the current series object's trend line.
    *
    * The `trendLineThickness` property is used for thickness of the current series object's trend line.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    * 		trendLineThickness= 2  >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLineThickness= 2;
    * ```
    */
    get trendLineThickness() {
        return this.i.trendLineThickness;
    }
    set trendLineThickness(v) {
        this.i.trendLineThickness = +v;
    }
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for trend line period is 7.
    *
    * The `trendLinePeriod` property is used for trend line period of the current series.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    *         trendLinePeriod: "7">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.trendLinePeriod= 7;
    * ```
    */
    get trendLinePeriod() {
        return this.i.trendLinePeriod;
    }
    set trendLinePeriod(v) {
        this.i.trendLinePeriod = +v;
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    *
    * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.
    *
    * ```html
    * <igx-data-chart [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis #yAxis>
    *     </igx-numeric-y-axis>
    *
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         markerType="circle"
    * 		markerCollisionAvoidance= "fade"
    *         >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get markerCollisionAvoidance() {
        return this.i.o4;
    }
    set markerCollisionAvoidance(v) {
        this.i.o4 = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);
    }
    /**
     * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.
    *
    * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.
    */
    get consolidatedItemHitTestBehavior() {
        return this.i.o5;
    }
    set consolidatedItemHitTestBehavior(v) {
        this.i.o5 = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.
    *
    * ```ts
    * this.series.scrollIntoView(dataItem);
    * ```
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    *
    * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.
    *
    * ```ts
    * let item: number = this.series.getItem({x:.5,y:.5});
    * ```
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxAnchoredCategorySeriesComponent.prototype, "valueMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredCategorySeriesComponent.prototype, "trendLineType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxAnchoredCategorySeriesComponent.prototype, "trendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxAnchoredCategorySeriesComponent.prototype, "actualTrendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredCategorySeriesComponent.prototype, "trendLineThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredCategorySeriesComponent.prototype, "trendLinePeriod", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredCategorySeriesComponent.prototype, "markerCollisionAvoidance", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredCategorySeriesComponent.prototype, "consolidatedItemHitTestBehavior", null);
//# sourceMappingURL=igx-anchored-category-series-component.js.map