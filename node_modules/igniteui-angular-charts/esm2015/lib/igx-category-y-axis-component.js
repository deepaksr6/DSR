var IgxCategoryYAxisComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { CategoryYAxis } from "./CategoryYAxis";
import { toPoint, fromRect } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent category Y axis.
*/
export const IgxCategoryYAxisComponent_PROVIDERS = [{ provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryYAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxCategoryYAxisComponent) }];
let IgxCategoryYAxisComponent = IgxCategoryYAxisComponent_1 = class IgxCategoryYAxisComponent extends IgxCategoryAxisBaseComponent {
    constructor() {
        super();
        this._actualIntervalChange = null;
        this._actualMinorIntervalChange = null;
    }
    createImplementation() {
        return new CategoryYAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets if the current axis is a vertical axis.
    */
    get isVertical() {
        return this.i.ch;
    }
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    */
    get interval() {
        return this.i.la;
    }
    set interval(v) {
        this.i.la = +v;
    }
    /**
     * Gets the effective value for the current Interval.
    */
    get actualInterval() {
        return this.i.k6;
    }
    set actualInterval(v) {
        this.i.k6 = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval() {
        return this.i.lb;
    }
    set minorInterval(v) {
        this.i.lb = +v;
    }
    /**
     * Gets the effective value for the current MinorInterval.
    */
    get actualMinorInterval() {
        return this.i.k8;
    }
    set actualMinorInterval(v) {
        this.i.k8 = +v;
    }
    getCategoryBoundingBox(point, useInterpolation, singularWidth) {
        let iv = this.i.k1(toPoint(point), useInterpolation, singularWidth);
        return fromRect(iv);
    }
    scrollRangeIntoView(minimum, maximum) {
        this.i.ll(minimum, maximum);
    }
    /**
     * Scrolls the specified item into view.
    
    * @param item  * Data item to scroll into view
    */
    scrollIntoView(item) {
        this.i.lk(item);
    }
    get actualIntervalChange() {
        if (this._actualIntervalChange == null) {
            this._actualIntervalChange = new EventEmitter();
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, (o, e) => {
                let iv = e;
                let ext = this.actualInterval;
                if (this.beforeActualIntervalChange) {
                    this.beforeActualIntervalChange(this, ext);
                }
                this._actualIntervalChange.emit(ext);
            });
        }
        return this._actualIntervalChange;
    }
    get actualMinorIntervalChange() {
        if (this._actualMinorIntervalChange == null) {
            this._actualMinorIntervalChange = new EventEmitter();
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, (o, e) => {
                let iv = e;
                let ext = this.actualMinorInterval;
                if (this.beforeActualMinorIntervalChange) {
                    this.beforeActualMinorIntervalChange(this, ext);
                }
                this._actualMinorIntervalChange.emit(ext);
            });
        }
        return this._actualMinorIntervalChange;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryYAxisComponent.prototype, "interval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryYAxisComponent.prototype, "actualInterval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryYAxisComponent.prototype, "minorInterval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryYAxisComponent.prototype, "actualMinorInterval", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryYAxisComponent.prototype, "actualIntervalChange", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryYAxisComponent.prototype, "actualMinorIntervalChange", null);
IgxCategoryYAxisComponent = IgxCategoryYAxisComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-category-y-axis',
        template: ``,
        providers: [{ provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryYAxisComponent_1) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxCategoryYAxisComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryYAxisComponent);
export { IgxCategoryYAxisComponent };
//# sourceMappingURL=igx-category-y-axis-component.js.map