var IgxNumericRadiusAxisComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
/**
 * Represents a IgxDataChartComponent radius axis for polar and radial series.
*
* ```html
* <igx-data-chart
*     [dataSource]="dataSource"   >
*     <igx-category-angle-axis name="angleAxis" label="Department" />
*     <igx-numeric-radius-axis name="radiusAxis" />
*  </igx-data-chart>
* ```
*
* ```ts
* this.series1.angleAxisName = "AngleAxis";
* this.series1.valueAxisName = "numericYAxis";
* ```
*/
export const IgxNumericRadiusAxisComponent_PROVIDERS = [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent) }];
let IgxNumericRadiusAxisComponent = IgxNumericRadiusAxisComponent_1 = class IgxNumericRadiusAxisComponent extends IgxNumericAxisBaseComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new NumericRadiusAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Checks if the axis is of radial axis type
    *
    * ```ts
    * let isRadial: boolean = this.series.isRadial;
    * ```
    */
    get isRadial() {
        return this.i.ce;
    }
    /**
     * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
     * a value between 0.0 and 1.0.
    */
    get radiusExtentScale() {
        return this.i.l0;
    }
    set radiusExtentScale(v) {
        this.i.l0 = +v;
    }
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
    */
    get innerRadiusExtentScale() {
        return this.i.lz;
    }
    set innerRadiusExtentScale(v) {
        this.i.lz = +v;
    }
    /**
     * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.
    
    * @param unscaledValue  * The raw axis value.
    */
    getScaledValue(unscaledValue) {
        let iv = this.i.lw(unscaledValue);
        return (iv);
    }
    /**
     * Returns a raw axis value from the world coordinates radius length provided.
    
    * @param scaledValue  * The scaled world coordinates radius length.
    *
    * Class containing several properties which are used as parameters passed to scaling operations in a `IgxSeriesViewerComponent`.
    */
    getUnscaledValue(scaledValue) {
        let iv = this.i.ly(scaledValue);
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxNumericRadiusAxisComponent.prototype, "radiusExtentScale", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxNumericRadiusAxisComponent.prototype, "innerRadiusExtentScale", null);
IgxNumericRadiusAxisComponent = IgxNumericRadiusAxisComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-numeric-radius-axis',
        template: ``,
        providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent_1) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxNumericRadiusAxisComponent);
export { IgxNumericRadiusAxisComponent };
//# sourceMappingURL=igx-numeric-radius-axis-component.js.map