/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { TemplateRef, Injector, ComponentFactoryResolver, Component, Renderer2, ViewChild, Input, NgZone, ChangeDetectionStrategy, ViewContainerRef } from '@angular/core';
import { AngularRenderer, AngularWrapper } from "igniteui-angular-core";
import { Visibility, Visibility_$type } from "igniteui-angular-core";
import { TypeRegistrar } from "igniteui-angular-core";
import { XamSparkline } from './XamSparkline';
import { brushToString, stringToBrush, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss, NamePatcher, arrayFindByName } from "igniteui-angular-core";
import { IgxDataContext } from "igniteui-angular-core";
import { SparklineStylingDefaults } from './SparklineStylingDefaults';
import { TrendLineType, TrendLineType_$type } from "igniteui-angular-core";
import { SparklineDisplayType, SparklineDisplayType_$type } from './SparklineDisplayType';
import { UnknownValuePlotting, UnknownValuePlotting_$type } from "igniteui-angular-core";
export const IgxSparklineComponent_PROVIDERS = [];
/**
 * Represents a sparkline chart.
*/
let IgxSparklineComponent = class IgxSparklineComponent {
    constructor(_renderer, _elRef, _ngZone, _componentFactoryResolver, _injector) {
        //super();
        this._renderer = _renderer;
        this._elRef = _elRef;
        this._ngZone = _ngZone;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
        this._dataSource = null;
        this._root = null;
        this._zoneRunner = null;
        this._tooltipTemplate = null;
        this._tooltipContent = null;
        this._defaultTooltips = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._zoneRunner = (act) => this._ngZone.run(act);
        this._implementation = this.createImplementation();
        this._container = _renderer.createElement("div");
        _renderer.appendChild(_elRef.element.nativeElement, this._container);
        _renderer.setStyle(this._container, "display", "block");
        _renderer.setStyle(this._container, "width", "100%");
        _renderer.setStyle(this._container, "height", "100%");
        var root;
        root = this._container;
        if (this._container.nativeElement != null) {
            root = this._container.nativeElement;
        }
        this._root = root;
        var ren = new AngularRenderer(root, this._renderer, window.document, this._ngZone, true, SparklineStylingDefaults);
        this._wrapper = ren;
        var sparkline = this.i;
        this._sparkline = sparkline;
        sparkline.provideContainer(ren);
        ren.addSizeWatcher(() => {
            this._sparkline.notifyResized();
        });
    }
    set height(value) {
        this._height = value;
        this._renderer.setStyle(this._elRef.element.nativeElement, "height", value);
        this._sparkline.notifyResized();
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        this._renderer.setStyle(this._elRef.element.nativeElement, "width", value);
        this._sparkline.notifyResized();
    }
    get width() {
        return this._width;
    }
    set dataSource(value) {
        this._dataSource = value;
        this.i.itemsSource = this._dataSource;
        //console.log("setting axis data source: " + value)
    }
    get dataSource() {
        if (this._dataSource != null) {
            return this._dataSource;
        }
        return this.i.itemsSource;
    }
    ngOnDestroy() {
        this._sparkline.destroy();
        this._wrapper.destroy();
    }
    createImplementation() {
        return new XamSparkline();
    }
    ngAfterContentInit() {
        this._styling(this._root, this);
        this.i.notifyResized();
    }
    _runInZone(act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    }
    set tooltipTemplate(value) {
        this._tooltipTemplate = value;
        if (value == null) {
            if (this._tooltipContent !== null) {
                this._tooltipContent.destroy();
                this._tooltipContent = null;
            }
        }
        if (this._tooltipContent != null) {
            this._tooltipContent.instance.template = this._tooltipTemplate;
        }
        else {
            this._ensureTooltipCreated();
        }
    }
    get tooltipTemplate() {
        return this._tooltipTemplate;
    }
    _ensureTooltipCreated() {
        if (this.i.toolTip == null) {
            let tooltip = this.createTooltip();
            if (tooltip == null) {
                return;
            }
            this._tooltipContent = tooltip;
            tooltip.instance.template = this._tooltipTemplate;
            this.i.toolTip = this.createWrapper(tooltip.location.nativeElement);
        }
    }
    createWrapper(ele) {
        let wrapper = new AngularWrapper(ele, this._renderer, this._ngZone);
        wrapper.updateToolTip = ele.updateToolTip;
        wrapper.hideToolTip = ele.hideToolTip;
        return wrapper;
    }
    _ensureDefaultTooltip() {
        if (this._defaultTooltips == null) {
            return;
        }
        this._defaultTooltips.instance["ensureDefaultTooltip"](this);
    }
    _onDefaultTooltipsReady(cr) {
        this._ensureDefaultTooltip();
    }
    createTooltip() {
        if (!TypeRegistrar.isRegistered("IgxTooltipContainerComponent")) {
            return null;
        }
        let t = TypeRegistrar.get("IgxTooltipContainerComponent");
        let cf = this._componentFactoryResolver.resolveComponentFactory(t);
        let cr = this._dynamicContent.createComponent(cf);
        let ele = cr.location.nativeElement;
        let self = this;
        ele.updateToolTip = function (c) {
            if (c.externalObject) {
                c = c.externalObject;
            }
            else {
                let ext = new IgxDataContext();
                ext._implementation = c;
                c = ext;
            }
            if (ele.parentElement != self._container) {
                if (ele.parentElement != null) {
                    ele.parentElement.removeChild(ele);
                }
                self._container.appendChild(ele);
            }
            cr.instance.context = c;
            ele.style.display = "block";
            return true;
        };
        ele.hideToolTip = function () {
            ele.style.display = "none";
        };
        ele.style.display = "none";
        return cr;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    /**
 * Gets or sets the sparkline brush.
*/
    get brush() {
        return brushToString(this.i.e8);
    }
    set brush(v) {
        this.i.e8 = stringToBrush(v);
    }
    /**
     * Gets or sets the negative brush of the sparkline.
    */
    get negativeBrush() {
        return brushToString(this.i.ff);
    }
    set negativeBrush(v) {
        this.i.ff = stringToBrush(v);
    }
    /**
     * Gets or sets the marker brush of the sparkline.
    */
    get markerBrush() {
        return brushToString(this.i.fe);
    }
    set markerBrush(v) {
        this.i.fe = stringToBrush(v);
    }
    /**
     * Gets or sets the negative marker brush of the sparkline.
    */
    get negativeMarkerBrush() {
        return brushToString(this.i.fg);
    }
    set negativeMarkerBrush(v) {
        this.i.fg = stringToBrush(v);
    }
    /**
     * Gets or sets the first marker brush of the sparkline.
    */
    get firstMarkerBrush() {
        return brushToString(this.i.e9);
    }
    set firstMarkerBrush(v) {
        this.i.e9 = stringToBrush(v);
    }
    /**
     * Gets or sets the last marker brush of the sparkline.
    */
    get lastMarkerBrush() {
        return brushToString(this.i.fc);
    }
    set lastMarkerBrush(v) {
        this.i.fc = stringToBrush(v);
    }
    /**
     * Gets or sets the high marker brush of the sparkline.
    */
    get highMarkerBrush() {
        return brushToString(this.i.fa);
    }
    set highMarkerBrush(v) {
        this.i.fa = stringToBrush(v);
    }
    /**
     * Gets or sets the low marker brush of the sparkline.
    */
    get lowMarkerBrush() {
        return brushToString(this.i.fd);
    }
    set lowMarkerBrush(v) {
        this.i.fd = stringToBrush(v);
    }
    /**
     * Gets or sets the trendline brush of the sparkline.
    */
    get trendLineBrush() {
        return brushToString(this.i.fi);
    }
    set trendLineBrush(v) {
        this.i.fi = stringToBrush(v);
    }
    /**
     * Gets or sets the horizontal axis line brush of the sparkline.
    */
    get horizontalAxisBrush() {
        return brushToString(this.i.fb);
    }
    set horizontalAxisBrush(v) {
        this.i.fb = stringToBrush(v);
    }
    /**
     * Gets or sets the vertical axis line brush of the sparkline.
    */
    get verticalAxisBrush() {
        return brushToString(this.i.fj);
    }
    set verticalAxisBrush(v) {
        this.i.fj = stringToBrush(v);
    }
    /**
     * Gets or sets the normal range brush of the sparkline.
    */
    get normalRangeFill() {
        return brushToString(this.i.fh);
    }
    set normalRangeFill(v) {
        this.i.fh = stringToBrush(v);
    }
    /**
     * Gets or sets the display state of the horizontal axis.
    */
    get horizontalAxisVisibility() {
        return this.i.fm;
    }
    set horizontalAxisVisibility(v) {
        this.i.fm = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the display state of the vertical axis.
    */
    get verticalAxisVisibility() {
        return this.i.ft;
    }
    set verticalAxisVisibility(v) {
        this.i.ft = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the marker visibility of the sparkline.
    */
    get markerVisibility() {
        return this.i.fp;
    }
    set markerVisibility(v) {
        this.i.fp = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the negative marker visibility of the sparkline.
    */
    get negativeMarkerVisibility() {
        return this.i.fq;
    }
    set negativeMarkerVisibility(v) {
        this.i.fq = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the first marker visibility of the sparkline.
    */
    get firstMarkerVisibility() {
        return this.i.fk;
    }
    set firstMarkerVisibility(v) {
        this.i.fk = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the last marker visibility of the sparkline.
    */
    get lastMarkerVisibility() {
        return this.i.fn;
    }
    set lastMarkerVisibility(v) {
        this.i.fn = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the low marker visibility of the sparkline.
    */
    get lowMarkerVisibility() {
        return this.i.fo;
    }
    set lowMarkerVisibility(v) {
        this.i.fo = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the high marker visibility of the sparkline.
    */
    get highMarkerVisibility() {
        return this.i.fl;
    }
    set highMarkerVisibility(v) {
        this.i.fl = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the normal range visibility of the sparkline.
    */
    get normalRangeVisibility() {
        return this.i.fr;
    }
    set normalRangeVisibility(v) {
        this.i.fr = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the position of the normal range on the sparkline.
    */
    get displayNormalRangeInFront() {
        return this.i.aw;
    }
    set displayNormalRangeInFront(v) {
        this.i.aw = ensureBool(v);
    }
    /**
     * Gets or sets the marker size of the sparkline.
    */
    get markerSize() {
        return this.i.bd;
    }
    set markerSize(v) {
        this.i.bd = +v;
    }
    /**
     * Gets or sets the first marker size of the sparkline.
    */
    get firstMarkerSize() {
        return this.i.a6;
    }
    set firstMarkerSize(v) {
        this.i.a6 = +v;
    }
    /**
     * Gets or sets the last marker size of the sparkline.
    */
    get lastMarkerSize() {
        return this.i.a8;
    }
    set lastMarkerSize(v) {
        this.i.a8 = +v;
    }
    /**
     * Gets or sets the high marker size of the sparkline.
    */
    get highMarkerSize() {
        return this.i.a7;
    }
    set highMarkerSize(v) {
        this.i.a7 = +v;
    }
    /**
     * Gets or sets the low marker size of the sparkline.
    */
    get lowMarkerSize() {
        return this.i.bc;
    }
    set lowMarkerSize(v) {
        this.i.bc = +v;
    }
    /**
     * Gets or sets the negative marker size of the sparkline.
    */
    get negativeMarkerSize() {
        return this.i.bi;
    }
    set negativeMarkerSize(v) {
        this.i.bi = +v;
    }
    /**
     * Gets or sets the line thickness of the sparkline.
    */
    get lineThickness() {
        return this.i.a9;
    }
    set lineThickness(v) {
        this.i.a9 = +v;
    }
    /**
     * Gets or sets the minimum value of the y axis.
    */
    get minimum() {
        return this.i.bh;
    }
    set minimum(v) {
        this.i.bh = +v;
    }
    /**
     * Gets or sets the maximum value of the y axis.
    */
    get maximum() {
        return this.i.bg;
    }
    set maximum(v) {
        this.i.bg = +v;
    }
    /**
     * Gets or sets the string path to the value column.
    */
    get valueMemberPath() {
        return this.i.c9;
    }
    set valueMemberPath(v) {
        this.i.c9 = v;
    }
    /**
     * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
    */
    get labelMemberPath() {
        return this.i.ce;
    }
    set labelMemberPath(v) {
        this.i.ce = v;
    }
    /**
     * Gets or sets the type of trendline used by the sparkline.
    */
    get trendLineType() {
        return this.i.ap;
    }
    set trendLineType(v) {
        this.i.ap = ensureEnum(TrendLineType_$type, v);
    }
    /**
     * Gets or sets the trendline period used by the sparkline.
    */
    get trendLinePeriod() {
        return this.i.bq;
    }
    set trendLinePeriod(v) {
        this.i.bq = +v;
    }
    /**
     * Gets or sets the thickness of the sparkline's trendline.
    */
    get trendLineThickness() {
        return this.i.bm;
    }
    set trendLineThickness(v) {
        this.i.bm = +v;
    }
    /**
     * Gets or sets the minimum value of the normal range.
    */
    get normalRangeMinimum() {
        return this.i.bk;
    }
    set normalRangeMinimum(v) {
        this.i.bk = +v;
    }
    /**
     * Gets or sets the maximum value of the normal range.
    */
    get normalRangeMaximum() {
        return this.i.bj;
    }
    set normalRangeMaximum(v) {
        this.i.bj = +v;
    }
    /**
     * Gets or sets the display type of the sparkline.
    */
    get displayType() {
        return this.i.ao;
    }
    set displayType(v) {
        this.i.ao = ensureEnum(SparklineDisplayType_$type, v);
    }
    /**
     * Gets or sets the way null values are interpreted.
    */
    get unknownValuePlotting() {
        return this.i.aq;
    }
    set unknownValuePlotting(v) {
        this.i.aq = ensureEnum(UnknownValuePlotting_$type, v);
    }
    /**
     * The value or content to display on the vertical axis.
     * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
    */
    get verticalAxisLabel() {
        return this.i.bt;
    }
    set verticalAxisLabel(v) {
        this.i.bt = v;
    }
    /**
     * The value or content to display on the horizontal axis.
     * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
    */
    get horizontalAxisLabel() {
        return this.i.br;
    }
    set horizontalAxisLabel(v) {
        this.i.br = v;
    }
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
    */
    get formatLabel() {
        return this.i.bp;
    }
    set formatLabel(v) {
        this.i.bp = v;
    }
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    get horizontalLabelFormat() {
        return this.i.ca;
    }
    set horizontalLabelFormat(v) {
        this.i.ca = v;
    }
    /**
     * Gets or sets the format specifiers to use with the HorizontalLabelFormat string.
    */
    get horizontalLabelFormatSpecifiers() {
        return this.i.ag;
    }
    set horizontalLabelFormatSpecifiers(v) {
        this.i.ag = v;
    }
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    get verticalLabelFormat() {
        return this.i.df;
    }
    set verticalLabelFormat(v) {
        this.i.df = v;
    }
    /**
     * Gets or sets the format specifiers to use with the VerticalLabelFormat string.
    */
    get verticalLabelFormatSpecifiers() {
        return this.i.ah;
    }
    set verticalLabelFormatSpecifiers(v) {
        this.i.ah = v;
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.bl;
    }
    set pixelScalingRatio(v) {
        this.i.bl = +v;
    }
    /**
     * Gets the actual scaling value used by the component to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get actualPixelScalingRatio() {
        return this.i.a5;
    }
    set actualPixelScalingRatio(v) {
        this.i.a5 = +v;
    }
    findByName(name) {
        if (this.horizontalLabelFormatSpecifiers != null && arrayFindByName(this.horizontalLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.horizontalLabelFormatSpecifiers, name);
        }
        if (this.verticalLabelFormatSpecifiers != null && arrayFindByName(this.verticalLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.verticalLabelFormatSpecifiers, name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("SparklineComponent");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Provides a container to the sparkline control.

* @param container  * The container.
*/
    provideContainer(container) {
        this.i.provideContainer(container);
    }
    /**
     * Notify that the control has resized.
    
    */
    notifyResized() {
        this.i.notifyResized();
    }
    notifySetItem(source_, index, oldItem, newItem) {
        this.i.dn(source_, index, oldItem, newItem);
    }
    /**
     * Used to manually notify the IgxSparklineComponent that the data source has reset or cleared its items.  Invoking this method is only necessary if that datasource is not observable.
    
    * @param source_  * The data source which was cleared or reset.
    */
    notifyClearItems(source_) {
        this.i.dj(source_);
    }
    notifyInsertItem(source_, index, newItem) {
        this.i.dk(source_, index, newItem);
    }
    notifyRemoveItem(source_, index, oldItem) {
        this.i.dl(source_, index, oldItem);
    }
    /**
     * Returns the sparkline visuals expressed as a SparklineVisualData object.
    
    */
    exportVisualData() {
        let iv = this.i.as();
        return (iv);
    }
    /**
     * Returns visuals as a serialized string.
    
    */
    exportSerializedVisualData() {
        let iv = this.i.by();
        return (iv);
    }
};
tslib_1.__decorate([
    ViewChild("dynamicContent", { read: ViewContainerRef, static: true }),
    tslib_1.__metadata("design:type", ViewContainerRef)
], IgxSparklineComponent.prototype, "_dynamicContent", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "height", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "width", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxSparklineComponent.prototype, "dataSource", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxSparklineComponent.prototype, "tooltipTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "brush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "negativeBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "markerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "negativeMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "firstMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "lastMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "highMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "lowMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "trendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "horizontalAxisBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "verticalAxisBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "normalRangeFill", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "horizontalAxisVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "verticalAxisVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "markerVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "negativeMarkerVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "firstMarkerVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "lastMarkerVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "lowMarkerVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "highMarkerVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "normalRangeVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxSparklineComponent.prototype, "displayNormalRangeInFront", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "markerSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "firstMarkerSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "lastMarkerSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "highMarkerSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "lowMarkerSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "negativeMarkerSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "lineThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "minimum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "maximum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "valueMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "labelMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "trendLineType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "trendLinePeriod", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "trendLineThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "normalRangeMinimum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "normalRangeMaximum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "displayType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "unknownValuePlotting", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxSparklineComponent.prototype, "verticalAxisLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxSparklineComponent.prototype, "horizontalAxisLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Function])
], IgxSparklineComponent.prototype, "formatLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "horizontalLabelFormat", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], IgxSparklineComponent.prototype, "horizontalLabelFormatSpecifiers", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxSparklineComponent.prototype, "verticalLabelFormat", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], IgxSparklineComponent.prototype, "verticalLabelFormatSpecifiers", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "pixelScalingRatio", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxSparklineComponent.prototype, "actualPixelScalingRatio", null);
IgxSparklineComponent = tslib_1.__decorate([
    Component({
        selector: 'igx-sparkline',
        template: `<ng-container #dynamicContent></ng-container>`,
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: IgxSparklineComponent_PROVIDERS,
        host: { 'class': 'ig-sparkline igx-sparkline' },
        styles: [`
		:host {
			display: block;
		}
	`]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ViewContainerRef,
        NgZone,
        ComponentFactoryResolver,
        Injector])
], IgxSparklineComponent);
export { IgxSparklineComponent };
//# sourceMappingURL=igx-sparkline-component.js.map