import * as tslib_1 from "tslib";
import { forwardRef, Input } from '@angular/core';
import { TrendLineType, TrendLineType_$type } from "igniteui-angular-core";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ensureEnum, brushToString, stringToBrush, toPoint, fromPoint } from "igniteui-angular-core";
/**
 * Represents the base class for all IgxDataChartComponent anchored radial category series.
*/
export const IgxAnchoredRadialSeriesComponent_PROVIDERS = [{ provide: IgxRadialBaseComponent, useExisting: forwardRef(() => IgxAnchoredRadialSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxAnchoredRadialSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxAnchoredRadialSeriesComponent) }];
export class IgxAnchoredRadialSeriesComponent extends IgxRadialBaseComponent {
    constructor() {
        super();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the item path that provides the values for the current series.
    */
    get valueMemberPath() {
        return this.i.oc;
    }
    set valueMemberPath(v) {
        this.i.oc = v;
    }
    /**
     * Gets or sets the trend type for the current series object.
    */
    get trendLineType() {
        return this.i.ny;
    }
    set trendLineType(v) {
        this.i.ny = ensureEnum(TrendLineType_$type, v);
    }
    /**
     * Gets or sets the brush that specifies how to the current series
     * object's Trend line is drawn.
    */
    get trendLineBrush() {
        return brushToString(this.i.oq);
    }
    set trendLineBrush(v) {
        this.i.oq = stringToBrush(v);
    }
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    get actualTrendLineBrush() {
        return brushToString(this.i.op);
    }
    set actualTrendLineBrush(v) {
        this.i.op = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    get trendLineThickness() {
        return this.i.n8;
    }
    set trendLineThickness(v) {
        this.i.n8 = +v;
    }
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for bollinger band periods is 20.
    */
    get trendLinePeriod() {
        return this.i.n9;
    }
    set trendLinePeriod(v) {
        this.i.n9 = +v;
    }
    /**
     * Sets or Gets the Z index of the trendline.
    */
    get trendLineZIndex() {
        return this.i.oa;
    }
    set trendLineZIndex(v) {
        this.i.oa = +v;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    getPreviousOrExactIndex(world, skipUnknowns) {
        let iv = this.i.fe(toPoint(world), skipUnknowns);
        return (iv);
    }
    getNextOrExactIndex(world, skipUnknowns) {
        let iv = this.i.fc(toPoint(world), skipUnknowns);
        return (iv);
    }
    getSeriesValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.lm(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue() {
        let iv = this.i.getOffsetValue();
        return (iv);
    }
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth() {
        let iv = this.i.getCategoryWidth();
        return (iv);
    }
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxAnchoredRadialSeriesComponent.prototype, "valueMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredRadialSeriesComponent.prototype, "trendLineType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxAnchoredRadialSeriesComponent.prototype, "trendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxAnchoredRadialSeriesComponent.prototype, "actualTrendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredRadialSeriesComponent.prototype, "trendLineThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredRadialSeriesComponent.prototype, "trendLinePeriod", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxAnchoredRadialSeriesComponent.prototype, "trendLineZIndex", null);
//# sourceMappingURL=igx-anchored-radial-series-component.js.map