var IgxStackedBarSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxVerticalStackedSeriesBaseComponent } from "./igx-vertical-stacked-series-base-component";
import { IgxStackedSeriesBaseComponent } from "./igx-stacked-series-base-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { StackedBarSeries } from "./StackedBarSeries";
import { toPoint } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent stacked bar series.
*/
export const IgxStackedBarSeriesComponent_PROVIDERS = [{ provide: IgxVerticalStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent) }];
let IgxStackedBarSeriesComponent = IgxStackedBarSeriesComponent_1 = class IgxStackedBarSeriesComponent extends IgxVerticalStackedSeriesBaseComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new StackedBarSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
    */
    get radiusX() {
        return this.i.p7;
    }
    set radiusX(v) {
        this.i.p7 = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
    */
    get radiusY() {
        return this.i.p8;
    }
    set radiusY(v) {
        this.i.p8 = +v;
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world) {
        let iv = this.i.e8(toPoint(world));
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan() {
        let iv = this.i.eg();
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedBarSeriesComponent.prototype, "radiusX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedBarSeriesComponent.prototype, "radiusY", null);
IgxStackedBarSeriesComponent = IgxStackedBarSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-stacked-bar-series',
        template: ``,
        providers: [{ provide: IgxVerticalStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent_1) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent_1) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent_1) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxStackedBarSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxStackedBarSeriesComponent);
export { IgxStackedBarSeriesComponent };
//# sourceMappingURL=igx-stacked-bar-series-component.js.map