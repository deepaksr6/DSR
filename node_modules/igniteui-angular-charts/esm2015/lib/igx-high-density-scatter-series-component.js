var IgxHighDensityScatterSeriesComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxProgressiveLoadStatusEventArgs } from "./igx-progressive-load-status-event-args";
import { IgxSeriesComponent } from "./igx-series-component";
import { HighDensityScatterSeries } from "./HighDensityScatterSeries";
import { ensureBool, colorToString, stringToColor, toPoint } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent series where a high volume of scatter points can be displayed.
*/
export const IgxHighDensityScatterSeriesComponent_PROVIDERS = [{ provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxHighDensityScatterSeriesComponent) }];
let IgxHighDensityScatterSeriesComponent = IgxHighDensityScatterSeriesComponent_1 = class IgxHighDensityScatterSeriesComponent extends IgxSeriesComponent {
    constructor() {
        super();
        this._progressiveLoadStatusChanged = null;
    }
    createImplementation() {
        return new HighDensityScatterSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Checks if this series is a scatter series
    */
    get isScatter() {
        return this.i.c4;
    }
    /**
     * Gets or sets the effective x-axis for the current object.
    */
    get xAxis() {
        if (this.i.l8 == null) {
            return null;
        }
        if (!this.i.l8.externalObject) {
            let e = IgxNumericXAxisComponent._createFromInternal(this.i.l8);
            if (e) {
                e._implementation = this.i.l8;
            }
            this.i.l8.externalObject = e;
        }
        return this.i.l8.externalObject;
    }
    set xAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.l8 = null : this.i.l8 = v.i;
    }
    /**
     * Gets or sets the effective y-axis for the current object.
    */
    get yAxis() {
        if (this.i.ma == null) {
            return null;
        }
        if (!this.i.ma.externalObject) {
            let e = IgxNumericYAxisComponent._createFromInternal(this.i.ma);
            if (e) {
                e._implementation = this.i.ma;
            }
            this.i.ma.externalObject = e;
        }
        return this.i.ma.externalObject;
    }
    set yAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.ma = null : this.i.ma = v.i;
    }
    /**
     * Gets or sets the x value mapping property for the current series object.
    */
    get xMemberPath() {
        return this.i.n4;
    }
    set xMemberPath(v) {
        this.i.n4 = v;
    }
    /**
     * Gets or sets the y value mapping property for the current series object.
    */
    get yMemberPath() {
        return this.i.n8;
    }
    set yMemberPath(v) {
        this.i.n8 = v;
    }
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    get useBruteForce() {
        return this.i.mo;
    }
    set useBruteForce(v) {
        this.i.mo = ensureBool(v);
    }
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    get progressiveLoad() {
        return this.i.mn;
    }
    set progressiveLoad(v) {
        this.i.mn = ensureBool(v);
    }
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    get heatMinimum() {
        return this.i.ng;
    }
    set heatMinimum(v) {
        this.i.ng = +v;
    }
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    get heatMaximum() {
        return this.i.nf;
    }
    set heatMaximum(v) {
        this.i.nf = +v;
    }
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    get heatMinimumColor() {
        return colorToString(this.i.o1);
    }
    set heatMinimumColor(v) {
        this.i.o1 = stringToColor(v);
    }
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    get heatMaximumColor() {
        return colorToString(this.i.o0);
    }
    set heatMaximumColor(v) {
        this.i.o0 = stringToColor(v);
    }
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    get pointExtent() {
        return this.i.ns;
    }
    set pointExtent(v) {
        this.i.ns = +v;
    }
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    get progressiveStatus() {
        return this.i.nt;
    }
    set progressiveStatus(v) {
        this.i.nt = +v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {
            return this.xAxis;
        }
        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {
            return this.yAxis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis) {
        let iv = this.i.mm(axis);
        return (iv);
    }
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis) {
        let iv = this.i.ml(axis);
        return (iv);
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    get progressiveLoadStatusChanged() {
        if (this._progressiveLoadStatusChanged == null) {
            this._progressiveLoadStatusChanged = new EventEmitter();
            this.i.progressiveLoadStatusChanged = delegateCombine(this.i.progressiveLoadStatusChanged, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxProgressiveLoadStatusEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeProgressiveLoadStatusChanged) {
                        this.beforeProgressiveLoadStatusChanged(this, outerArgs);
                    }
                    this._progressiveLoadStatusChanged.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._progressiveLoadStatusChanged;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxNumericXAxisComponent),
    tslib_1.__metadata("design:paramtypes", [IgxNumericXAxisComponent])
], IgxHighDensityScatterSeriesComponent.prototype, "xAxis", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxNumericYAxisComponent),
    tslib_1.__metadata("design:paramtypes", [IgxNumericYAxisComponent])
], IgxHighDensityScatterSeriesComponent.prototype, "yAxis", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxHighDensityScatterSeriesComponent.prototype, "xMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxHighDensityScatterSeriesComponent.prototype, "yMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxHighDensityScatterSeriesComponent.prototype, "useBruteForce", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxHighDensityScatterSeriesComponent.prototype, "progressiveLoad", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxHighDensityScatterSeriesComponent.prototype, "heatMinimum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxHighDensityScatterSeriesComponent.prototype, "heatMaximum", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxHighDensityScatterSeriesComponent.prototype, "heatMinimumColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxHighDensityScatterSeriesComponent.prototype, "heatMaximumColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxHighDensityScatterSeriesComponent.prototype, "pointExtent", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxHighDensityScatterSeriesComponent.prototype, "progressiveStatus", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxHighDensityScatterSeriesComponent.prototype, "progressiveLoadStatusChanged", null);
IgxHighDensityScatterSeriesComponent = IgxHighDensityScatterSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-high-density-scatter-series',
        template: ``,
        providers: [{ provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxHighDensityScatterSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxHighDensityScatterSeriesComponent);
export { IgxHighDensityScatterSeriesComponent };
//# sourceMappingURL=igx-high-density-scatter-series-component.js.map