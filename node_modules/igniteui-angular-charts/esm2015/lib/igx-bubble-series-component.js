var IgxBubbleSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxSizeScaleComponent } from "./igx-size-scale-component";
import { IgxBrushScaleComponent } from "./igx-brush-scale-component";
import { IgxScatterBaseComponent } from "./igx-scatter-base-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { BubbleSeries } from "./BubbleSeries";
import { ensureBool } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent bubble series.
*/
export const IgxBubbleSeriesComponent_PROVIDERS = [{ provide: IgxScatterBaseComponent, useExisting: forwardRef(() => IgxBubbleSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxBubbleSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxBubbleSeriesComponent) }];
let IgxBubbleSeriesComponent = IgxBubbleSeriesComponent_1 = class IgxBubbleSeriesComponent extends IgxScatterBaseComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new BubbleSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the radius mapping property for the current series object.
    */
    get radiusMemberPath() {
        return this.i.px;
    }
    set radiusMemberPath(v) {
        this.i.px = v;
    }
    /**
     * Gets or sets the radius size scale for the bubbles.
    */
    get radiusScale() {
        if (this.i.o5 == null) {
            return null;
        }
        if (!this.i.o5.externalObject) {
            let e = IgxSizeScaleComponent._createFromInternal(this.i.o5);
            if (e) {
                e._implementation = this.i.o5;
            }
            this.i.o5.externalObject = e;
        }
        return this.i.o5.externalObject;
    }
    set radiusScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.o5 = null : this.i.o5 = v.i;
    }
    /**
     * Gets or sets the Label mapping property for the current series object.
    */
    get labelMemberPath() {
        return this.i.pr;
    }
    set labelMemberPath(v) {
        this.i.pr = v;
    }
    /**
     * Gets or sets the fill mapping property for the current series object.
    */
    get fillMemberPath() {
        return this.i.pm;
    }
    set fillMemberPath(v) {
        this.i.pm = v;
    }
    /**
     * Gets or sets the brush scale for the fill brush of markers.
    */
    get fillScale() {
        if (this.i.o1 == null) {
            return null;
        }
        if (!this.i.o1.externalObject) {
            let e = IgxBrushScaleComponent._createFromInternal(this.i.o1);
            if (e) {
                e._implementation = this.i.o1;
            }
            this.i.o1.externalObject = e;
        }
        return this.i.o1.externalObject;
    }
    set fillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.o1 = null : this.i.o1 = v.i;
    }
    /**
     * Gets or sets whether or not the FillScale uses global min/max values of FillMemberPath from multiple series.
     * This setting applies only if multiple series are using the same FillScale.
    */
    get fillScaleUseGlobalValues() {
        return this.i.pd;
    }
    set fillScaleUseGlobalValues(v) {
        this.i.pd = ensureBool(v);
    }
    /**
     * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
     * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
    */
    get markerOutlineUsesFillScale() {
        return this.i.pe;
    }
    set markerOutlineUsesFillScale(v) {
        this.i.pe = ensureBool(v);
    }
    /**
     * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
     * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
    */
    get markerOutlineBrightness() {
        return this.i.pk;
    }
    set markerOutlineBrightness(v) {
        this.i.pk = +v;
    }
    /**
     * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
     * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
    */
    get markerBrushBrightness() {
        return this.i.pj;
    }
    set markerBrushBrightness(v) {
        this.i.pj = +v;
    }
    /**
     * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath from multiple series.
     * This setting applies only if multiple series are using the same RadiusScale.
    */
    get radiusScaleUseGlobalValues() {
        return this.i.pf;
    }
    set radiusScaleUseGlobalValues(v) {
        this.i.pf = ensureBool(v);
    }
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred() {
        return this.i.cy;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxBubbleSeriesComponent.prototype, "radiusMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxSizeScaleComponent),
    tslib_1.__metadata("design:paramtypes", [IgxSizeScaleComponent])
], IgxBubbleSeriesComponent.prototype, "radiusScale", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxBubbleSeriesComponent.prototype, "labelMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxBubbleSeriesComponent.prototype, "fillMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxBrushScaleComponent),
    tslib_1.__metadata("design:paramtypes", [IgxBrushScaleComponent])
], IgxBubbleSeriesComponent.prototype, "fillScale", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxBubbleSeriesComponent.prototype, "fillScaleUseGlobalValues", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxBubbleSeriesComponent.prototype, "markerOutlineUsesFillScale", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxBubbleSeriesComponent.prototype, "markerOutlineBrightness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxBubbleSeriesComponent.prototype, "markerBrushBrightness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxBubbleSeriesComponent.prototype, "radiusScaleUseGlobalValues", null);
IgxBubbleSeriesComponent = IgxBubbleSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-bubble-series',
        template: ``,
        providers: [{ provide: IgxScatterBaseComponent, useExisting: forwardRef(() => IgxBubbleSeriesComponent_1) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxBubbleSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxBubbleSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxBubbleSeriesComponent);
export { IgxBubbleSeriesComponent };
//# sourceMappingURL=igx-bubble-series-component.js.map