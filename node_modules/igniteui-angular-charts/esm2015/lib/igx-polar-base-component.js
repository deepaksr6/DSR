import * as tslib_1 from "tslib";
import { forwardRef, Input } from '@angular/core';
import { IgxNumericAngleAxisComponent } from "./igx-numeric-angle-axis-component";
import { IgxNumericRadiusAxisComponent } from "./igx-numeric-radius-axis-component";
import { TrendLineType, TrendLineType_$type } from "igniteui-angular-core";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ensureBool, ensureEnum, brushToString, stringToBrush, toPoint } from "igniteui-angular-core";
/**
 * Represents the base class from which all IgxDataChartComponent polar series are derived.
*/
export const IgxPolarBaseComponent_PROVIDERS = [{ provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxPolarBaseComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxPolarBaseComponent) }];
export class IgxPolarBaseComponent extends IgxMarkerSeriesComponent {
    constructor() {
        super();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Checks if this series is a polar series
    */
    get isPolar() {
        return this.i.c0;
    }
    /**
     * Gets or sets the path to use to find the angle values for the series.
    */
    get angleMemberPath() {
        return this.i.n0;
    }
    set angleMemberPath(v) {
        this.i.n0 = v;
    }
    /**
     * Gets or sets the path to use to get the radius values for the series.
    */
    get radiusMemberPath() {
        return this.i.n6;
    }
    set radiusMemberPath(v) {
        this.i.n6 = v;
    }
    /**
     * Gets the effective angle axis for the current series object.
    */
    get angleAxis() {
        if (this.i.m7 == null) {
            return null;
        }
        if (!this.i.m7.externalObject) {
            let e = IgxNumericAngleAxisComponent._createFromInternal(this.i.m7);
            if (e) {
                e._implementation = this.i.m7;
            }
            this.i.m7.externalObject = e;
        }
        return this.i.m7.externalObject;
    }
    set angleAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.m7 = null : this.i.m7 = v.i;
    }
    /**
     * Gets the effective radius axis for the current series object.
    */
    get radiusAxis() {
        if (this.i.m8 == null) {
            return null;
        }
        if (!this.i.m8.externalObject) {
            let e = IgxNumericRadiusAxisComponent._createFromInternal(this.i.m8);
            if (e) {
                e._implementation = this.i.m8;
            }
            this.i.m8.externalObject = e;
        }
        return this.i.m8.externalObject;
    }
    set radiusAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.m8 = null : this.i.m8 = v.i;
    }
    /**
     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
     * spiral based interpolation.
    */
    get useCartesianInterpolation() {
        return this.i.ns;
    }
    set useCartesianInterpolation(v) {
        this.i.ns = ensureBool(v);
    }
    /**
     * Gets or sets the maximum number of markers displayed by the current series.
     * If more than the specified number of markers are visible, the polar series will automatically
     * choose a representative set.
    */
    get maximumMarkers() {
        return this.i.nv;
    }
    set maximumMarkers(v) {
        this.i.nv = +v;
    }
    /**
     * Gets or sets the trend type for the current series object.
    */
    get trendLineType() {
        return this.i.nj;
    }
    set trendLineType(v) {
        this.i.nj = ensureEnum(TrendLineType_$type, v);
    }
    /**
     * Gets or sets the brush that specifies how the current series
     * object's trend line is drawn.
    */
    get trendLineBrush() {
        return brushToString(this.i.ow);
    }
    set trendLineBrush(v) {
        this.i.ow = stringToBrush(v);
    }
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    get actualTrendLineBrush() {
        return brushToString(this.i.ov);
    }
    set actualTrendLineBrush(v) {
        this.i.ov = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    get trendLineThickness() {
        return this.i.nu;
    }
    set trendLineThickness(v) {
        this.i.nu = +v;
    }
    /**
     * Gets or sets the moving average period for the current series object.
    */
    get trendLinePeriod() {
        return this.i.nw;
    }
    set trendLinePeriod(v) {
        this.i.nw = +v;
    }
    /**
     * Sets or Gets the Trendline Z index.
    */
    get trendLineZIndex() {
        return this.i.nx;
    }
    set trendLineZIndex(v) {
        this.i.nx = +v;
    }
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this to true can effect performance.
    */
    get clipSeriesToBounds() {
        return this.i.nq;
    }
    set clipSeriesToBounds(v) {
        this.i.nq = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.angleAxis && this.angleAxis.name && this.angleAxis.name == name) {
            return this.angleAxis;
        }
        if (this.radiusAxis && this.radiusAxis.name && this.radiusAxis.name == name) {
            return this.radiusAxis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.angleAxis && this.angleAxis._styling) {
            this.angleAxis._styling(container, component, this);
        }
        if (this.radiusAxis && this.radiusAxis._styling) {
            this.radiusAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Scrolls the requested item into view, if possible.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world) {
        let iv = this.i.e8(toPoint(world));
        return (iv);
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    /**
     * Determine if object can be used as RadiusAxis
    
    * @param axis  * The object to check
    */
    canUseAsRadiusAxis(axis) {
        let iv = this.i.np(axis);
        return (iv);
    }
    /**
     * Determine if object can be used as AngleAxis
    
    * @param axis  * The object to check
    */
    canUseAsAngleAxis(axis) {
        let iv = this.i.no(axis);
        return (iv);
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxPolarBaseComponent.prototype, "angleMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxPolarBaseComponent.prototype, "radiusMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxNumericAngleAxisComponent),
    tslib_1.__metadata("design:paramtypes", [IgxNumericAngleAxisComponent])
], IgxPolarBaseComponent.prototype, "angleAxis", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxNumericRadiusAxisComponent),
    tslib_1.__metadata("design:paramtypes", [IgxNumericRadiusAxisComponent])
], IgxPolarBaseComponent.prototype, "radiusAxis", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxPolarBaseComponent.prototype, "useCartesianInterpolation", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxPolarBaseComponent.prototype, "maximumMarkers", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxPolarBaseComponent.prototype, "trendLineType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxPolarBaseComponent.prototype, "trendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxPolarBaseComponent.prototype, "actualTrendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxPolarBaseComponent.prototype, "trendLineThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxPolarBaseComponent.prototype, "trendLinePeriod", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxPolarBaseComponent.prototype, "trendLineZIndex", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxPolarBaseComponent.prototype, "clipSeriesToBounds", null);
//# sourceMappingURL=igx-polar-base-component.js.map