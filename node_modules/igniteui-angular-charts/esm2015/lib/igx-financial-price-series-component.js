var IgxFinancialPriceSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { TrendLineType, TrendLineType_$type } from "igniteui-angular-core";
import { PriceDisplayType, PriceDisplayType_$type } from "./PriceDisplayType";
import { IgxFinancialSeriesComponent } from "./igx-financial-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { FinancialPriceSeries } from "./FinancialPriceSeries";
import { ensureEnum, brushToString, stringToBrush, toPoint, fromRect } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.
 * Default required members: Open, Low, High, Close
*
* The `IgxFinancialPriceSeriesComponent` class represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.
*
* ```html
*  <igx-data-chart
*     #chart
*         [dataSource]="data" >
*  <igx-ordinal-time-x-axis
*     dateTimeMemberPath="TimeStamp"
*     #xAxis >
*     </igx-ordinal-time-x-axis>
*  <igx-numeric-y-axis
*         minimumValue="0"
*         #yAxis>
* </igx-numeric-y-axis>
* <igx-financial-price-series
*     [xAxis]="xAxis"
*       [yAxis]="yAxis"
*       openMemberPath="open"
*       highMemberPath="high"
*       lowMemberPath="low"
*       closeMemberPath="close"
*       volumeMemberPath="volume"
*       >
* </igx-financial-price-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxFinancialPriceSeriesComponent();
*    series.xAxis = this.xAxis;
*    series.yAxis = this.yAxis;
*    series.openMemberPath = "open";
*    series.highMemberPath = "high";
*    series.lowMemberPath = "low";
*    series.closeMemberPath = "close";
*    series.volumeMemberPath="volume";
*    this.chart.series.add(series);
* ```
*/
export const IgxFinancialPriceSeriesComponent_PROVIDERS = [{ provide: IgxFinancialSeriesComponent, useExisting: forwardRef(() => IgxFinancialPriceSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxFinancialPriceSeriesComponent) }];
let IgxFinancialPriceSeriesComponent = IgxFinancialPriceSeriesComponent_1 = class IgxFinancialPriceSeriesComponent extends IgxFinancialSeriesComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new FinancialPriceSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the trend type for the current financial series.
    *
    * Use the `trendLineType` property for the trend type of the current financial series.
    *
    * ```ts
    * series.trendLineType= "CubicFit";
    * ```
    *
    * ```html
    *  <igx-data-chart
    *     #chart
    *         [dataSource]="data" >
    *  <igx-ordinal-time-x-axis
    *     dateTimeMemberPath="TimeStamp"
    *     #xAxis >
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    * </igx-numeric-y-axis>
    * <igx-financial-price-series
    *     [xAxis]="xAxis"
    *       [yAxis]="yAxis"
    *       openMemberPath="open"
    *       highMemberPath="high"
    *       lowMemberPath="low"
    *       closeMemberPath="close"
    *       volumeMemberPath="volume"
    *       trendLineType="CubicFit">
    * </igx-financial-price-series>
    * </igx-data-chart>
    * ```
    */
    get trendLineType() {
        return this.i.trendLineType;
    }
    set trendLineType(v) {
        this.i.trendLineType = ensureEnum(TrendLineType_$type, v);
    }
    /**
     * Gets or sets the brush to use to draw the trend line.
    *
    * Use the `trendLineBrush` property to brush the the trend line.
    *
    * ```ts
    * series.trendLineBrush="red";
    * ```
    *
    * ```html
    *  <igx-data-chart
    *     #chart
    *         [dataSource]="data" >
    *  <igx-ordinal-time-x-axis
    *     dateTimeMemberPath="TimeStamp"
    *     #xAxis >
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    * </igx-numeric-y-axis>
    * <igx-financial-price-series
    *     [xAxis]="xAxis"
    *       [yAxis]="yAxis"
    *       openMemberPath="open"
    *       highMemberPath="high"
    *       lowMemberPath="low"
    *       closeMemberPath="close"
    *       volumeMemberPath="volume"
    *      trendLineBrush="red" >
    * </igx-financial-price-series>
    * </igx-data-chart>
    * ```
    */
    get trendLineBrush() {
        return brushToString(this.i.trendLineBrush);
    }
    set trendLineBrush(v) {
        this.i.trendLineBrush = stringToBrush(v);
    }
    /**
     * Gets the effective TrendLineBrush for this FinancialPriceSeries.
    *
    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.
    */
    get actualTrendLineBrush() {
        return brushToString(this.i.p4);
    }
    set actualTrendLineBrush(v) {
        this.i.p4 = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.
    *
    * Use the `trendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.
    *
    * ```ts
    * series.trendLineThickness=5;
    * ```
    *
    * ```html
    *  <igx-data-chart
    *     #chart
    *         [dataSource]="data" >
    *  <igx-ordinal-time-x-axis
    *     dateTimeMemberPath="TimeStamp"
    *     #xAxis >
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    * </igx-numeric-y-axis>
    * <igx-financial-price-series
    *     [xAxis]="xAxis"
    *       [yAxis]="yAxis"
    *       openMemberPath="open"
    *       highMemberPath="high"
    *       lowMemberPath="low"
    *       closeMemberPath="close"
    *       volumeMemberPath="volume"
    *       trendLineThickness="3">
    * </igx-financial-price-series>
    * </igx-data-chart>
    * ```
    */
    get trendLineThickness() {
        return this.i.trendLineThickness;
    }
    set trendLineThickness(v) {
        this.i.trendLineThickness = +v;
    }
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for trend line period is 7.
    *
    * Use the `trendLinePeriod` property for the periodo the the current series.
    *
    * ```ts
    * series.trendLinePeriod= 7;
    * ```
    *
    * ```html
    *  <igx-data-chart
    *     #chart
    *         [dataSource]="data" >
    *  <igx-ordinal-time-x-axis
    *     dateTimeMemberPath="TimeStamp"
    *     #xAxis >
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    * </igx-numeric-y-axis>
    * <igx-financial-price-series
    *     [xAxis]="xAxis"
    *       [yAxis]="yAxis"
    *       openMemberPath="open"
    *       highMemberPath="high"
    *       lowMemberPath="low"
    *       closeMemberPath="close"
    *       volumeMemberPath="volume"
    *       trendLinePeriod="7">
    * </igx-financial-price-series>
    * </igx-data-chart>
    * ```
    */
    get trendLinePeriod() {
        return this.i.trendLinePeriod;
    }
    set trendLinePeriod(v) {
        this.i.trendLinePeriod = +v;
    }
    /**
     * Gets or sets the display type for the current FinancialPriceSeries object.
    *
    * Use the `displayType` property for the display type of the current FinancialPriceSeries object.
    *
    * ```html
    *  <igx-data-chart
    *     #chart
    *         [dataSource]="data" >
    *  <igx-ordinal-time-x-axis
    *     dateTimeMemberPath="TimeStamp"
    *     #xAxis >
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    * </igx-numeric-y-axis>
    * <igx-financial-price-series
    *     [xAxis]="xAxis"
    *       [yAxis]="yAxis"
    *       openMemberPath="open"
    *       highMemberPath="high"
    *       lowMemberPath="low"
    *       closeMemberPath="close"
    *       volumeMemberPath="volume"
    *       displayType="Candlestick">
    * </igx-financial-price-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.displayType=PriceDisplayType.Candlestick;
    * ```
    */
    get displayType() {
        return this.i.pl;
    }
    set displayType(v) {
        this.i.pl = ensureEnum(PriceDisplayType_$type, v);
    }
    /**
     * Brush to use for outlining negative elements in the series.
    *
    * Use the `negativeOutline` property to brush the outline negative elements in the series.
    *
    * ```ts
    * series.negativeOutline="red";
    * ```
    *
    * ```html
    *  <igx-data-chart
    *     #chart
    *         [dataSource]="data" >
    *  <igx-ordinal-time-x-axis
    *     dateTimeMemberPath="TimeStamp"
    *     #xAxis >
    *     </igx-ordinal-time-x-axis>
    *  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    * </igx-numeric-y-axis>
    * <igx-financial-price-series
    *     [xAxis]="xAxis"
    *       [yAxis]="yAxis"
    *       openMemberPath="open"
    *       highMemberPath="high"
    *       lowMemberPath="low"
    *       closeMemberPath="close"
    *       volumeMemberPath="volume"
    *       negativeOutline="Red" >
    * </igx-financial-price-series>
    * </igx-data-chart>
    * ```
    */
    get negativeOutline() {
        return brushToString(this.i.p5);
    }
    set negativeOutline(v) {
        this.i.p5 = stringToBrush(v);
    }
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    *
    * The `getSeriesValueBoundingBox` method return the best available value bounding box within the series that has the best value match for the world position provided.
    */
    getSeriesValueBoundingBox(world) {
        let iv = this.i.lv(toPoint(world));
        return fromRect(iv);
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The categorySeries is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `scrollIntoView` methos scrolls the series to display the item for the specified data item.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    *
    * The `getItemSpan` method is used For a category plotted series, returns the current width of the items within the categories.
    *
    * This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned
    */
    getItemSpan() {
        let iv = this.i.eg();
        return (iv);
    }
    setNegativeColors(negativeBrush, negativeOutline) {
        this.i.jj(stringToBrush(negativeBrush), stringToBrush(negativeOutline));
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFinancialPriceSeriesComponent.prototype, "trendLineType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxFinancialPriceSeriesComponent.prototype, "trendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxFinancialPriceSeriesComponent.prototype, "actualTrendLineBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFinancialPriceSeriesComponent.prototype, "trendLineThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFinancialPriceSeriesComponent.prototype, "trendLinePeriod", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFinancialPriceSeriesComponent.prototype, "displayType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxFinancialPriceSeriesComponent.prototype, "negativeOutline", null);
IgxFinancialPriceSeriesComponent = IgxFinancialPriceSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-financial-price-series',
        template: ``,
        providers: [{ provide: IgxFinancialSeriesComponent, useExisting: forwardRef(() => IgxFinancialPriceSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxFinancialPriceSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxFinancialPriceSeriesComponent);
export { IgxFinancialPriceSeriesComponent };
//# sourceMappingURL=igx-financial-price-series-component.js.map