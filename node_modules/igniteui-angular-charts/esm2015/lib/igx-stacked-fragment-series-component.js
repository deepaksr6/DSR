import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { Visibility, Visibility_$type } from "igniteui-angular-core";
import { MarkerType, MarkerType_$type } from "./MarkerType";
import { IgxPropertyUpdatedEventArgs } from "igniteui-angular-core";
import { StackedFragmentSeries } from "./StackedFragmentSeries";
import { TypeRegistrar } from "igniteui-angular-core";
import { NamePatcher, brushToString, stringToBrush, ensureBool, colorToString, stringToColor, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-angular-core";
/**
 * Represents a non-visual child of StackedSeriesBase.
*/
export const IgxStackedFragmentSeriesComponent_PROVIDERS = [];
let IgxStackedFragmentSeriesComponent = class IgxStackedFragmentSeriesComponent {
    constructor() {
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._propertyUpdated = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new StackedFragmentSeries();
    }
    ngOnInit() {
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    /**
     * Gets or sets the brush of the stacked fragment.
    */
    get brush() {
        return brushToString(this.i.fu);
    }
    set brush(v) {
        this.i.fu = stringToBrush(v);
    }
    /**
     * Gets the actual brush used by the series.
    */
    get actualBrush() {
        return brushToString(this.i.fp);
    }
    set actualBrush(v) {
        this.i.fp = stringToBrush(v);
    }
    /**
     * Gets or sets whether drop shadow should be enabled for this series.
    */
    get isDropShadowEnabled() {
        return this.i.w;
    }
    set isDropShadowEnabled(v) {
        this.i.w = ensureBool(v);
    }
    /**
     * Gets whether drop shadow is actually enabled for this series.
    */
    get actualIsDropShadowEnabled() {
        return this.i.s;
    }
    set actualIsDropShadowEnabled(v) {
        this.i.s = ensureBool(v);
    }
    /**
     * Gets or sets the shadow blur.
     * This property is ignored when StackedFragmentSeries.UseSingleShadow is set to true.
    */
    get shadowBlur() {
        return this.i.aq;
    }
    set shadowBlur(v) {
        this.i.aq = +v;
    }
    /**
     * Gets the actual shadow blur used by the series.
    */
    get actualShadowBlur() {
        return this.i.ai;
    }
    set actualShadowBlur(v) {
        this.i.ai = +v;
    }
    /**
     * Gets or sets the drop shadow color.
    */
    get shadowColor() {
        return colorToString(this.i.f1);
    }
    set shadowColor(v) {
        this.i.f1 = stringToColor(v);
    }
    /**
     * Gets actual the drop shadow color used by the series.
    */
    get actualShadowColor() {
        return colorToString(this.i.f0);
    }
    set actualShadowColor(v) {
        this.i.f0 = stringToColor(v);
    }
    /**
     * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
     * When this property is set to true, no StackedFragmentSeries.ShadowBlur is applied.
    */
    get useSingleShadow() {
        return this.i.aa;
    }
    set useSingleShadow(v) {
        this.i.aa = ensureBool(v);
    }
    /**
     * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
    */
    get actualUseSingleShadow() {
        return this.i.v;
    }
    set actualUseSingleShadow(v) {
        this.i.v = ensureBool(v);
    }
    /**
     * Gets or sets the drop shadow x-offset.
    */
    get shadowOffsetX() {
        return this.i.ar;
    }
    set shadowOffsetX(v) {
        this.i.ar = +v;
    }
    /**
     * Gets the actual drop shadow x-offset applied to the series.
    */
    get actualShadowOffsetX() {
        return this.i.aj;
    }
    set actualShadowOffsetX(v) {
        this.i.aj = +v;
    }
    /**
     * Gets or sets the drop shadow y-offset.
    */
    get shadowOffsetY() {
        return this.i.as;
    }
    set shadowOffsetY(v) {
        this.i.as = +v;
    }
    /**
     * Gets the actual drop shadow y-offset applied to the series.
    */
    get actualShadowOffsetY() {
        return this.i.ak;
    }
    set actualShadowOffsetY(v) {
        this.i.ak = +v;
    }
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the series object itself.
    */
    get legendItemBadgeTemplate() {
        return this.i.du;
    }
    set legendItemBadgeTemplate(v) {
        this.i.du = v;
    }
    /**
     * Gets the actual legend item badge template used by the series.
    */
    get actualLegendItemBadgeTemplate() {
        return this.i.dr;
    }
    set actualLegendItemBadgeTemplate(v) {
        this.i.dr = v;
    }
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the series object itself.
    */
    get legendItemTemplate() {
        return this.i.dv;
    }
    set legendItemTemplate(v) {
        this.i.dv = v;
    }
    /**
     * Gets the actual legend item template used by the series.
    */
    get actualLegendItemTemplate() {
        return this.i.ds;
    }
    set actualLegendItemTemplate(v) {
        this.i.ds = v;
    }
    /**
     * Gets or sets the legend item visibility for the current series object.
    */
    get legendItemVisibility() {
        return this.i.ge;
    }
    set legendItemVisibility(v) {
        this.i.ge = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets the actual visibility of the legend items in the series.
    */
    get actualLegendItemVisibility() {
        return this.i.gc;
    }
    set actualLegendItemVisibility(v) {
        this.i.gc = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.fv);
    }
    set markerBrush(v) {
        this.i.fv = stringToBrush(v);
    }
    /**
     * Gets the actual marker brush of the series.
    */
    get actualMarkerBrush() {
        return brushToString(this.i.fq);
    }
    set actualMarkerBrush(v) {
        this.i.fq = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.fw);
    }
    set markerOutline(v) {
        this.i.fw = stringToBrush(v);
    }
    /**
     * Gets the actual marker outline of the series.
    */
    get actualMarkerOutline() {
        return brushToString(this.i.fr);
    }
    set actualMarkerOutline(v) {
        this.i.fr = stringToBrush(v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.dw;
    }
    set markerTemplate(v) {
        this.i.dw = v;
    }
    /**
     * Gets the actual marker template used by the series.
    */
    get actualMarkerTemplate() {
        return this.i.dt;
    }
    set actualMarkerTemplate(v) {
        this.i.dt = v;
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.l;
    }
    set markerType(v) {
        this.i.l = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets the actual marker type set used in the series.
    */
    get actualMarkerType() {
        return this.i.k;
    }
    set actualMarkerType(v) {
        this.i.k = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the Name of the stacked fragment.
    */
    get name() {
        return this.i.b8;
    }
    set name(v) {
        this.i.b8 = v;
    }
    /**
     * Gets or sets the Opacity of the stacked fragment.
    */
    get opacity() {
        return this.i.an;
    }
    set opacity(v) {
        this.i.an = +v;
    }
    /**
     * Gets the series opacity.
    */
    get actualOpacity() {
        return this.i.af;
    }
    set actualOpacity(v) {
        this.i.af = +v;
    }
    /**
     * Gets or sets the brush to use for the outline of the series.
     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
    */
    get outline() {
        return brushToString(this.i.fy);
    }
    set outline(v) {
        this.i.fy = stringToBrush(v);
    }
    /**
     * Gets the series outline.
    */
    get actualOutline() {
        return brushToString(this.i.ft);
    }
    set actualOutline(v) {
        this.i.ft = stringToBrush(v);
    }
    /**
     * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.
    */
    get areaFillOpacity() {
        return this.i.am;
    }
    set areaFillOpacity(v) {
        this.i.am = +v;
    }
    /**
     * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.
    */
    get actualAreaFillOpacity() {
        return this.i.ae;
    }
    set actualAreaFillOpacity(v) {
        this.i.ae = +v;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    get radiusX() {
        return this.i.ao;
    }
    set radiusX(v) {
        this.i.ao = +v;
    }
    /**
     * Gets the actual corner radius of the series
    */
    get actualRadiusX() {
        return this.i.ag;
    }
    set actualRadiusX(v) {
        this.i.ag = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
    */
    get radiusY() {
        return this.i.ap;
    }
    set radiusY(v) {
        this.i.ap = +v;
    }
    /**
     * Gets the actual corner radius of the series
    */
    get actualRadiusY() {
        return this.i.ah;
    }
    set actualRadiusY(v) {
        this.i.ah = +v;
    }
    /**
     * Gets or sets the width of the current series object's line thickness.
    */
    get thickness() {
        return this.i.at;
    }
    set thickness(v) {
        this.i.at = +v;
    }
    /**
     * Gets or sets the thickness of this stacked fragment.
    */
    get actualThickness() {
        return this.i.al;
    }
    set actualThickness(v) {
        this.i.al = +v;
    }
    /**
     * Gets or sets the Title property.
     * The legend item control is created according to the Title on-demand by
     * the series object itself.
    */
    get title() {
        return this.i.ax;
    }
    set title(v) {
        this.i.ax = v;
    }
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get valueMemberPath() {
        return this.i.cq;
    }
    set valueMemberPath(v) {
        this.i.cq = v;
    }
    /**
     * Gets or sets the Visibility of the stacked fragment.
    */
    get visibility() {
        return this.i.gf;
    }
    set visibility(v) {
        this.i.gf = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets the actual visibility of the stacked fragment.
    */
    get actualVisibility() {
        return this.i.gd;
    }
    set actualVisibility(v) {
        this.i.gd = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets the resolved brush used between the local series and the parent series.
    */
    get parentOrLocalBrush() {
        return brushToString(this.i.fz);
    }
    set parentOrLocalBrush(v) {
        this.i.fz = stringToBrush(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("StackedFragmentSeriesComponent");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
     * Event raised when a property (including "effective" and non-dependency property) value changes.
    */
    get propertyUpdated() {
        if (this._propertyUpdated == null) {
            this._propertyUpdated = new EventEmitter();
            this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, (o, e) => {
                this._runInZone(() => {
                    let outerArgs = new IgxPropertyUpdatedEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforePropertyUpdated) {
                        this.beforePropertyUpdated(this, outerArgs);
                    }
                    this._propertyUpdated.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            });
        }
        return this._propertyUpdated;
    }
    _runInZone(act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "brush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "actualBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxStackedFragmentSeriesComponent.prototype, "isDropShadowEnabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxStackedFragmentSeriesComponent.prototype, "actualIsDropShadowEnabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "shadowBlur", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualShadowBlur", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "shadowColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "actualShadowColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxStackedFragmentSeriesComponent.prototype, "useSingleShadow", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxStackedFragmentSeriesComponent.prototype, "actualUseSingleShadow", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "shadowOffsetX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualShadowOffsetX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "shadowOffsetY", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualShadowOffsetY", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "legendItemBadgeTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemBadgeTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "legendItemTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "legendItemVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "markerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerBrush", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "markerOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "markerTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerTemplate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "markerType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "name", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "opacity", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualOpacity", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "outline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "actualOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "areaFillOpacity", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualAreaFillOpacity", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "radiusX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualRadiusX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "radiusY", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualRadiusY", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "thickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualThickness", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxStackedFragmentSeriesComponent.prototype, "title", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "valueMemberPath", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "visibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedFragmentSeriesComponent.prototype, "actualVisibility", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxStackedFragmentSeriesComponent.prototype, "parentOrLocalBrush", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxStackedFragmentSeriesComponent.prototype, "propertyUpdated", null);
IgxStackedFragmentSeriesComponent = tslib_1.__decorate([
    Component({
        selector: 'igx-stacked-fragment-series',
        template: ``,
        providers: [],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxStackedFragmentSeriesComponent);
export { IgxStackedFragmentSeriesComponent };
//# sourceMappingURL=igx-stacked-fragment-series-component.js.map