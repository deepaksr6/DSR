var IgxFullStochasticOscillatorIndicatorComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxStrategyBasedIndicatorComponent } from "./igx-strategy-based-indicator-component";
import { IgxFinancialIndicatorComponent } from "./igx-financial-indicator-component";
import { IgxFinancialSeriesComponent } from "./igx-financial-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { FullStochasticOscillatorIndicator } from "./FullStochasticOscillatorIndicator";
/**
 * Represents a IgxDataChartComponent Full Stochastic Oscillator indicator series.
 * Default required members: High, Low, Close
*
* The `IgxFullStochasticOscillatorIndicatorComponent` class represents a IgxDataChartComponent Full Stochastic Oscillator indicator series.
*
* ```html
* <igx-data-chart  #chart
*     [dataSource]="data">
*     <igx-category-x-axis
*     label="label"
*     #xAxis
*     >
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
*     minimumValue="0"
*     #yAxis>
*     </igx-numeric-y-axis>
*     <igx-full-stochastic-oscillator-indicator
*     [xAxis]="xAxis"
*     [yAxis]="yAxis"
*     openMemberPath="open"
*     highMemberPath="high"
*     lowMemberPath="low"
*     closeMemberPath="close">
* </gx-full-stochastic-oscillator-indicator>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxFullStochasticOscillatorIndicatorComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.openMemberPath = "open";
* series.highMemberPath = "high";
* series.lowMemberPath = "low";
* series.closeMemberPath = "close";
* this.chart.series.add(series);
* ```
*/
export const IgxFullStochasticOscillatorIndicatorComponent_PROVIDERS = [{ provide: IgxStrategyBasedIndicatorComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent) }, { provide: IgxFinancialIndicatorComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent) }, { provide: IgxFinancialSeriesComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent) }];
let IgxFullStochasticOscillatorIndicatorComponent = IgxFullStochasticOscillatorIndicatorComponent_1 = class IgxFullStochasticOscillatorIndicatorComponent extends IgxStrategyBasedIndicatorComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new FullStochasticOscillatorIndicator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the moving average period for the current FullStochasticOscillatorIndicator object.
     * The typical, and initial, value for FullStochasticOscillatorIndicator periods is 14.
    *
    * You can use the `period` property for the moving average period of the current FullStochasticOscillatorIndicator object.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data">
    *     <igx-category-x-axis
    *     label="label"
    *     #xAxis
    *     >
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-full-stochastic-oscillator-indicator
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    * 	period=30>
    * </gx-full-stochastic-oscillator-indicator>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.series.period = 30;
    * ```
    */
    get period() {
        return this.i.qy;
    }
    set period(v) {
        this.i.qy = +v;
    }
    /**
     * Gets or sets the moving average SmoothingPeriod for the current FullStochasticOscillatorIndicator object.
     * The typical, and initial, value for FullStochasticOscillatorIndicator SmoothingPeriod is 3.
    *
    * The `smoothingPeriod` property to fets/sets the moving average SmoothingPeriod for the current FullStochasticOscillatorIndicator object.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data">
    *     <igx-category-x-axis
    *     label="label"
    *     #xAxis
    *     >
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-full-stochastic-oscillator-indicator
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    * 	[smoothingPeriod]=30>
    * </gx-full-stochastic-oscillator-indicator>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * series.smoothingPeriod=30;
    * ```
    */
    get smoothingPeriod() {
        return this.i.smoothingPeriod;
    }
    set smoothingPeriod(v) {
        this.i.smoothingPeriod = +v;
    }
    /**
     * Gets or sets the moving average TriggerPeriod for the current FullStochasticOscillatorIndicator object.
     * The typical, and initial, value for FullStochasticOscillatorIndicator TriggerPeriod is 3.
    *
    * You can use the `period` to set the current moving average period.
    *
    * ```html
    * <igx-data-chart  #chart
    *     [dataSource]="data">
    *     <igx-category-x-axis
    *     label="label"
    *     #xAxis
    *     >
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *     minimumValue="0"
    *     #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-full-stochastic-oscillator-indicator
    *     [xAxis]="xAxis"
    *     [yAxis]="yAxis"
    *     openMemberPath="open"
    *     highMemberPath="high"
    *     lowMemberPath="low"
    *     closeMemberPath="close"
    * 	[triggerPeriod]=30>
    * </gx-full-stochastic-oscillator-indicator>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.series.triggerPeriod = 30;
    * ```
    */
    get triggerPeriod() {
        return this.i.q0;
    }
    set triggerPeriod(v) {
        this.i.q0 = +v;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFullStochasticOscillatorIndicatorComponent.prototype, "period", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFullStochasticOscillatorIndicatorComponent.prototype, "smoothingPeriod", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxFullStochasticOscillatorIndicatorComponent.prototype, "triggerPeriod", null);
IgxFullStochasticOscillatorIndicatorComponent = IgxFullStochasticOscillatorIndicatorComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-full-stochastic-oscillator-indicator',
        template: ``,
        providers: [{ provide: IgxStrategyBasedIndicatorComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent_1) }, { provide: IgxFinancialIndicatorComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent_1) }, { provide: IgxFinancialSeriesComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxFullStochasticOscillatorIndicatorComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxFullStochasticOscillatorIndicatorComponent);
export { IgxFullStochasticOscillatorIndicatorComponent };
//# sourceMappingURL=igx-full-stochastic-oscillator-indicator-component.js.map