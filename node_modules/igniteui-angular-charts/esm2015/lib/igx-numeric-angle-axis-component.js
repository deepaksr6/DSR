var IgxNumericAngleAxisComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericAngleAxis } from "./NumericAngleAxis";
/**
 * Represents a IgxDataChartComponent angle based axis for polar series.
*/
export const IgxNumericAngleAxisComponent_PROVIDERS = [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(() => IgxNumericAngleAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxNumericAngleAxisComponent) }];
let IgxNumericAngleAxisComponent = IgxNumericAngleAxisComponent_1 = class IgxNumericAngleAxisComponent extends IgxNumericAxisBaseComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new NumericAngleAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets if the current axis is of angular axis type
    */
    get isAngular() {
        return this.i.b2;
    }
    /**
     * Indicates the angle in degress that the chart's 0th angle should be offset.
    */
    get startAngleOffset() {
        return this.i.lt;
    }
    set startAngleOffset(v) {
        this.i.lt = +v;
    }
    /**
     * Gets the scaled angle value in radians based on the raw input.
    
    * @param unscaledValue  * The raw input value.
    */
    getScaledAngle(unscaledValue) {
        let iv = this.i.getScaledAngle(unscaledValue);
        return (iv);
    }
    /**
     * Gets the raw axis value back from the angle that would be used on the chart.
    
    * @param scaledValue  * The chart angle value.
    */
    getUnscaledAngle(scaledValue) {
        let iv = this.i.getUnscaledAngle(scaledValue);
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxNumericAngleAxisComponent.prototype, "startAngleOffset", null);
IgxNumericAngleAxisComponent = IgxNumericAngleAxisComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-numeric-angle-axis',
        template: ``,
        providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(() => IgxNumericAngleAxisComponent_1) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxNumericAngleAxisComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxNumericAngleAxisComponent);
export { IgxNumericAngleAxisComponent };
//# sourceMappingURL=igx-numeric-angle-axis-component.js.map