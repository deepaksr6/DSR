var IgxStackedColumnSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxHorizontalStackedSeriesBaseComponent } from "./igx-horizontal-stacked-series-base-component";
import { IgxStackedSeriesBaseComponent } from "./igx-stacked-series-base-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { StackedColumnSeries } from "./StackedColumnSeries";
/**
 * Represents a IgxDataChartComponent stacked column series.
*/
export const IgxStackedColumnSeriesComponent_PROVIDERS = [{ provide: IgxHorizontalStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }];
let IgxStackedColumnSeriesComponent = IgxStackedColumnSeriesComponent_1 = class IgxStackedColumnSeriesComponent extends IgxHorizontalStackedSeriesBaseComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new StackedColumnSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusX() {
        return this.i.p7;
    }
    set radiusX(v) {
        this.i.p7 = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusY() {
        return this.i.p8;
    }
    set radiusY(v) {
        this.i.p8 = +v;
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan() {
        let iv = this.i.eg();
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedColumnSeriesComponent.prototype, "radiusX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxStackedColumnSeriesComponent.prototype, "radiusY", null);
IgxStackedColumnSeriesComponent = IgxStackedColumnSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-stacked-column-series',
        template: ``,
        providers: [{ provide: IgxHorizontalStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent_1) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent_1) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent_1) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxStackedColumnSeriesComponent);
export { IgxStackedColumnSeriesComponent };
//# sourceMappingURL=igx-stacked-column-series-component.js.map