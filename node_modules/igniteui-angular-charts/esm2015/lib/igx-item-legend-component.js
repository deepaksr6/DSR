var IgxItemLegendComponent_1;
import * as tslib_1 from "tslib";
import { Component, Renderer2, ElementRef, forwardRef, NgZone, ChangeDetectionStrategy } from '@angular/core';
import { IgxLegendBaseComponent } from './igx-legend-base-component';
import { ItemLegend } from "./ItemLegend";
import { AngularRenderer } from "igniteui-angular-core";
import { DataChartStylingDefaults } from './DataChartStylingDefaults';
export const IgxItemLegendComponent_PROVIDERS = [{ provide: IgxLegendBaseComponent, useExisting: forwardRef(() => IgxItemLegendComponent) }];
/**
 * Represents a legend that displays an item for each point in the series.
*
* You can use the `IgxItemLegendComponent` to display a legend item for each data member bound to the `IgxBubbleSeriesComponent`
*/
let IgxItemLegendComponent = IgxItemLegendComponent_1 = class IgxItemLegendComponent extends IgxLegendBaseComponent {
    constructor(renderer, elRef, ngZone) {
        super();
        this.renderer = renderer;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this._zoneRunner = (act) => this.ngZone.run(act);
        this.container = renderer.createElement("div");
        renderer.appendChild(elRef.nativeElement, this.container);
        var root;
        root = this.container;
        if (this.container != null) {
            root = this.container;
        }
        var ren = new AngularRenderer(root, this.renderer, window.document, this.ngZone, true, DataChartStylingDefaults);
        this._wrapper = ren;
        this.i.provideContainer(ren);
    }
    ngOnDestroy() {
        this._wrapper.destroy();
        this.i.provideContainer(null);
    }
    createImplementation() {
        return new ItemLegend();
    }
    get i() {
        return this._implementation;
    }
    createItemwiseLegendItems(legendItems, series) {
        this.i.createItemwiseLegendItems(legendItems, series);
    }
    exportVisualData() {
        return this.i.exportVisualData();
    }
    exportSerializedVisualData() {
        return this.i.exportSerializedVisualData();
    }
    /**
 * Gets whether or not this legend supports itemwise visuals
*/
    get isItemwise() {
        return this.i.isItemwise;
    }
};
IgxItemLegendComponent = IgxItemLegendComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-item-legend',
        template: ``,
        host: { 'class': 'ig-item-legend igx-item-legend' },
        providers: [{ provide: IgxLegendBaseComponent, useExisting: forwardRef(() => IgxItemLegendComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [`:host {
    display: block;
}
.ig-legend {
    border: none;
    border: var(--legend-border, none);
    overflow: auto;
    overflow: var(--legend-item-overflow, auto);
}
.ig-chart-legend-item-text {
    font: 12px Verdana, Arial, sans-serif;
    font: var(--legend-item-font, 12px Verdana, Arial, sans-serif);
    vertical-align: middle;
    vertical-align: var(--legend-item-vertical-align, middle);
}
.ig-chart-legend-items-list
{
    padding: 5px;
    padding: var(--legend-item-padding, 5px);
    margin: 0px;
    margin: var(--legend-item-margin, 0px);
    background-color: transparent;
    background-color: var(--legend-list-background-color, transparent);
}
.ig-chart-legend-item-badge, .ui-chart-legend-item-badge canvas
{
    vertical-align: middle;
    vertical-align: var(--legend-item-badge-vertical-align, middle);
}
.ig-chart-legend-item
{
    background-color: transparent;
    background-color: var(--legend-item-background-color, transparent);
}`]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef,
        NgZone])
], IgxItemLegendComponent);
export { IgxItemLegendComponent };
//# sourceMappingURL=igx-item-legend-component.js.map