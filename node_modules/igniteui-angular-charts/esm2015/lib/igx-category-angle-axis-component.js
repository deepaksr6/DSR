var IgxCategoryAngleAxisComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*
* `IgxCategoryAngleAxisComponent` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories
*
* ```html
* <igx-data-chart
*     [dataSource]="dataSource"   >
*     <igx-category-angle-axis name="angleAxis" label="Department" />
*     <igx-numeric-radius-axis name="radiusAxis" />
*  </igx-data-chart>
* ```
*/
export const IgxCategoryAngleAxisComponent_PROVIDERS = [{ provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryAngleAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxCategoryAngleAxisComponent) }];
let IgxCategoryAngleAxisComponent = IgxCategoryAngleAxisComponent_1 = class IgxCategoryAngleAxisComponent extends IgxCategoryAxisBaseComponent {
    constructor() {
        super();
        this._actualIntervalChange = null;
    }
    createImplementation() {
        return new CategoryAngleAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Checks if the axis is of angular type
    */
    get isAngular() {
        return this.i.b2;
    }
    /**
     * Indicates the angle in degress that the chart's 0th angle should be offset.
    *
    * Indicates the angle in degress that the chart's 0th angle should be offset.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="dataSource"   >
    *     <igx-category-angle-axis name="angleAxis" startAngleOffset=30/>
    *     <igx-numeric-radius-axis name="radiusAxis" />
    *  </igx-data-chart>
    * ```
    */
    get startAngleOffset() {
        return this.i.lp;
    }
    set startAngleOffset(v) {
        this.i.lp = +v;
    }
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * Gets or sets the frequency of displayed labels.The set value is a factor that determines which labels will be hidden.
    * For example, an interval of 2 will display every other label.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="dataSource"   >
    *     <igx-category-angle-axis name="angleAxis" interval =2 />
    *     <igx-numeric-radius-axis name="radiusAxis" />
    *  </igx-data-chart>
    * ```
    */
    get interval() {
        return this.i.lm;
    }
    set interval(v) {
        this.i.lm = +v;
    }
    /**
     * Gets the effective value for the current Interval.
    *
    * Gets the effective value for the current Interval.
    */
    get actualInterval() {
        return this.i.lg;
    }
    set actualInterval(v) {
        this.i.lg = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    *
    * Gets or sets the frequency of displayed minor lines. The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval() {
        return this.i.ln;
    }
    set minorInterval(v) {
        this.i.ln = +v;
    }
    /**
     * Gets the effective value for the current MinorInterval.
    *
    * Get the effective value for the current minorInterval.
    */
    get actualMinorInterval() {
        return this.i.lh;
    }
    set actualMinorInterval(v) {
        this.i.lh = +v;
    }
    /**
     * Gets the scaled angle in radians from the raw axis value.
    
    * @param unscaledAngle  * The raw axis value.
    */
    getScaledAngle(unscaledAngle) {
        let iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    }
    /**
     * Gets the raw axis value from the scaled angle in radians.
    
    */
    getUnscaledAngle(scaledAngle) {
        let iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    }
    get actualIntervalChange() {
        if (this._actualIntervalChange == null) {
            this._actualIntervalChange = new EventEmitter();
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, (o, e) => {
                let iv = e;
                let ext = this.actualInterval;
                if (this.beforeActualIntervalChange) {
                    this.beforeActualIntervalChange(this, ext);
                }
                this._actualIntervalChange.emit(ext);
            });
        }
        return this._actualIntervalChange;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryAngleAxisComponent.prototype, "startAngleOffset", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryAngleAxisComponent.prototype, "interval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryAngleAxisComponent.prototype, "actualInterval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryAngleAxisComponent.prototype, "minorInterval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryAngleAxisComponent.prototype, "actualMinorInterval", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryAngleAxisComponent.prototype, "actualIntervalChange", null);
IgxCategoryAngleAxisComponent = IgxCategoryAngleAxisComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-category-angle-axis',
        template: ``,
        providers: [{ provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryAngleAxisComponent_1) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxCategoryAngleAxisComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryAngleAxisComponent);
export { IgxCategoryAngleAxisComponent };
//# sourceMappingURL=igx-category-angle-axis-component.js.map