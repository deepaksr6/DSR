import * as tslib_1 from "tslib";
import { forwardRef, Input } from '@angular/core';
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxRangeCategorySeriesComponent } from "./igx-range-category-series-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { toPoint, fromPoint } from "igniteui-angular-core";
/**
 * Base class for ranged category series with a category X-axis and a numeric Y-axis.
*
* Instantiate HorizontalAnchoredCategorySeries
*
* ```html
*  <igx-data-chart
*       [dataSource]="data"  >
* 	 <igx-column-series
*         #series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value"
*           >
*       </igx-column-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxColumnSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.valueMemberPath="value";
* this.chart.series.add(series);
* ```
*/
export const IgxHorizontalRangeCategorySeriesComponent_PROVIDERS = [{ provide: IgxRangeCategorySeriesComponent, useExisting: forwardRef(() => IgxHorizontalRangeCategorySeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxHorizontalRangeCategorySeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxHorizontalRangeCategorySeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxHorizontalRangeCategorySeriesComponent) }];
export class IgxHorizontalRangeCategorySeriesComponent extends IgxRangeCategorySeriesComponent {
    constructor() {
        super();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the effective x-axis for the current CategorySeries object.
    *
    * Instantiate xAxis
    *
    * <!-- Angular -->
    *
    * ```html
    *  <igx-data-chart
    *       [dataSource]="data"  >
    * 	  <igx-category-x-axis
    *         label="label"
    *         #xAxis
    *         >
    *       </igx-category-x-axis>
    * 	 <igx-column-series
    *     ...
    *         [xAxis]="xAxis"
    *     ...
    *           >
    *       </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get xAxis() {
        if (this.i.xAxis == null) {
            return null;
        }
        if (!this.i.xAxis.externalObject) {
            let e = IgxCategoryAxisBaseComponent._createFromInternal(this.i.xAxis);
            if (e) {
                e._implementation = this.i.xAxis;
            }
            this.i.xAxis.externalObject = e;
        }
        return this.i.xAxis.externalObject;
    }
    set xAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.xAxis = null : this.i.xAxis = v.i;
    }
    /**
     * Gets or sets the effective y-axis for the current CategorySeries object.
    *
    * Instantiate yAxis
    *
    * <!-- Angular -->
    *
    * ```js
    *  <igx-data-chart
    *       [dataSource]="data"  >
    * 	  <igx-numeric-y-axis
    *         minimumValue="0"
    *         #yAxis>
    *       </igx-numeric-y-axis>
    * 	 <igx-column-series
    *     ...
    *         [yAxis]="yAxis"
    *     ...
    *           >
    *       </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * let series = new IgxColumnSeriesComponent();
    * series.xAxis = this.xAxis;
    * series.yAxis = this.yAxis;
    * series.valueMemberPath="value";
    * this.chart.series.add(series);
    * ```
    */
    get yAxis() {
        if (this.i.yAxis == null) {
            return null;
        }
        if (!this.i.yAxis.externalObject) {
            let e = IgxNumericYAxisComponent._createFromInternal(this.i.yAxis);
            if (e) {
                e._implementation = this.i.yAxis;
            }
            this.i.yAxis.externalObject = e;
        }
        return this.i.yAxis.externalObject;
    }
    set yAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.yAxis = null : this.i.yAxis = v.i;
    }
    /**
     * Checks if this series is a range series
    *
    * You can use the `isRange` to get the current series is a range type series.
    *
    * <!-- Angular JS -->
    *
    * ```ts
    *   var r = this.series.isRange;
    * ```
    */
    get isRange() {
        return this.i.c3;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {
            return this.xAxis;
        }
        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {
            return this.yAxis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    *
    * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.
    *
    * <!-- Angular JS -->
    *
    *       var g = series.getOffsetValue();
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    getOffsetValue() {
        let iv = this.i.getOffsetValue();
        return (iv);
    }
    /**
     * Returns the width of the category grouping this series is in.
    
    *
    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.
    *
    * <!-- Angular JS -->
    *
    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    getCategoryWidth() {
        let iv = this.i.getCategoryWidth();
        return (iv);
    }
    getNextOrExactIndex(world, skipUnknowns) {
        let iv = this.i.fc(toPoint(world), skipUnknowns);
        return (iv);
    }
    getPreviousOrExactIndex(world, skipUnknowns) {
        let iv = this.i.fe(toPoint(world), skipUnknowns);
        return (iv);
    }
    getSeriesValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesLowValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.el(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesHighValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.ej(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesHighValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.li(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesLowValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.lk(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.lm(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    *
    * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis
    */
    canUseAsYAxis(axis) {
        let iv = this.i.pi(axis);
        return (iv);
    }
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    *
    * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis
    *
    * <!-- Angular JS -->
    *
    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
    */
    canUseAsXAxis(axis) {
        let iv = this.i.ph(axis);
        return (iv);
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxCategoryAxisBaseComponent),
    tslib_1.__metadata("design:paramtypes", [IgxCategoryAxisBaseComponent])
], IgxHorizontalRangeCategorySeriesComponent.prototype, "xAxis", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxNumericYAxisComponent),
    tslib_1.__metadata("design:paramtypes", [IgxNumericYAxisComponent])
], IgxHorizontalRangeCategorySeriesComponent.prototype, "yAxis", null);
//# sourceMappingURL=igx-horizontal-range-category-series-component.js.map