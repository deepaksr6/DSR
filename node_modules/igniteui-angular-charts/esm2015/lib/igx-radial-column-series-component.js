var IgxRadialColumnSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxAnchoredRadialSeriesComponent } from "./igx-anchored-radial-series-component";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { RadialColumnSeries } from "./RadialColumnSeries";
/**
 * Represents a IgxDataChartComponent radial column series.
 * Compare values across categories by using radial rectangles.
*/
export const IgxRadialColumnSeriesComponent_PROVIDERS = [{ provide: IgxAnchoredRadialSeriesComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent) }, { provide: IgxRadialBaseComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent) }];
let IgxRadialColumnSeriesComponent = IgxRadialColumnSeriesComponent_1 = class IgxRadialColumnSeriesComponent extends IgxAnchoredRadialSeriesComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new RadialColumnSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusX() {
        return this.i.ov;
    }
    set radiusX(v) {
        this.i.ov = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusY() {
        return this.i.ow;
    }
    set radiusY(v) {
        this.i.ow = +v;
    }
    /**
     * When overridden in a derived class, is invoked whenever application code or internal processes
     * call ApplyTemplate.
    
    */
    onApplyTemplate() {
        this.i.ac();
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan() {
        let iv = this.i.eg();
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxRadialColumnSeriesComponent.prototype, "radiusX", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxRadialColumnSeriesComponent.prototype, "radiusY", null);
IgxRadialColumnSeriesComponent = IgxRadialColumnSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-radial-column-series',
        template: ``,
        providers: [{ provide: IgxAnchoredRadialSeriesComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent_1) }, { provide: IgxRadialBaseComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent_1) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxRadialColumnSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxRadialColumnSeriesComponent);
export { IgxRadialColumnSeriesComponent };
//# sourceMappingURL=igx-radial-column-series-component.js.map