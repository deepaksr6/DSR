var IgxScatterAreaSeriesComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxColorScaleComponent } from "./igx-color-scale-component";
import { IgxScatterTriangulationSeriesComponent } from "./igx-scatter-triangulation-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterAreaSeries } from "./ScatterAreaSeries";
import { toPoint } from "igniteui-angular-core";
/**
 * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.
*/
export const IgxScatterAreaSeriesComponent_PROVIDERS = [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(() => IgxScatterAreaSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterAreaSeriesComponent) }];
let IgxScatterAreaSeriesComponent = IgxScatterAreaSeriesComponent_1 = class IgxScatterAreaSeriesComponent extends IgxScatterTriangulationSeriesComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new ScatterAreaSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets ColorScale used to resolve the color values of points in the series.
    */
    get colorScale() {
        if (this.i.nm == null) {
            return null;
        }
        if (!this.i.nm.externalObject) {
            let e = IgxColorScaleComponent._createFromInternal(this.i.nm);
            if (e) {
                e._implementation = this.i.nm;
            }
            this.i.nm.externalObject = e;
        }
        return this.i.nm.externalObject;
    }
    set colorScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.nm = null : this.i.nm = v.i;
    }
    /**
     * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
    */
    get colorMemberPath() {
        return this.i.nu;
    }
    set colorMemberPath(v) {
        this.i.nu = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {
            return this.colorScale;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * Attaches an image to the view of this series
    
    */
    attachImage(image) {
        this.i.ny(image);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxColorScaleComponent),
    tslib_1.__metadata("design:paramtypes", [IgxColorScaleComponent])
], IgxScatterAreaSeriesComponent.prototype, "colorScale", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxScatterAreaSeriesComponent.prototype, "colorMemberPath", null);
IgxScatterAreaSeriesComponent = IgxScatterAreaSeriesComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-scatter-area-series',
        template: ``,
        providers: [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(() => IgxScatterAreaSeriesComponent_1) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterAreaSeriesComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxScatterAreaSeriesComponent);
export { IgxScatterAreaSeriesComponent };
//# sourceMappingURL=igx-scatter-area-series-component.js.map