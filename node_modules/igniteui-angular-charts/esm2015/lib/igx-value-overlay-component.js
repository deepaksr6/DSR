var IgxValueOverlayComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxAxisComponent } from "./igx-axis-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ValueOverlay } from "./ValueOverlay";
import { ensureBool, brushToString, stringToBrush, toPoint, fromPoint } from "igniteui-angular-core";
/**
 * Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.
*/
export const IgxValueOverlayComponent_PROVIDERS = [{ provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxValueOverlayComponent) }];
let IgxValueOverlayComponent = IgxValueOverlayComponent_1 = class IgxValueOverlayComponent extends IgxSeriesComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new ValueOverlay();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the axis used by the value overlay.
    */
    get axis() {
        if (this.i.l1 == null) {
            return null;
        }
        if (!this.i.l1.externalObject) {
            let e = IgxAxisComponent._createFromInternal(this.i.l1);
            if (e) {
                e._implementation = this.i.l1;
            }
            this.i.l1.externalObject = e;
        }
        return this.i.l1.externalObject;
    }
    set axis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.l1 = null : this.i.l1 = v.i;
    }
    /**
     * Gets or sets the value of the overlay.
    */
    get value() {
        return this.i.mj;
    }
    set value(v) {
        this.i.mj = +v;
    }
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    get isAxisAnnotationEnabled() {
        return this.i.l5;
    }
    set isAxisAnnotationEnabled(v) {
        this.i.l5 = ensureBool(v);
    }
    /**
     * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.
    */
    get axisAnnotationFormatLabel() {
        return this.i.l3;
    }
    set axisAnnotationFormatLabel(v) {
        this.i.l3 = v;
    }
    /**
     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
    */
    get axisAnnotationTextColor() {
        return brushToString(this.i.nh);
    }
    set axisAnnotationTextColor(v) {
        this.i.nh = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationBackground() {
        return brushToString(this.i.nf);
    }
    set axisAnnotationBackground(v) {
        this.i.nf = stringToBrush(v);
    }
    /**
     * Gets or sets the precision to use displaying values for interpolated positions.
    */
    get axisAnnotationInterpolatedValuePrecision() {
        return this.i.mk;
    }
    set axisAnnotationInterpolatedValuePrecision(v) {
        this.i.mk = +v;
    }
    /**
     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
    */
    get axisAnnotationOutline() {
        return brushToString(this.i.ng);
    }
    set axisAnnotationOutline(v) {
        this.i.ng = stringToBrush(v);
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingLeft() {
        return this.i.ma;
    }
    set axisAnnotationPaddingLeft(v) {
        this.i.ma = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingTop() {
        return this.i.mc;
    }
    set axisAnnotationPaddingTop(v) {
        this.i.mc = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingRight() {
        return this.i.mb;
    }
    set axisAnnotationPaddingRight(v) {
        this.i.mb = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingBottom() {
        return this.i.l9;
    }
    set axisAnnotationPaddingBottom(v) {
        this.i.l9 = +v;
    }
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationStrokeThickness() {
        return this.i.md;
    }
    set axisAnnotationStrokeThickness(v) {
        this.i.md = +v;
    }
    /**
     * Gets whether the series is a value overlay.
    */
    get isValueOverlay() {
        return this.i.c6;
    }
    get labelResolved() {
        return this.i.my;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.axis && this.axis.name && this.axis.name == name) {
            return this.axis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.axis && this.axis._styling) {
            this.axis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getSeriesValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.lm(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    /**
     * Gets the item item index associated with the specified world position
    
    * @param world
    */
    getItemIndex(world) {
        let iv = this.i.e8(toPoint(world));
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * Requests that the provided item should be brought into view if possible.
    
    * @param item  * The item to attempt to bring into view.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * Gets the label for a data item.
    
    * @param value  * The unscaled value to get a label for.
    */
    getLabel(value) {
        let iv = this.i.mw(value);
        return (iv);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", IgxAxisComponent),
    tslib_1.__metadata("design:paramtypes", [IgxAxisComponent])
], IgxValueOverlayComponent.prototype, "axis", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "value", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxValueOverlayComponent.prototype, "isAxisAnnotationEnabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Function])
], IgxValueOverlayComponent.prototype, "axisAnnotationFormatLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxValueOverlayComponent.prototype, "axisAnnotationTextColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxValueOverlayComponent.prototype, "axisAnnotationBackground", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "axisAnnotationInterpolatedValuePrecision", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxValueOverlayComponent.prototype, "axisAnnotationOutline", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "axisAnnotationPaddingLeft", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "axisAnnotationPaddingTop", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "axisAnnotationPaddingRight", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "axisAnnotationPaddingBottom", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueOverlayComponent.prototype, "axisAnnotationStrokeThickness", null);
IgxValueOverlayComponent = IgxValueOverlayComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-value-overlay',
        template: ``,
        providers: [{ provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxValueOverlayComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxValueOverlayComponent);
export { IgxValueOverlayComponent };
//# sourceMappingURL=igx-value-overlay-component.js.map