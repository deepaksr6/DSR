var IgxCategoryDateTimeXAxisComponent_1;
import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { TimeAxisDisplayType, TimeAxisDisplayType_$type } from "./TimeAxisDisplayType";
import { IgxTimeAxisBaseComponent } from "./igx-time-axis-base-component";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { CategoryDateTimeXAxis } from "./CategoryDateTimeXAxis";
import { ensureEnum } from "igniteui-angular-core";
/**
 * Represents a category-based horizontal X axis that uses a DateTime scale.
*
* `IgxCategoryDateTimeXAxisComponent` class represents a category-based horizontal X axis that uses a DateTime scale.
*
* ```html
* <igx-data-chart
*     [dataSource]="data">
*     <igx-time-x-axis
* 		dateTimeMemberPath="date"
* 		#xAxis>
*     </igx-time-x-axis>
* </igx-data-chart>
* ```
*
* ```ts
* let xAxis = new IgxTimeXAxisComponent();
* xAxis.dataTimeMemberPath="date";
* this.chart.axes.add(xAxis);
* ```
*/
export const IgxCategoryDateTimeXAxisComponent_PROVIDERS = [{ provide: IgxTimeAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryDateTimeXAxisComponent) }, { provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryDateTimeXAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxCategoryDateTimeXAxisComponent) }];
let IgxCategoryDateTimeXAxisComponent = IgxCategoryDateTimeXAxisComponent_1 = class IgxCategoryDateTimeXAxisComponent extends IgxTimeAxisBaseComponent {
    constructor() {
        super();
        this._actualIntervalChange = null;
        this._actualMinorIntervalChange = null;
    }
    createImplementation() {
        return new CategoryDateTimeXAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets if the current axis is a continuous rather than a discrete scale
    */
    get isContinuous() {
        return this.i.b6;
    }
    /**
     * Gets or sets the axis display type.
     * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.
     * Discrete display type will not use a constant interval, but will align each label with its data point.
    *
    * `displayType` property is used for axis display type.
    *
    * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-time-x-axis
    * 		dateTimeMemberPath="date"
    * 		displayType ="continuous"
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    */
    get displayType() {
        return this.i.mb;
    }
    set displayType(v) {
        this.i.mb = ensureEnum(TimeAxisDisplayType_$type, v);
    }
    /**
     * Gets or sets the X axis time interval.
    *
    * `interval` property is used to get/sets the frequency of displayed labels.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-time-x-axis
    * 		dateTimeMemberPath="date"
    * 		interval=2
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    */
    get interval() {
        return this.i.ml;
    }
    set interval(v) {
        this.i.ml = +v;
    }
    /**
     * Gets the effective value for the current Interval.
    */
    get actualInterval() {
        return this.i.mi;
    }
    set actualInterval(v) {
        this.i.mi = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval() {
        return this.i.mm;
    }
    set minorInterval(v) {
        this.i.mm = +v;
    }
    /**
     * Gets the effective value for the current MinorInterval.
    */
    get actualMinorInterval() {
        return this.i.mj;
    }
    set actualMinorInterval(v) {
        this.i.mj = +v;
    }
    /**
     * Gets if the current axis is of category date time axis type
    */
    get isCategoryDateTime() {
        return this.i.b5;
    }
    scrollIntoView(minimum, maximum) {
        this.i.ms(minimum, maximum);
    }
    get actualIntervalChange() {
        if (this._actualIntervalChange == null) {
            this._actualIntervalChange = new EventEmitter();
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, (o, e) => {
                let iv = e;
                let ext = this.actualInterval;
                if (this.beforeActualIntervalChange) {
                    this.beforeActualIntervalChange(this, ext);
                }
                this._actualIntervalChange.emit(ext);
            });
        }
        return this._actualIntervalChange;
    }
    get actualMinorIntervalChange() {
        if (this._actualMinorIntervalChange == null) {
            this._actualMinorIntervalChange = new EventEmitter();
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, (o, e) => {
                let iv = e;
                let ext = this.actualMinorInterval;
                if (this.beforeActualMinorIntervalChange) {
                    this.beforeActualMinorIntervalChange(this, ext);
                }
                this._actualMinorIntervalChange.emit(ext);
            });
        }
        return this._actualMinorIntervalChange;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryDateTimeXAxisComponent.prototype, "displayType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryDateTimeXAxisComponent.prototype, "interval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryDateTimeXAxisComponent.prototype, "actualInterval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryDateTimeXAxisComponent.prototype, "minorInterval", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxCategoryDateTimeXAxisComponent.prototype, "actualMinorInterval", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryDateTimeXAxisComponent.prototype, "actualIntervalChange", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryDateTimeXAxisComponent.prototype, "actualMinorIntervalChange", null);
IgxCategoryDateTimeXAxisComponent = IgxCategoryDateTimeXAxisComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-category-date-time-x-axis',
        template: ``,
        providers: [{ provide: IgxTimeAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryDateTimeXAxisComponent_1) }, { provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxCategoryDateTimeXAxisComponent_1) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxCategoryDateTimeXAxisComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxCategoryDateTimeXAxisComponent);
export { IgxCategoryDateTimeXAxisComponent };
//# sourceMappingURL=igx-category-date-time-x-axis-component.js.map