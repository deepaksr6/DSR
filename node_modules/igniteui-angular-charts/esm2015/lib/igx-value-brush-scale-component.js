var IgxValueBrushScaleComponent_1;
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxBrushScaleComponent } from "./igx-brush-scale-component";
import { ValueBrushScale } from "./ValueBrushScale";
import { ensureBool } from "igniteui-angular-core";
/**
 * Represents a brush scale that uses value-based brush selection.
*/
export const IgxValueBrushScaleComponent_PROVIDERS = [{ provide: IgxBrushScaleComponent, useExisting: forwardRef(() => IgxValueBrushScaleComponent) }];
let IgxValueBrushScaleComponent = IgxValueBrushScaleComponent_1 = class IgxValueBrushScaleComponent extends IgxBrushScaleComponent {
    constructor() {
        super();
    }
    createImplementation() {
        return new ValueBrushScale();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the minimum value for this scale.
    */
    get minimumValue() {
        return this.i.minimumValue;
    }
    set minimumValue(v) {
        this.i.minimumValue = +v;
    }
    /**
     * Gets or sets the maximum value for this scale.
    */
    get maximumValue() {
        return this.i.maximumValue;
    }
    set maximumValue(v) {
        this.i.maximumValue = +v;
    }
    /**
     * Gets or sets whether the scale is logarithmic.
    */
    get isLogarithmic() {
        return this.i.isLogarithmic;
    }
    set isLogarithmic(v) {
        this.i.isLogarithmic = ensureBool(v);
    }
    /**
     * Gets or sets the logarithm base for this scale.
    */
    get logarithmBase() {
        return this.i.logarithmBase;
    }
    set logarithmBase(v) {
        this.i.logarithmBase = +v;
    }
    /**
     * Checks if the value brush scale is ready for usage in the chart
    */
    get isReady() {
        return this.i.isReady;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueBrushScaleComponent.prototype, "minimumValue", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueBrushScaleComponent.prototype, "maximumValue", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxValueBrushScaleComponent.prototype, "isLogarithmic", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxValueBrushScaleComponent.prototype, "logarithmBase", null);
IgxValueBrushScaleComponent = IgxValueBrushScaleComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'igx-value-brush-scale',
        template: ``,
        providers: [{ provide: IgxBrushScaleComponent, useExisting: forwardRef(() => IgxValueBrushScaleComponent_1) }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [])
], IgxValueBrushScaleComponent);
export { IgxValueBrushScaleComponent };
//# sourceMappingURL=igx-value-brush-scale-component.js.map