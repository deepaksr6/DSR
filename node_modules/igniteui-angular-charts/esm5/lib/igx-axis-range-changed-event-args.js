import { AxisRangeChangedEventArgs as AxisRangeChangedEventArgs_internal } from "./AxisRangeChangedEventArgs";
/**
 * Provides data for Axis RangeChanged events.
*
* The `IgxAxisRangeChangedEventArgs` event fire when the axis range changes.
*/
var IgxAxisRangeChangedEventArgs = /** @class */ (function () {
    function IgxAxisRangeChangedEventArgs() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgxAxisRangeChangedEventArgs.prototype.createImplementation = function () {
        return new AxisRangeChangedEventArgs_internal(0);
    };
    Object.defineProperty(IgxAxisRangeChangedEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisRangeChangedEventArgs.prototype.onImplementationCreated = function () {
    };
    IgxAxisRangeChangedEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgxAxisRangeChangedEventArgs.prototype, "oldMinimumValue", {
        /**
         * Gets the minimum value before the range changed. The reported minimum is the effective,
         * not the set value.
        *
        * The `oldMinimumValue` property is used to gets the minimum value before the range changed.
        */
        get: function () {
            return this.i.oldMinimumValue;
        },
        set: function (v) {
            this.i.oldMinimumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisRangeChangedEventArgs.prototype, "minimumValue", {
        /**
         * Gets the minimum value after the range changed. The reported minimum is the effective,
         * not the set value.
        *
        * The `minimumValue` property is used to getsthe minimum value after the range changed.
        *
        * ```ts
        *   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) :void {
        * 	let maxVal= e.maximumValue
        * 	let minVal= e.minimumValue
        *
        *     }
        * ```
        */
        get: function () {
            return this.i.minimumValue;
        },
        set: function (v) {
            this.i.minimumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisRangeChangedEventArgs.prototype, "oldMaximumValue", {
        /**
         * Gets the maximum value before the range changed. The reported maximum is the effective,
         * not the set value.
        *
        * The `oldMaximumValue` property is used to gets the maximum value before the range changed.
        */
        get: function () {
            return this.i.oldMaximumValue;
        },
        set: function (v) {
            this.i.oldMaximumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisRangeChangedEventArgs.prototype, "maximumValue", {
        /**
         * Gets the maximum value after the range changed. The reported maximum is the effective,
         * not the set value.
        *
        * The `maximumValue` property is used to gets the maximum value after the range changed.
        *
        * ```ts
        *   public yAxisRangeChanged(sender : any, e: AxisRangeChangedEventArgs) :void {
        * 	let maxVal= e.maximumValue
        * 	let minVal= e.minimumValue
        *
        *     }
        * ```
        */
        get: function () {
            return this.i.maximumValue;
        },
        set: function (v) {
            this.i.maximumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    return IgxAxisRangeChangedEventArgs;
}());
export { IgxAxisRangeChangedEventArgs };
//# sourceMappingURL=igx-axis-range-changed-event-args.js.map