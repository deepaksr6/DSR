import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxStyle } from "igniteui-angular-core";
import { MarkerType, MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType, CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { IgxShapeSeriesBaseComponent } from "./igx-shape-series-base-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
export var IgxScatterPolygonSeriesComponent_PROVIDERS = [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(function () { return IgxScatterPolygonSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterPolygonSeriesComponent; }) }];
var IgxScatterPolygonSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxScatterPolygonSeriesComponent, _super);
    function IgxScatterPolygonSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxScatterPolygonSeriesComponent_1 = IgxScatterPolygonSeriesComponent;
    IgxScatterPolygonSeriesComponent.prototype.createImplementation = function () {
        return new ScatterPolygonSeries();
    };
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "hasMarkers", {
        /**
         * Returns whether the current series supports visual markers.
        */
        get: function () {
            return this.i.hasMarkers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "shapeStyle", {
        /**
         * The default style to apply to all Shapes in the series.
        */
        get: function () {
            if (this.i.ok == null) {
                return null;
            }
            if (!this.i.ok.externalObject) {
                var e = new IgxStyle();
                e._implementation = this.i.ok;
                this.i.ok.externalObject = e;
            }
            return this.i.ok.externalObject;
        },
        set: function (v) {
            v == null ? this.i.ok = null : this.i.ok = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.nf;
        },
        set: function (v) {
            this.i.nf = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.n1;
        },
        set: function (v) {
            this.i.n1 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.nm;
        },
        set: function (v) {
            this.i.nm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "actualMarkerTemplate", {
        /**
         * Gets the effective marker template for the current series object.
        */
        get: function () {
            return this.i.n0;
        },
        set: function (v) {
            this.i.n0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.og);
        },
        set: function (v) {
            this.i.og = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "actualMarkerBrush", {
        /**
         * Gets the effective marker brush for the current series object.
        */
        get: function () {
            return brushToString(this.i.oe);
        },
        set: function (v) {
            this.i.oe = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.oh);
        },
        set: function (v) {
            this.i.oh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "actualMarkerOutline", {
        /**
         * Gets the effective marker outline for the current series object.
        */
        get: function () {
            return brushToString(this.i.of);
        },
        set: function (v) {
            this.i.of = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolygonSeriesComponent.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.ne;
        },
        set: function (v) {
            this.i.ne = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    IgxScatterPolygonSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    };
    var IgxScatterPolygonSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxStyle),
        tslib_1.__metadata("design:paramtypes", [IgxStyle])
    ], IgxScatterPolygonSeriesComponent.prototype, "shapeStyle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxScatterPolygonSeriesComponent.prototype, "markerType", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxScatterPolygonSeriesComponent.prototype, "markerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxScatterPolygonSeriesComponent.prototype, "markerThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxScatterPolygonSeriesComponent.prototype, "actualMarkerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxScatterPolygonSeriesComponent.prototype, "markerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxScatterPolygonSeriesComponent.prototype, "actualMarkerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxScatterPolygonSeriesComponent.prototype, "markerOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxScatterPolygonSeriesComponent.prototype, "actualMarkerOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxScatterPolygonSeriesComponent.prototype, "markerCollisionAvoidance", null);
    IgxScatterPolygonSeriesComponent = IgxScatterPolygonSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-scatter-polygon-series',
            template: "",
            providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(function () { return IgxScatterPolygonSeriesComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterPolygonSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxScatterPolygonSeriesComponent);
    return IgxScatterPolygonSeriesComponent;
}(IgxShapeSeriesBaseComponent));
export { IgxScatterPolygonSeriesComponent };
//# sourceMappingURL=igx-scatter-polygon-series-component.js.map