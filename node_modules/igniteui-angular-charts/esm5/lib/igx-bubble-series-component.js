import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxSizeScaleComponent } from "./igx-size-scale-component";
import { IgxBrushScaleComponent } from "./igx-brush-scale-component";
import { IgxScatterBaseComponent } from "./igx-scatter-base-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { BubbleSeries } from "./BubbleSeries";
import { ensureBool } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent bubble series.
*/
export var IgxBubbleSeriesComponent_PROVIDERS = [{ provide: IgxScatterBaseComponent, useExisting: forwardRef(function () { return IgxBubbleSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxBubbleSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxBubbleSeriesComponent; }) }];
var IgxBubbleSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxBubbleSeriesComponent, _super);
    function IgxBubbleSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxBubbleSeriesComponent_1 = IgxBubbleSeriesComponent;
    IgxBubbleSeriesComponent.prototype.createImplementation = function () {
        return new BubbleSeries();
    };
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "radiusMemberPath", {
        /**
         * Gets or sets the radius mapping property for the current series object.
        */
        get: function () {
            return this.i.px;
        },
        set: function (v) {
            this.i.px = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "radiusScale", {
        /**
         * Gets or sets the radius size scale for the bubbles.
        */
        get: function () {
            if (this.i.o5 == null) {
                return null;
            }
            if (!this.i.o5.externalObject) {
                var e = IgxSizeScaleComponent._createFromInternal(this.i.o5);
                if (e) {
                    e._implementation = this.i.o5;
                }
                this.i.o5.externalObject = e;
            }
            return this.i.o5.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.o5 = null : this.i.o5 = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "labelMemberPath", {
        /**
         * Gets or sets the Label mapping property for the current series object.
        */
        get: function () {
            return this.i.pr;
        },
        set: function (v) {
            this.i.pr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "fillMemberPath", {
        /**
         * Gets or sets the fill mapping property for the current series object.
        */
        get: function () {
            return this.i.pm;
        },
        set: function (v) {
            this.i.pm = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "fillScale", {
        /**
         * Gets or sets the brush scale for the fill brush of markers.
        */
        get: function () {
            if (this.i.o1 == null) {
                return null;
            }
            if (!this.i.o1.externalObject) {
                var e = IgxBrushScaleComponent._createFromInternal(this.i.o1);
                if (e) {
                    e._implementation = this.i.o1;
                }
                this.i.o1.externalObject = e;
            }
            return this.i.o1.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.o1 = null : this.i.o1 = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "fillScaleUseGlobalValues", {
        /**
         * Gets or sets whether or not the FillScale uses global min/max values of FillMemberPath from multiple series.
         * This setting applies only if multiple series are using the same FillScale.
        */
        get: function () {
            return this.i.pd;
        },
        set: function (v) {
            this.i.pd = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "markerOutlineUsesFillScale", {
        /**
         * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
         * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
        */
        get: function () {
            return this.i.pe;
        },
        set: function (v) {
            this.i.pe = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "markerOutlineBrightness", {
        /**
         * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
         * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
        */
        get: function () {
            return this.i.pk;
        },
        set: function (v) {
            this.i.pk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "markerBrushBrightness", {
        /**
         * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
         * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
        */
        get: function () {
            return this.i.pj;
        },
        set: function (v) {
            this.i.pj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "radiusScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath from multiple series.
         * This setting applies only if multiple series are using the same RadiusScale.
        */
        get: function () {
            return this.i.pf;
        },
        set: function (v) {
            this.i.pf = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBubbleSeriesComponent.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get: function () {
            return this.i.cy;
        },
        enumerable: true,
        configurable: true
    });
    IgxBubbleSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    };
    IgxBubbleSeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgxBubbleSeriesComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fs(item, memberPathName);
        return (iv);
    };
    var IgxBubbleSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxBubbleSeriesComponent.prototype, "radiusMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxSizeScaleComponent),
        tslib_1.__metadata("design:paramtypes", [IgxSizeScaleComponent])
    ], IgxBubbleSeriesComponent.prototype, "radiusScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxBubbleSeriesComponent.prototype, "labelMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxBubbleSeriesComponent.prototype, "fillMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxBrushScaleComponent),
        tslib_1.__metadata("design:paramtypes", [IgxBrushScaleComponent])
    ], IgxBubbleSeriesComponent.prototype, "fillScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxBubbleSeriesComponent.prototype, "fillScaleUseGlobalValues", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxBubbleSeriesComponent.prototype, "markerOutlineUsesFillScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxBubbleSeriesComponent.prototype, "markerOutlineBrightness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxBubbleSeriesComponent.prototype, "markerBrushBrightness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxBubbleSeriesComponent.prototype, "radiusScaleUseGlobalValues", null);
    IgxBubbleSeriesComponent = IgxBubbleSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-bubble-series',
            template: "",
            providers: [{ provide: IgxScatterBaseComponent, useExisting: forwardRef(function () { return IgxBubbleSeriesComponent_1; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxBubbleSeriesComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxBubbleSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxBubbleSeriesComponent);
    return IgxBubbleSeriesComponent;
}(IgxScatterBaseComponent));
export { IgxBubbleSeriesComponent };
//# sourceMappingURL=igx-bubble-series-component.js.map