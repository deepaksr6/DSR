import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
/**
 * Represents a IgxDataChartComponent radius axis for polar and radial series.
*
* ```html
* <igx-data-chart
*     [dataSource]="dataSource"   >
*     <igx-category-angle-axis name="angleAxis" label="Department" />
*     <igx-numeric-radius-axis name="radiusAxis" />
*  </igx-data-chart>
* ```
*
* ```ts
* this.series1.angleAxisName = "AngleAxis";
* this.series1.valueAxisName = "numericYAxis";
* ```
*/
export var IgxNumericRadiusAxisComponent_PROVIDERS = [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(function () { return IgxNumericRadiusAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxNumericRadiusAxisComponent; }) }];
var IgxNumericRadiusAxisComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxNumericRadiusAxisComponent, _super);
    function IgxNumericRadiusAxisComponent() {
        return _super.call(this) || this;
    }
    IgxNumericRadiusAxisComponent_1 = IgxNumericRadiusAxisComponent;
    IgxNumericRadiusAxisComponent.prototype.createImplementation = function () {
        return new NumericRadiusAxis();
    };
    Object.defineProperty(IgxNumericRadiusAxisComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNumericRadiusAxisComponent.prototype, "isRadial", {
        /**
         * Checks if the axis is of radial axis type
        *
        * ```ts
        * let isRadial: boolean = this.series.isRadial;
        * ```
        */
        get: function () {
            return this.i.ce;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNumericRadiusAxisComponent.prototype, "radiusExtentScale", {
        /**
         * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
         * a value between 0.0 and 1.0.
        */
        get: function () {
            return this.i.l0;
        },
        set: function (v) {
            this.i.l0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNumericRadiusAxisComponent.prototype, "innerRadiusExtentScale", {
        /**
         * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
         * a value between 0.0 and 1.0.
        */
        get: function () {
            return this.i.lz;
        },
        set: function (v) {
            this.i.lz = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.
    
    * @param unscaledValue  * The raw axis value.
    */
    IgxNumericRadiusAxisComponent.prototype.getScaledValue = function (unscaledValue) {
        var iv = this.i.lw(unscaledValue);
        return (iv);
    };
    /**
     * Returns a raw axis value from the world coordinates radius length provided.
    
    * @param scaledValue  * The scaled world coordinates radius length.
    *
    * Class containing several properties which are used as parameters passed to scaling operations in a `IgxSeriesViewerComponent`.
    */
    IgxNumericRadiusAxisComponent.prototype.getUnscaledValue = function (scaledValue) {
        var iv = this.i.ly(scaledValue);
        return (iv);
    };
    var IgxNumericRadiusAxisComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxNumericRadiusAxisComponent.prototype, "radiusExtentScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxNumericRadiusAxisComponent.prototype, "innerRadiusExtentScale", null);
    IgxNumericRadiusAxisComponent = IgxNumericRadiusAxisComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-numeric-radius-axis',
            template: "",
            providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(function () { return IgxNumericRadiusAxisComponent_1; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxNumericRadiusAxisComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxNumericRadiusAxisComponent);
    return IgxNumericRadiusAxisComponent;
}(IgxNumericAxisBaseComponent));
export { IgxNumericRadiusAxisComponent };
//# sourceMappingURL=igx-numeric-radius-axis-component.js.map