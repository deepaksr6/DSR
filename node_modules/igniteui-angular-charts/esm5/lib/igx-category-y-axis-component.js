import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { CategoryYAxis } from "./CategoryYAxis";
import { toPoint, fromRect } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent category Y axis.
*/
export var IgxCategoryYAxisComponent_PROVIDERS = [{ provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(function () { return IgxCategoryYAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxCategoryYAxisComponent; }) }];
var IgxCategoryYAxisComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxCategoryYAxisComponent, _super);
    function IgxCategoryYAxisComponent() {
        var _this = _super.call(this) || this;
        _this._actualIntervalChange = null;
        _this._actualMinorIntervalChange = null;
        return _this;
    }
    IgxCategoryYAxisComponent_1 = IgxCategoryYAxisComponent;
    IgxCategoryYAxisComponent.prototype.createImplementation = function () {
        return new CategoryYAxis();
    };
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "isVertical", {
        /**
         * Gets if the current axis is a vertical axis.
        */
        get: function () {
            return this.i.ch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "interval", {
        /**
         * Gets or sets the frequency of displayed labels.
         * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
        */
        get: function () {
            return this.i.la;
        },
        set: function (v) {
            this.i.la = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "actualInterval", {
        /**
         * Gets the effective value for the current Interval.
        */
        get: function () {
            return this.i.k6;
        },
        set: function (v) {
            this.i.k6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "minorInterval", {
        /**
         * Gets or sets the frequency of displayed minor lines.
         * The set value is a factor that determines how the minor lines will be displayed.
        */
        get: function () {
            return this.i.lb;
        },
        set: function (v) {
            this.i.lb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "actualMinorInterval", {
        /**
         * Gets the effective value for the current MinorInterval.
        */
        get: function () {
            return this.i.k8;
        },
        set: function (v) {
            this.i.k8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgxCategoryYAxisComponent.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {
        var iv = this.i.k1(toPoint(point), useInterpolation, singularWidth);
        return fromRect(iv);
    };
    IgxCategoryYAxisComponent.prototype.scrollRangeIntoView = function (minimum, maximum) {
        this.i.ll(minimum, maximum);
    };
    /**
     * Scrolls the specified item into view.
    
    * @param item  * Data item to scroll into view
    */
    IgxCategoryYAxisComponent.prototype.scrollIntoView = function (item) {
        this.i.lk(item);
    };
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "actualIntervalChange", {
        get: function () {
            var _this = this;
            if (this._actualIntervalChange == null) {
                this._actualIntervalChange = new EventEmitter();
                this.i.propertyChanged = delegateCombine(this.i.propertyChanged, function (o, e) {
                    var iv = e;
                    var ext = _this.actualInterval;
                    if (_this.beforeActualIntervalChange) {
                        _this.beforeActualIntervalChange(_this, ext);
                    }
                    _this._actualIntervalChange.emit(ext);
                });
            }
            return this._actualIntervalChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryYAxisComponent.prototype, "actualMinorIntervalChange", {
        get: function () {
            var _this = this;
            if (this._actualMinorIntervalChange == null) {
                this._actualMinorIntervalChange = new EventEmitter();
                this.i.propertyChanged = delegateCombine(this.i.propertyChanged, function (o, e) {
                    var iv = e;
                    var ext = _this.actualMinorInterval;
                    if (_this.beforeActualMinorIntervalChange) {
                        _this.beforeActualMinorIntervalChange(_this, ext);
                    }
                    _this._actualMinorIntervalChange.emit(ext);
                });
            }
            return this._actualMinorIntervalChange;
        },
        enumerable: true,
        configurable: true
    });
    var IgxCategoryYAxisComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryYAxisComponent.prototype, "interval", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryYAxisComponent.prototype, "actualInterval", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryYAxisComponent.prototype, "minorInterval", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryYAxisComponent.prototype, "actualMinorInterval", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxCategoryYAxisComponent.prototype, "actualIntervalChange", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxCategoryYAxisComponent.prototype, "actualMinorIntervalChange", null);
    IgxCategoryYAxisComponent = IgxCategoryYAxisComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-category-y-axis',
            template: "",
            providers: [{ provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(function () { return IgxCategoryYAxisComponent_1; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxCategoryYAxisComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxCategoryYAxisComponent);
    return IgxCategoryYAxisComponent;
}(IgxCategoryAxisBaseComponent));
export { IgxCategoryYAxisComponent };
//# sourceMappingURL=igx-category-y-axis-component.js.map