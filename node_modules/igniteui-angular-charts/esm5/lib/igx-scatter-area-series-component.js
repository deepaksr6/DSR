import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxColorScaleComponent } from "./igx-color-scale-component";
import { IgxScatterTriangulationSeriesComponent } from "./igx-scatter-triangulation-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterAreaSeries } from "./ScatterAreaSeries";
import { toPoint } from "igniteui-angular-core";
/**
 * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.
*/
export var IgxScatterAreaSeriesComponent_PROVIDERS = [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(function () { return IgxScatterAreaSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterAreaSeriesComponent; }) }];
var IgxScatterAreaSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxScatterAreaSeriesComponent, _super);
    function IgxScatterAreaSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxScatterAreaSeriesComponent_1 = IgxScatterAreaSeriesComponent;
    IgxScatterAreaSeriesComponent.prototype.createImplementation = function () {
        return new ScatterAreaSeries();
    };
    Object.defineProperty(IgxScatterAreaSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterAreaSeriesComponent.prototype, "colorScale", {
        /**
         * Gets or sets ColorScale used to resolve the color values of points in the series.
        */
        get: function () {
            if (this.i.nm == null) {
                return null;
            }
            if (!this.i.nm.externalObject) {
                var e = IgxColorScaleComponent._createFromInternal(this.i.nm);
                if (e) {
                    e._implementation = this.i.nm;
                }
                this.i.nm.externalObject = e;
            }
            return this.i.nm.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.nm = null : this.i.nm = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterAreaSeriesComponent.prototype, "colorMemberPath", {
        /**
         * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
        */
        get: function () {
            return this.i.nu;
        },
        set: function (v) {
            this.i.nu = v;
        },
        enumerable: true,
        configurable: true
    });
    IgxScatterAreaSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {
            return this.colorScale;
        }
        return null;
    };
    IgxScatterAreaSeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgxScatterAreaSeriesComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fs(item, memberPathName);
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgxScatterAreaSeriesComponent.prototype.getItem = function (world) {
        var iv = this.i.fp(toPoint(world));
        return (iv);
    };
    /**
     * Attaches an image to the view of this series
    
    */
    IgxScatterAreaSeriesComponent.prototype.attachImage = function (image) {
        this.i.ny(image);
    };
    var IgxScatterAreaSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxColorScaleComponent),
        tslib_1.__metadata("design:paramtypes", [IgxColorScaleComponent])
    ], IgxScatterAreaSeriesComponent.prototype, "colorScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxScatterAreaSeriesComponent.prototype, "colorMemberPath", null);
    IgxScatterAreaSeriesComponent = IgxScatterAreaSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-scatter-area-series',
            template: "",
            providers: [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(function () { return IgxScatterAreaSeriesComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterAreaSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxScatterAreaSeriesComponent);
    return IgxScatterAreaSeriesComponent;
}(IgxScatterTriangulationSeriesComponent));
export { IgxScatterAreaSeriesComponent };
//# sourceMappingURL=igx-scatter-area-series-component.js.map