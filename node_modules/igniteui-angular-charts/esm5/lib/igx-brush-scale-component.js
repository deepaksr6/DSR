import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxPropertyUpdatedEventArgs } from "igniteui-angular-core";
import { BrushScale } from "./BrushScale";
import { TypeRegistrar } from "igniteui-angular-core";
import { NamePatcher, toBrushCollection, fromBrushCollection, toSpinal, initializePropertiesFromCss, brushToString } from "igniteui-angular-core";
/**
 * Represents a base class for brush scales.
*/
export var IgxBrushScaleComponent_PROVIDERS = [];
var IgxBrushScaleComponent = /** @class */ (function () {
    function IgxBrushScaleComponent() {
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._propertyUpdated = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgxBrushScaleComponent.prototype.createImplementation = function () {
        return new BrushScale();
    };
    IgxBrushScaleComponent.prototype.ngOnInit = function () {
    };
    Object.defineProperty(IgxBrushScaleComponent.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgxBrushScaleComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgxBrushScaleComponent.prototype.onImplementationCreated = function () {
    };
    Object.defineProperty(IgxBrushScaleComponent.prototype, "brushes", {
        /**
         * Gets the brushes collection used by this scale.
        */
        get: function () {
            return fromBrushCollection(this.i.brushes);
        },
        set: function (v) {
            this.i.brushes = toBrushCollection(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBrushScaleComponent.prototype, "isReady", {
        /**
         * Gets the status of the scale
        */
        get: function () {
            return this.i.isReady;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBrushScaleComponent.prototype, "isBrushScale", {
        /**
         * Checks if this item is a BrushScale
        */
        get: function () {
            return this.i.isBrushScale;
        },
        enumerable: true,
        configurable: true
    });
    IgxBrushScaleComponent.prototype.findByName = function (name) {
        return null;
    };
    Object.defineProperty(IgxBrushScaleComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgxBrushScaleComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxBrushScaleComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("BrushScaleComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
     * Registers a series with the scale. Under normal circumstances you should not need to call this manually.
    
    * @param series  * The series to register with the scale.
    */
    IgxBrushScaleComponent.prototype.registerSeries = function (series) {
        this.i.registerSeries((series == null ? null : series.i));
    };
    /**
     * Unregisters a series with the scale. Under normal circumstances you should not need to call this manually.
    
    * @param series  * The series to unregister from the scale.
    */
    IgxBrushScaleComponent.prototype.unregisterSeries = function (series) {
        this.i.unregisterSeries((series == null ? null : series.i));
    };
    /**
     * Gets a brush from the brushes collection by index.
    
    */
    IgxBrushScaleComponent.prototype.getBrush = function (index) {
        var iv = this.i.getBrush(index);
        return brushToString(iv);
    };
    Object.defineProperty(IgxBrushScaleComponent.prototype, "propertyUpdated", {
        /**
         * Event raised when a property (including "effective" and non-dependency property) value changes.
        */
        get: function () {
            var _this = this;
            if (this._propertyUpdated == null) {
                this._propertyUpdated = new EventEmitter();
                this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxPropertyUpdatedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforePropertyUpdated) {
                            _this.beforePropertyUpdated(_this, outerArgs);
                        }
                        _this._propertyUpdated.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._propertyUpdated;
        },
        enumerable: true,
        configurable: true
    });
    IgxBrushScaleComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], IgxBrushScaleComponent.prototype, "brushes", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxBrushScaleComponent.prototype, "propertyUpdated", null);
    IgxBrushScaleComponent = tslib_1.__decorate([
        Component({
            selector: 'igx-brush-scale',
            template: "",
            providers: [],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxBrushScaleComponent);
    return IgxBrushScaleComponent;
}());
export { IgxBrushScaleComponent };
//# sourceMappingURL=igx-brush-scale-component.js.map