import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxFinancialOverlayComponent } from "./igx-financial-overlay-component";
import { IgxFinancialSeriesComponent } from "./igx-financial-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { PriceChannelOverlay } from "./PriceChannelOverlay";
import { toPoint } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent Financial Price Channel Overlay series.
 * Default required members: High, Low
*
* You can use the `IgxPriceChannelOverlayComponent` to display price volatility.
*
* ```html
* <igx-data-chart
*     [dataSource]="data" >
*     <igx-category-x-axis
* 		label="label"
* 		#xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
* 		#yAxis>
*     </igx-numeric-y-axis>
*     <igx-price-channel-overlay
* 		[xAxis]="xAxis"
* 		[yAxis]="yAxis"
* 		openMemberPath="open"
* 		highMemberPath="high"
* 		lowMemberPath="low"
* 		closeMemberPath="close">
*     </igx-price-channel-overlay>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxPriceChannelOverlayComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.openMemberPath = "open";
* series.highMemberPath = "high";
* series.lowMemberPath = "low";
* series.closeMemberPath = "close";
* this.chart.series.add(series);
* ```
*/
export var IgxPriceChannelOverlayComponent_PROVIDERS = [{ provide: IgxFinancialOverlayComponent, useExisting: forwardRef(function () { return IgxPriceChannelOverlayComponent; }) }, { provide: IgxFinancialSeriesComponent, useExisting: forwardRef(function () { return IgxPriceChannelOverlayComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxPriceChannelOverlayComponent; }) }];
var IgxPriceChannelOverlayComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxPriceChannelOverlayComponent, _super);
    function IgxPriceChannelOverlayComponent() {
        return _super.call(this) || this;
    }
    IgxPriceChannelOverlayComponent_1 = IgxPriceChannelOverlayComponent;
    IgxPriceChannelOverlayComponent.prototype.createImplementation = function () {
        return new PriceChannelOverlay();
    };
    Object.defineProperty(IgxPriceChannelOverlayComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPriceChannelOverlayComponent.prototype, "period", {
        /**
         * Gets or sets the moving average period for the current PriceChannelOverlay object.
         * The typical, and initial, value for Bollinger band periods is 14.
        *
        * You can use the `period` to set the moving average.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-price-channel-overlay
        * 		#series
        * 		[xAxis]="xAxis"
        * 		[yAxis]="yAxis"
        * 		openMemberPath="open"
        * 		highMemberPath="high"
        * 		lowMemberPath="low"
        * 		closeMemberPath="close"
        * 		period="14">
        *     </igx-price-channel-overlay>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * this.series.period = 14;
        * ```
        */
        get: function () {
            return this.i.pr;
        },
        set: function (v) {
            this.i.pr = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgxPriceChannelOverlayComponent.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.en(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgxPriceChannelOverlayComponent.prototype.getNextOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.fc(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgxPriceChannelOverlayComponent.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.fe(toPoint(world), skipUnknowns);
        return (iv);
    };
    var IgxPriceChannelOverlayComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxPriceChannelOverlayComponent.prototype, "period", null);
    IgxPriceChannelOverlayComponent = IgxPriceChannelOverlayComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-price-channel-overlay',
            template: "",
            providers: [{ provide: IgxFinancialOverlayComponent, useExisting: forwardRef(function () { return IgxPriceChannelOverlayComponent_1; }) }, { provide: IgxFinancialSeriesComponent, useExisting: forwardRef(function () { return IgxPriceChannelOverlayComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxPriceChannelOverlayComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxPriceChannelOverlayComponent);
    return IgxPriceChannelOverlayComponent;
}(IgxFinancialOverlayComponent));
export { IgxPriceChannelOverlayComponent };
//# sourceMappingURL=igx-price-channel-overlay-component.js.map