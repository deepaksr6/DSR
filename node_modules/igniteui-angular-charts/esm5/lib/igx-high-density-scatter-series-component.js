import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxProgressiveLoadStatusEventArgs } from "./igx-progressive-load-status-event-args";
import { IgxSeriesComponent } from "./igx-series-component";
import { HighDensityScatterSeries } from "./HighDensityScatterSeries";
import { ensureBool, colorToString, stringToColor, toPoint } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent series where a high volume of scatter points can be displayed.
*/
export var IgxHighDensityScatterSeriesComponent_PROVIDERS = [{ provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxHighDensityScatterSeriesComponent; }) }];
var IgxHighDensityScatterSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxHighDensityScatterSeriesComponent, _super);
    function IgxHighDensityScatterSeriesComponent() {
        var _this = _super.call(this) || this;
        _this._progressiveLoadStatusChanged = null;
        return _this;
    }
    IgxHighDensityScatterSeriesComponent_1 = IgxHighDensityScatterSeriesComponent;
    IgxHighDensityScatterSeriesComponent.prototype.createImplementation = function () {
        return new HighDensityScatterSeries();
    };
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "isScatter", {
        /**
         * Checks if this series is a scatter series
        */
        get: function () {
            return this.i.c4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "xAxis", {
        /**
         * Gets or sets the effective x-axis for the current object.
        */
        get: function () {
            if (this.i.l8 == null) {
                return null;
            }
            if (!this.i.l8.externalObject) {
                var e = IgxNumericXAxisComponent._createFromInternal(this.i.l8);
                if (e) {
                    e._implementation = this.i.l8;
                }
                this.i.l8.externalObject = e;
            }
            return this.i.l8.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.l8 = null : this.i.l8 = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "yAxis", {
        /**
         * Gets or sets the effective y-axis for the current object.
        */
        get: function () {
            if (this.i.ma == null) {
                return null;
            }
            if (!this.i.ma.externalObject) {
                var e = IgxNumericYAxisComponent._createFromInternal(this.i.ma);
                if (e) {
                    e._implementation = this.i.ma;
                }
                this.i.ma.externalObject = e;
            }
            return this.i.ma.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.ma = null : this.i.ma = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "xMemberPath", {
        /**
         * Gets or sets the x value mapping property for the current series object.
        */
        get: function () {
            return this.i.n4;
        },
        set: function (v) {
            this.i.n4 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "yMemberPath", {
        /**
         * Gets or sets the y value mapping property for the current series object.
        */
        get: function () {
            return this.i.n8;
        },
        set: function (v) {
            this.i.n8 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "useBruteForce", {
        /**
         * Gets or sets the whether to use use brute force mode.
        */
        get: function () {
            return this.i.mo;
        },
        set: function (v) {
            this.i.mo = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "progressiveLoad", {
        /**
         * Gets or sets the whether to progressively load the data into the chart.
        */
        get: function () {
            return this.i.mn;
        },
        set: function (v) {
            this.i.mn = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "heatMinimum", {
        /**
         * Gets or sets the density value that maps to the minimum heat color.
        */
        get: function () {
            return this.i.ng;
        },
        set: function (v) {
            this.i.ng = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "heatMaximum", {
        /**
         * Gets or sets the value that maps to the maximum heat color.
        */
        get: function () {
            return this.i.nf;
        },
        set: function (v) {
            this.i.nf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "heatMinimumColor", {
        /**
         * Gets or sets the color to use for the minimum end of the scale.
        */
        get: function () {
            return colorToString(this.i.o1);
        },
        set: function (v) {
            this.i.o1 = stringToColor(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "heatMaximumColor", {
        /**
         * Gets or sets the color to use for the maximum end of the scale.
        */
        get: function () {
            return colorToString(this.i.o0);
        },
        set: function (v) {
            this.i.o0 = stringToColor(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "pointExtent", {
        /**
         * Gets or sets the the pixel extent of the square data points that are rendered.
        */
        get: function () {
            return this.i.ns;
        },
        set: function (v) {
            this.i.ns = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "progressiveStatus", {
        /**
         * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
        */
        get: function () {
            return this.i.nt;
        },
        set: function (v) {
            this.i.nt = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgxHighDensityScatterSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {
            return this.xAxis;
        }
        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {
            return this.yAxis;
        }
        return null;
    };
    IgxHighDensityScatterSeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgxHighDensityScatterSeriesComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fs(item, memberPathName);
        return (iv);
    };
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    IgxHighDensityScatterSeriesComponent.prototype.canUseAsYAxis = function (axis) {
        var iv = this.i.mm(axis);
        return (iv);
    };
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    IgxHighDensityScatterSeriesComponent.prototype.canUseAsXAxis = function (axis) {
        var iv = this.i.ml(axis);
        return (iv);
    };
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    IgxHighDensityScatterSeriesComponent.prototype.scrollIntoView = function (item) {
        var iv = this.i.c9(item);
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgxHighDensityScatterSeriesComponent.prototype.getItem = function (world) {
        var iv = this.i.fp(toPoint(world));
        return (iv);
    };
    Object.defineProperty(IgxHighDensityScatterSeriesComponent.prototype, "progressiveLoadStatusChanged", {
        /**
         * Raised when the progressive loading state of the series has changed.
        */
        get: function () {
            var _this = this;
            if (this._progressiveLoadStatusChanged == null) {
                this._progressiveLoadStatusChanged = new EventEmitter();
                this.i.progressiveLoadStatusChanged = delegateCombine(this.i.progressiveLoadStatusChanged, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxProgressiveLoadStatusEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeProgressiveLoadStatusChanged) {
                            _this.beforeProgressiveLoadStatusChanged(_this, outerArgs);
                        }
                        _this._progressiveLoadStatusChanged.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._progressiveLoadStatusChanged;
        },
        enumerable: true,
        configurable: true
    });
    var IgxHighDensityScatterSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxNumericXAxisComponent),
        tslib_1.__metadata("design:paramtypes", [IgxNumericXAxisComponent])
    ], IgxHighDensityScatterSeriesComponent.prototype, "xAxis", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxNumericYAxisComponent),
        tslib_1.__metadata("design:paramtypes", [IgxNumericYAxisComponent])
    ], IgxHighDensityScatterSeriesComponent.prototype, "yAxis", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxHighDensityScatterSeriesComponent.prototype, "xMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxHighDensityScatterSeriesComponent.prototype, "yMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxHighDensityScatterSeriesComponent.prototype, "useBruteForce", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxHighDensityScatterSeriesComponent.prototype, "progressiveLoad", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxHighDensityScatterSeriesComponent.prototype, "heatMinimum", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxHighDensityScatterSeriesComponent.prototype, "heatMaximum", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxHighDensityScatterSeriesComponent.prototype, "heatMinimumColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxHighDensityScatterSeriesComponent.prototype, "heatMaximumColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxHighDensityScatterSeriesComponent.prototype, "pointExtent", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxHighDensityScatterSeriesComponent.prototype, "progressiveStatus", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxHighDensityScatterSeriesComponent.prototype, "progressiveLoadStatusChanged", null);
    IgxHighDensityScatterSeriesComponent = IgxHighDensityScatterSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-high-density-scatter-series',
            template: "",
            providers: [{ provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxHighDensityScatterSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxHighDensityScatterSeriesComponent);
    return IgxHighDensityScatterSeriesComponent;
}(IgxSeriesComponent));
export { IgxHighDensityScatterSeriesComponent };
//# sourceMappingURL=igx-high-density-scatter-series-component.js.map