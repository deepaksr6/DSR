/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Output, EventEmitter, Input } from '@angular/core';
import { Visibility, Visibility_$type } from "igniteui-angular-core";
import { HorizontalAlignment, HorizontalAlignment_$type } from "igniteui-angular-core";
import { VerticalAlignment, VerticalAlignment_$type } from "igniteui-angular-core";
import { AxisLabelsLocation, AxisLabelsLocation_$type } from './AxisLabelsLocation';
import { AxisLabelSettings } from './AxisLabelSettings';
import { TitleSettings } from './TitleSettings';
import { AxisTitlePosition, AxisTitlePosition_$type } from './AxisTitlePosition';
import { ensureEnum, arrayFindByName, brushToString, stringToBrush, ensureBool, toSpinal, initializePropertiesFromCss, NamePatcher } from "igniteui-angular-core";
import { delegateCombine } from "igniteui-angular-core";
import { IgxRenderRequestedEventArgs } from './igx-render-requested-event-args';
import { TypeRegistrar } from "igniteui-angular-core";
import { IgxAxisRangeChangedEventArgs } from './igx-axis-range-changed-event-args';
import { IgxAxisAnnotationCollection } from './igx-axis-annotation-collection';
import { AxisAnnotationCollection as AxisAnnotationCollection_internal } from './AxisAnnotationCollection';
import { SyncableObservableCollection$1 } from "igniteui-angular-core";
import { IAxisAnnotation_$type } from './IAxisAnnotation';
export var IgxAxisComponent_PROVIDERS = [];
/**
 * Represents the base class from which all axis types are derived.
*
* The `IgxAxisComponent` is an array of axis objects.
*
* ```html
* <igx-data-chart
*     [dataSource]="data" >
*     <igx-category-x-axis
* 		label="label"
* 		#xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
* 		#yAxis>
*     </igx-numeric-y-axis>
* </igx-data-chart>
* ```
*/
var IgxAxisComponent = /** @class */ (function () {
    function IgxAxisComponent() {
        this._renderer = null;
        this._annotations = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._rangeChanged = null;
        this._renderRequested = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    Object.defineProperty(IgxAxisComponent.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.onImplementationCreated = function () {
    };
    Object.defineProperty(IgxAxisComponent.prototype, "axisInternal", {
        get: function () {
            return this.i;
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.createImplementation = function () {
        return null;
    };
    IgxAxisComponent.prototype.ngOnInit = function () {
    };
    Object.defineProperty(IgxAxisComponent.prototype, "name", {
        get: function () {
            //console.log("getting axis anme: " + this.i.name)
            return this.i.name;
        },
        set: function (value) {
            //console.log("setting axis name: " + value);
            this.i.name = value;
            //console.log("checking axis anme: " + this.i.name)
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.provideData = function (data) {
    };
    IgxAxisComponent.prototype._provideRenderer = function (renderer) {
        this._renderer = renderer;
        this._zoneRunner = function (act) { return renderer._ngZone.run(act); };
    };
    IgxAxisComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgxAxisComponent.prototype, "isCategory", {
        /**
     * Gets or sets if the current axis is of category axis type
    */
        get: function () {
            return this.i.b4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isNumeric", {
        /**
         * Gets or sets if the current axis is of numeric axis type
        *
        *     Gets or sets if the current axis is of numeric axis type
        */
        get: function () {
            return this.i.cc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isAngular", {
        /**
         * Gets if the current axis is of angular axis type
        */
        get: function () {
            return this.i.b2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isRadial", {
        /**
         * Gets or sets if the current axis is of radial axis type
        */
        get: function () {
            return this.i.ce;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isVertical", {
        /**
         * Gets if the current axis is a vertical axis.
        */
        get: function () {
            return this.i.ch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isSorting", {
        /**
         * Gets or sets if the current axis is sorting data items
        */
        get: function () {
            return this.i.cf;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isDateTime", {
        /**
         * Gets or sets if the current axis is of date time axis type
        */
        get: function () {
            return this.i.b7;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isPiecewise", {
        /**
         * Gets or sets if the axis is a piecewise scaling function.
        */
        get: function () {
            return this.i.cd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isCategoryDateTime", {
        /**
         * Gets if the current axis is of category date time axis type
        */
        get: function () {
            return this.i.b5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isContinuous", {
        /**
         * Gets if the current axis is a continuous rather than a discrete scale
        */
        get: function () {
            return this.i.b6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "formatLabel", {
        /**
         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
        *
        * The `formatLabel` function takes an object that produces a formatted label for displaying in the chart.
        *
        * ```html
        * <igx-data-chart [dataSource]="data" >
        *     <igx-category-x-axis
        * 		name="xAxis"
        * 		FormatLabel="xAxis_FormatLabel" />
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "title", {
        /**
         * Gets or sets the Title property.
        *
        * Use `title` property to display the title of the component.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.gc;
        },
        set: function (v) {
            this.i.gc = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "stroke", {
        /**
         * Gets or sets the Stroke property.
         * Null is treated as auto. The axis stroke will be displayed or not based on the axis type and series used with it.
        *
        * Use `stroke` property to set the stroke of the chart.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		stroke="blue"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.iu);
        },
        set: function (v) {
            this.i.iu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "actualStroke", {
        /**
         * Gets or sets the effective stroke used for the axis.
        */
        get: function () {
            return brushToString(this.i.iq);
        },
        set: function (v) {
            this.i.iq = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "strokeThickness", {
        /**
         * Gets or sets the StrokeThickness property.
        *
        * Use `strokeThickness` property for the thickness of the stroke.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		strokeThickness= 5
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.ep;
        },
        set: function (v) {
            this.i.ep = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "strip", {
        /**
         * Gets or sets the Strip property.
        *
        * Use `strip` property to set the strip of the chart.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		 strip= "grey"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.it);
        },
        set: function (v) {
            this.i.it = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "majorStroke", {
        /**
         * Gets or sets the MajorStroke property.
         * Null is treated as auto. Major lines will be displayed or not based on the axis type and series used with it.
        *
        * Gets or sets the `majorStroke` using this property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 	   majorStroke="black"
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.ir);
        },
        set: function (v) {
            this.i.ir = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "actualMajorStroke", {
        /**
         * Gets or sets the ActualMajorStroke property.
        *
        * The `actualMajorStroke` property is used for ActualMajorStroke of the axis.
        */
        get: function () {
            return brushToString(this.i.io);
        },
        set: function (v) {
            this.i.io = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "majorStrokeThickness", {
        /**
         * Gets or sets the MajorStrokeThickness property.
        *
        * Gets or sets the `majorStrokeThickness` using this property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 	  majorStrokeThickness="1"
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.d5;
        },
        set: function (v) {
            this.i.d5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "minorStroke", {
        /**
         * Gets or sets the MinorStroke property.
        *
        * Gets or sets the minorStroke thickness using `minorStrokeThickness` property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 	 minorStrokeThickness="1"
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.is);
        },
        set: function (v) {
            this.i.is = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "actualMinorStroke", {
        /**
         * Gets or sets the ActualMinorStroke property.
        *
        * The `actualMinorStroke` property is used for ActualMinorStroke of the axis.
        */
        get: function () {
            return brushToString(this.i.ip);
        },
        set: function (v) {
            this.i.ip = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "minorStrokeThickness", {
        /**
         * Gets or sets the MinorStrokeThickness property.
        */
        get: function () {
            return this.i.d8;
        },
        set: function (v) {
            this.i.d8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "tickStroke", {
        /**
         * Gets or sets the TickStroke property.
        *
        * Use `tickStroke` property for the color of the tickmarks.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		tickStroke="black"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.iv);
        },
        set: function (v) {
            this.i.iv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "tickStrokeThickness", {
        /**
         * Gets or sets the TickStrokeThickness property.
        *
        * Use `tickStrokeThickness` property for thickness of the stroke tickmarks.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		tickStrokeThicknes="2"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.er;
        },
        set: function (v) {
            this.i.er = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "tickLength", {
        /**
         * Gets or sets the TickLength property.
        *
        * Use `tickLength` property for The length of the tickmarks to display for this axis.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		tickLength="5"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.eq;
        },
        set: function (v) {
            this.i.eq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isDisabled", {
        /**
         * Gets or sets the IsDisabled property. If true, the axis will not be rendered.
        *
        * The `isDisabled` property is used to decide if the axis will not be rendered.
        */
        get: function () {
            return this.i.b8;
        },
        set: function (v) {
            this.i.b8 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "isInverted", {
        /**
         * Gets or sets the IsInverted property.
        *
        * Gets or sets the `isInverted` property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		isInverted= true
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.ca;
        },
        set: function (v) {
            this.i.ca = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "useEnhancedIntervalManagement", {
        /**
         * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.
        *
        * Use `useEnhancedIntervalManagement` property to gets/sets whether to use more advanced heuristics when determining the initial number of labels to render,
        * before resolving collisions, etc.
        */
        get: function () {
            return this.i.cq;
        },
        set: function (v) {
            this.i.cq = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "enhancedIntervalMinimumCharacters", {
        /**
         * Gets or sets the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.
        *
        * The `enhancedIntervalMinimumCharacters` property is used to set the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		enhancedIntervalMinimumCharacters=5
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.ez;
        },
        set: function (v) {
            this.i.ez = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelTextStyle", {
        /**
         * Gets or sets the text style to use for axis labels.
        *
        * The `labelTextStyle` property Overrides the style of the text used for the axis labels.
        */
        get: function () {
            return this.i.ax ? this.i.ax.textStyle : null;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.textStyle = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelTextColor", {
        /**
         * The color of the {0}.
        *
        * The `labelTextColor` property Overrides the color of the text used for the axis labels.
        */
        get: function () {
            return brushToString(this.i.ax ? this.i.ax.textColor : null);
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.textColor = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelLocation", {
        /**
         * Gets or sets the location of the {0}.
        *
        * The `Location` property is used for the location.
        */
        get: function () {
            return this.i.ax ? this.i.ax.location : 0;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.location = ensureEnum(AxisLabelsLocation_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelVisibility", {
        /**
         * Gets or sets the visibility of the {0}.
        *
        * The `Visibility` property is used for the visibility of the axis.
        */
        get: function () {
            return this.i.ax ? this.i.ax.visibility : 0;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.visibility = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelShowFirstLabel", {
        /**
         * Gets or sets whether the first label is displayed when the zoom level is set to 1.
        *
        * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.
        */
        get: function () {
            return this.i.ax ? this.i.ax.showFirstLabel : false;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.showFirstLabel = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelAngle", {
        /**
         * Gets or sets the angle of the {0}.
        *
        * The `Angle` property is used to set the angle of the axis.
        */
        get: function () {
            return this.i.ax ? this.i.ax.angle : NaN;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.angle = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelExtent", {
        /**
         * Distance between the axis and the edge of the control.
        *
        * The `Extent` property is used for the extent.
        */
        get: function () {
            return this.i.ax ? this.i.ax.extent : NaN;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.extent = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelLeftMargin", {
        /**
         * Margin applied to the left of the {0}.
        *
        * The `labelLeftMargin` property is used for the left margin of the labels.
        */
        get: function () {
            return this.i.ax ? this.i.ax.leftMargin : NaN;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.leftMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelRightMargin", {
        /**
         * Margin applied to the right of the {0}.
        *
        * The `labelRightMargin` property is used for the right margin of the labels.
        */
        get: function () {
            return this.i.ax ? this.i.ax.rightMargin : NaN;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.rightMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelTopMargin", {
        /**
         * Margin applied above the {0}.
        *
        * The `labelTopMargin` property is used for the top margin of the labels.
        */
        get: function () {
            return this.i.ax ? this.i.ax.topMargin : NaN;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.topMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelBottomMargin", {
        /**
         * Margin applied below the {0}.
        *
        * The `labelBottomMargin` is used to set the bottom margin of the labels.
        */
        get: function () {
            return this.i.ax ? this.i.ax.bottomMargin : NaN;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.bottomMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelHorizontalAlignment", {
        /**
         * Gets or sets the horizontal alignment of the {0}.
        *
        * The `HorizontalAlignment` property is used for the horizontal alignment.
        */
        get: function () {
            return this.i.ax ? this.i.ax.horizontalAlignment : 0;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelVerticalAlignment", {
        /**
         * Gets or sets the vertical alignment of the {0}.
        *
        * The `VerticalAlignment` property is used for the vertical alignment of the axis.
        */
        get: function () {
            return this.i.ax ? this.i.ax.verticalAlignment : 0;
        },
        set: function (v) {
            this.ensureLabelSettings();
            this.i.ax.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.ensureLabelSettings = function () {
        if (this.i.ax) {
            return;
        }
        this.i.ax = new AxisLabelSettings();
        this.i.ax.location = this.i.ay();
        this.i.ax.angle = this.i.dm();
        this.i.ax.leftMargin = this.i.dp();
        this.i.ax.rightMargin = this.i.dq();
        this.i.ax.topMargin = this.i.dr();
        this.i.ax.bottomMargin = this.i.dn();
        this.i.ax.horizontalAlignment = this.i.il();
        this.i.ax.verticalAlignment = this.i.jf();
    };
    Object.defineProperty(IgxAxisComponent.prototype, "crossingAxis", {
        /**
         * Gets or sets the CrossingAxis property.
        *
        * The `crossingAxis` property is used for CrossingAxis .
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		crossingAxis= "xAxis"
        * 		crossingValue= 700
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            if (this.i.ah == null) {
                return null;
            }
            if (!this.i.ah.externalObject) {
                var e = IgxAxisComponent._createFromInternal(this.i.ah);
                if (e) {
                    e._implementation = this.i.ah;
                }
                this.i.ah.externalObject = e;
            }
            return this.i.ah.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.ah = null : this.i.ah = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "crossingValue", {
        /**
         * Gets or sets the CrossingValue property.
        *
        * The `crossingValue` property is used for CrossingValue of the axis.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		crossingAxis= "xAxis"
        * 		crossingValue= 700
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.e4;
        },
        set: function (v) {
            this.i.e4 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titlePosition", {
        /**
         * Gets or sets the title position relative to the axis labels.
        */
        get: function () {
            return this.i.bd ? this.i.bd.position : 0;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.position = ensureEnum(AxisTitlePosition_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleTextStyle", {
        /**
         * Gets or sets the text style to use for axis labels.
        *
        * The `labelTextStyle` property Overrides the style of the text used for the axis labels.
        */
        get: function () {
            return this.i.bd ? this.i.bd.textStyle : null;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.textStyle = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleTextColor", {
        /**
         * The color of the {0}.
        *
        * The `labelTextColor` property Overrides the color of the text used for the axis labels.
        */
        get: function () {
            return brushToString(this.i.bd ? this.i.bd.textColor : null);
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.textColor = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleLocation", {
        /**
         * Gets or sets the location of the {0}.
        *
        * The `Location` property is used for the location.
        */
        get: function () {
            return this.i.bd ? this.i.bd.location : 0;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.location = ensureEnum(AxisLabelsLocation_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleVisibility", {
        /**
         * Gets or sets the visibility of the {0}.
        *
        * The `Visibility` property is used for the visibility of the axis.
        */
        get: function () {
            return this.i.bd ? this.i.bd.visibility : 0;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.visibility = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleShowFirstLabel", {
        /**
         * Gets or sets whether the first label is displayed when the zoom level is set to 1.
        *
        * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.
        */
        get: function () {
            return this.i.bd ? this.i.bd.showFirstLabel : false;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.showFirstLabel = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleAngle", {
        /**
         * Gets or sets the angle of the {0}.
        *
        * The `Angle` property is used to set the angle of the axis.
        */
        get: function () {
            return this.i.bd ? this.i.bd.angle : NaN;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.angle = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleExtent", {
        /**
         * Distance between the axis and the edge of the control.
        *
        * The `Extent` property is used for the extent.
        */
        get: function () {
            return this.i.bd ? this.i.bd.extent : NaN;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.extent = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleLeftMargin", {
        /**
         * Margin applied to the left of the {0}.
        *
        * The `labelLeftMargin` property is used for the left margin of the labels.
        */
        get: function () {
            return this.i.bd ? this.i.bd.leftMargin : NaN;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.leftMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleRightMargin", {
        /**
         * Margin applied to the right of the {0}.
        *
        * The `labelRightMargin` property is used for the right margin of the labels.
        */
        get: function () {
            return this.i.bd ? this.i.bd.rightMargin : NaN;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.rightMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleTopMargin", {
        /**
         * Margin applied above the {0}.
        *
        * The `labelTopMargin` property is used for the top margin of the labels.
        */
        get: function () {
            return this.i.bd ? this.i.bd.topMargin : NaN;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.topMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleBottomMargin", {
        /**
         * Margin applied below the {0}.
        *
        * The `labelBottomMargin` is used to set the bottom margin of the labels.
        */
        get: function () {
            return this.i.bd ? this.i.bd.bottomMargin : NaN;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.bottomMargin = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleHorizontalAlignment", {
        /**
         * Gets or sets the horizontal alignment of the {0}.
        *
        * The `HorizontalAlignment` property is used for the horizontal alignment.
        */
        get: function () {
            return this.i.bd ? this.i.bd.horizontalAlignment : 0;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "titleVerticalAlignment", {
        /**
         * Gets or sets the vertical alignment of the {0}.
        *
        * The `VerticalAlignment` property is used for the vertical alignment of the axis.
        */
        get: function () {
            return this.i.bd ? this.i.bd.verticalAlignment : 0;
        },
        set: function (v) {
            this.ensureTitleSettings();
            this.i.bd.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.ensureTitleSettings = function () {
        if (this.i.bd) {
            return;
        }
        this.i.bd = new TitleSettings();
        this.i.bd.location = this.i.az();
        this.i.bd.angle = this.i.ds();
        this.i.bd.leftMargin = this.i.du();
        this.i.bd.rightMargin = this.i.dv();
        this.i.bd.topMargin = this.i.dw();
        this.i.bd.bottomMargin = this.i.dt();
        this.i.bd.horizontalAlignment = this.i.im();
        this.i.bd.verticalAlignment = this.i.jg();
    };
    Object.defineProperty(IgxAxisComponent.prototype, "annotations", {
        /**
         * Gets the current annotations for the axis.
        */
        get: function () {
            if (this._annotations === null) {
                var coll = new IgxAxisAnnotationCollection();
                var innerColl = this.i.al;
                if (!innerColl) {
                    innerColl = new AxisAnnotationCollection_internal();
                }
                this._annotations = coll._fromInner(innerColl);
            }
            return this._annotations;
        },
        set: function (v) {
            if (this._annotations !== null) {
                this._annotations._setSyncTarget(null);
                this._annotations = null;
            }
            var coll = new IgxAxisAnnotationCollection();
            this._annotations = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(IAxisAnnotation_$type);
            var innerColl = this.i.al;
            if (!innerColl) {
                innerColl = new AxisAnnotationCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._annotations._setSyncTarget(syncColl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "coercionMethods", {
        /**
         * Gets or sets the coercion methods to use when loading data from data sources.
         * Should be specified before setting any member paths, if being used. Setting it later
         * will not cause data to be re-imported into the chart.
        *
        * The	`coercionMethods` methods is to use when loading data from data sources. Should be specified before setting any member paths, if being used.
        * Setting it later will not cause data to be reimported into the chart.
        */
        get: function () {
            return this.i.coercionMethods;
        },
        set: function (v) {
            this.i.coercionMethods = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "expectFunctions", {
        /**
         * Gets or sets whether the series should expect that properties in its items source may be functions that need to be
         * evaluated to yield their value. This defaults to false, as there will be a subtle performance impact to using this feature.
         * This value must be set before assigning an item's source to take effect.
        */
        get: function () {
            return this.i.expectFunctions;
        },
        set: function (v) {
            this.i.expectFunctions = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "label", {
        /**
         * Gets or sets the axis label format string.
        *
        * The `label` property is used for label mapping of the axis labels.
        */
        get: function () {
            return this.i.e9;
        },
        set: function (v) {
            this.i.e9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelFormat", {
        /**
         * Gets or sets the label format string to use for the label.
        */
        get: function () {
            return this.i.fo;
        },
        set: function (v) {
            this.i.fo = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "labelFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the LabelFormat string.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = v;
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.findByName = function (name) {
        if (this.crossingAxis && this.crossingAxis.name && this.crossingAxis.name == name) {
            return this.crossingAxis;
        }
        if (this.annotations != null && this.annotations.findByName && this.annotations.findByName(name)) {
            return this.annotations.findByName(name);
        }
        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
            return arrayFindByName(this.labelFormatSpecifiers, name);
        }
        return null;
    };
    Object.defineProperty(IgxAxisComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxAxisComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("AxisComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.crossingAxis && this.crossingAxis._styling) {
            this.crossingAxis._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Renders the axis with no animation.

*/
    IgxAxisComponent.prototype.renderAxis = function () {
        this.i.ha();
    };
    /**
     * If using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
    
    */
    IgxAxisComponent.prototype.resetCachedEnhancedInterval = function () {
        this.i.hd();
    };
    IgxAxisComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.e6(item, memberPathName);
        return (iv);
    };
    /**
     * Gets the label for a data item.
    
    * @param value  * The unscaled value to get a label for.
    */
    IgxAxisComponent.prototype.getValueLabel = function (value) {
        var iv = this.i.fl(value);
        return (iv);
    };
    /**
     * Scales a value from axis space into screen space.
    
    * @param unscaledValue  * The unscaled axis value to scale.
    */
    IgxAxisComponent.prototype.scaleValue = function (unscaledValue) {
        var iv = this.i.ed(unscaledValue);
        return (iv);
    };
    Object.defineProperty(IgxAxisComponent.prototype, "rangeChanged", {
        /**
         * Occurs when the axis range changes.
        */
        get: function () {
            var _this = this;
            if (this._rangeChanged == null) {
                this._rangeChanged = new EventEmitter();
                this.i.rangeChanged = delegateCombine(this.i.rangeChanged, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxAxisRangeChangedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeRangeChanged) {
                            _this.beforeRangeChanged(_this, outerArgs);
                        }
                        _this._rangeChanged.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._rangeChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAxisComponent.prototype, "renderRequested", {
        /**
         * This event is raised every time a render has been requested from a series.
        */
        get: function () {
            var _this = this;
            if (this._renderRequested == null) {
                this._renderRequested = new EventEmitter();
                this.i.renderRequested = delegateCombine(this.i.renderRequested, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxRenderRequestedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeRenderRequested) {
                            _this.beforeRenderRequested(_this, outerArgs);
                        }
                        _this._renderRequested.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._renderRequested;
        },
        enumerable: true,
        configurable: true
    });
    IgxAxisComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "name", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], IgxAxisComponent.prototype, "formatLabel", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "title", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "stroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "actualStroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "strokeThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "strip", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "majorStroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "actualMajorStroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "majorStrokeThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "minorStroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "actualMinorStroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "minorStrokeThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "tickStroke", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "tickStrokeThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "tickLength", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxAxisComponent.prototype, "isDisabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxAxisComponent.prototype, "isInverted", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxAxisComponent.prototype, "useEnhancedIntervalManagement", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "enhancedIntervalMinimumCharacters", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "labelTextStyle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "labelTextColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelLocation", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelVisibility", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxAxisComponent.prototype, "labelShowFirstLabel", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelAngle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelExtent", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelLeftMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelRightMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelTopMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelBottomMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelHorizontalAlignment", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "labelVerticalAlignment", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxAxisComponent),
        tslib_1.__metadata("design:paramtypes", [IgxAxisComponent])
    ], IgxAxisComponent.prototype, "crossingAxis", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxAxisComponent.prototype, "crossingValue", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titlePosition", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "titleTextStyle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "titleTextColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleLocation", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleVisibility", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxAxisComponent.prototype, "titleShowFirstLabel", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleAngle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleExtent", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleLeftMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleRightMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleTopMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleBottomMargin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleHorizontalAlignment", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxAxisComponent.prototype, "titleVerticalAlignment", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxAxisAnnotationCollection),
        tslib_1.__metadata("design:paramtypes", [IgxAxisAnnotationCollection])
    ], IgxAxisComponent.prototype, "annotations", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxAxisComponent.prototype, "coercionMethods", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxAxisComponent.prototype, "expectFunctions", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxAxisComponent.prototype, "label", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxAxisComponent.prototype, "labelFormat", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], IgxAxisComponent.prototype, "labelFormatSpecifiers", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxAxisComponent.prototype, "rangeChanged", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxAxisComponent.prototype, "renderRequested", null);
    return IgxAxisComponent;
}());
export { IgxAxisComponent };
//# sourceMappingURL=igx-axis-component.js.map