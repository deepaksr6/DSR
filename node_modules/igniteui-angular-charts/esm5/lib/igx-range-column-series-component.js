import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxHorizontalRangeCategorySeriesComponent } from "./igx-horizontal-range-category-series-component";
import { IgxRangeCategorySeriesComponent } from "./igx-range-category-series-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { RangeColumnSeries } from "./RangeColumnSeries";
import { toPoint, fromRect } from "igniteui-angular-core";
/**
 * Represents a IgxDataChartComponent range column series.
*
* The `IgxRangeColumnSeriesComponent` class represents range column series of the IgxDataChartComponent.
*
* ```html
* <igx-data-chart  #chart
*     [dataSource]="data">
*     <igx-category-x-axis
*     label="label"
*     #xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
*     minimumValue="0"
*     #yAxis>
*     </igx-numeric-y-axis>
*     <igx-range-column-series
*     [xAxis]="xAxis"
*     [yAxis]="yAxis"
*     highMemberPath="high"
*     lowMemberPath="low">
* </igx-range-column-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxRangeColumnSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.highMemberPath = "high";
* series.lowMemberPath = "low";
* this.chart.series.add(series);
* ```
*/
export var IgxRangeColumnSeriesComponent_PROVIDERS = [{ provide: IgxHorizontalRangeCategorySeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent; }) }, { provide: IgxRangeCategorySeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent; }) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent; }) }];
var IgxRangeColumnSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxRangeColumnSeriesComponent, _super);
    function IgxRangeColumnSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxRangeColumnSeriesComponent_1 = IgxRangeColumnSeriesComponent;
    IgxRangeColumnSeriesComponent.prototype.createImplementation = function () {
        return new RangeColumnSeries();
    };
    Object.defineProperty(IgxRangeColumnSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRangeColumnSeriesComponent.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        *
        * Use the `radiusX` property to round the corners of the column.
        *
        * ```html
        * <igx-data-chart  #chart
        *     [dataSource]="data"
        *     >
        *     <igx-category-x-axis
        *     label="label"
        *     #xAxis
        *     >
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *     minimumValue="0"
        *     #yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-range-column-series
        *     [xAxis]="xAxis"
        *     [yAxis]="yAxis"
        *     highMemberPath="high"
        *     lowMemberPath="low"
        *     radiusX="10">
        * </igx-range-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.radiusX=10;
        * ```
        */
        get: function () {
            return this.i.po;
        },
        set: function (v) {
            this.i.po = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRangeColumnSeriesComponent.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        *
        * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.
        *
        * ```html
        * <igx-data-chart  #chart
        *     [dataSource]="data"
        *     >
        *     <igx-category-x-axis
        *     label="label"
        *     #xAxis
        *     >
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *     minimumValue="0"
        *     #yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-range-column-series
        *
        *     [xAxis]="xAxis"
        *     [yAxis]="yAxis"
        *     highMemberPath="high"
        *     lowMemberPath="low"
        *     radiusY= "10">
        * </igx-range-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.radiusY=10;
        * ```
        */
        get: function () {
            return this.i.pp;
        },
        set: function (v) {
            this.i.pp = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    *
    * The `getSeriesValueBoundingBox` method return the best available value of the bounding box within the series.
    *
    * ```ts
    * series.getSeriesValueBoundingBox(world :IgxPoint) : IgxRect
    * ```
    */
    IgxRangeColumnSeriesComponent.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.lv(toPoint(world));
        return fromRect(iv);
    };
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    *
    * The `getItemSpan` method returns the current width of the items within the categories.
    *
    * ```ts
    * var x =series.getItemSpan();
    * ```
    */
    IgxRangeColumnSeriesComponent.prototype.getItemSpan = function () {
        var iv = this.i.eg();
        return (iv);
    };
    var IgxRangeColumnSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxRangeColumnSeriesComponent.prototype, "radiusX", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxRangeColumnSeriesComponent.prototype, "radiusY", null);
    IgxRangeColumnSeriesComponent = IgxRangeColumnSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-range-column-series',
            template: "",
            providers: [{ provide: IgxHorizontalRangeCategorySeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent_1; }) }, { provide: IgxRangeCategorySeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent_1; }) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent_1; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxRangeColumnSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxRangeColumnSeriesComponent);
    return IgxRangeColumnSeriesComponent;
}(IgxHorizontalRangeCategorySeriesComponent));
export { IgxRangeColumnSeriesComponent };
//# sourceMappingURL=igx-range-column-series-component.js.map