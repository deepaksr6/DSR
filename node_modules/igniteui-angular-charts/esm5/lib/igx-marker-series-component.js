import * as tslib_1 from "tslib";
import { forwardRef, Input } from '@angular/core';
import { MarkerType, MarkerType_$type } from "./MarkerType";
import { IgxSeriesComponent } from "./igx-series-component";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
/**
 * Represents the base class for series containing markers.
*
* MarkerSeries represents the base class for series containing markers.
*
* Example:
*
* ```html
* <igx-data-chart
*     [dataSource]="data">
* 	<igx-category-x-axis
*         label="label"
*         #xAxis
*         >
*       </igx-category-x-axis>
*       <igx-numeric-y-axis
*         minimumValue="0"
*         #yAxis>
*       </igx-numeric-y-axis>
* 	 <igx-column-series
*         #series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*      valueMemberPath="value">
*      </igx-column-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series: IgxMarkerSeriesComponent = new IgxMarkerSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.valueMemberPath = "value";
* this.chart.series.add(series);
* ```
*/
export var IgxMarkerSeriesComponent_PROVIDERS = [{ provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxMarkerSeriesComponent; }) }];
var IgxMarkerSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxMarkerSeriesComponent, _super);
    function IgxMarkerSeriesComponent() {
        return _super.call(this) || this;
    }
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "hasMarkers", {
        /**
         * Returns whether the current series supports visual markers.
        *
        * `hasMarkers` property is overriden, it returns whether the current series supports visual markers. You can use it like this:
        *
        * ```ts
        *  let gotMarkers: boolean = this.series.hasMarkers;
        * ```
        */
        get: function () {
            return this.i.hasMarkers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        *
        * `markerType` property gets or sets the marker type for the current series object. For example, you can set it like this:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        * 	 <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *         #yAxis>
        *     </igx-numeric-y-axis>
        * 	 <igx-column-series
        *         #series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *      valueMemberPath="value"
        * 	 markerType = "circle">
        *      </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * this.series.markerType = "circle";
        * ```
        */
        get: function () {
            return this.i.l2;
        },
        set: function (v) {
            this.i.l2 = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        *
        * `markerTemplate` property gets or sets the MarkerTemplate for the current series object. For example, you can use it like this:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        * 	<igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *       </igx-category-x-axis>
        *       <igx-numeric-y-axis #yAxis>
        *       </igx-numeric-y-axis>
        * 	 <igx-column-series
        *         #series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *      valueMemberPath="value"
        * 	 markerTemplate="circleMarkerTemplate">
        *      </igx-column-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.mn;
        },
        set: function (v) {
            this.i.mn = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.l7;
        },
        set: function (v) {
            this.i.l7 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "actualMarkerTemplate", {
        /**
         * Gets the effective marker template for the current series object.
        *
        * `actualMarkerTemplate` property gets the effective marker template for the current series object. You can use it like this:
        *
        * ```ts
        *  let effectiveMarkerTemplate: IgxDataTemplate = this.series.actualMarkerTemplate;
        * ```
        */
        get: function () {
            return this.i.ml;
        },
        set: function (v) {
            this.i.ml = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        *
        * `markerBrush` property gets or sets the brush that specifies how the current series object's marker interiors are painted. You can use it like this:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        * 	<igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *       </igx-category-x-axis>
        *       <igx-numeric-y-axis #yAxis>
        *       </igx-numeric-y-axis>
        * 	 <igx-column-series
        *         #series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *      valueMemberPath="value"
        * 	 markerBrush = "blue">
        *      </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * this.series.markerBrush = "red";
        * ```
        */
        get: function () {
            return brushToString(this.i.m1);
        },
        set: function (v) {
            this.i.m1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "actualMarkerBrush", {
        /**
         * Gets the effective marker brush for the current series object.
        *
        * `actualMarkerBrush` property gets the effective marker brush for the current series object. For example, you can use it like this:
        *
        * ```ts
        *  let effectiveMarkerBrush: string = this.series.actualMarkerBrush;
        *
        * ```
        */
        get: function () {
            return brushToString(this.i.mz);
        },
        set: function (v) {
            this.i.mz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        *
        * `markerOutline` property gets or sets the brush that specifies how the current series object's marker outlines are painted. You can use it like this:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        * 	<igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *       </igx-category-x-axis>
        *       <igx-numeric-y-axis #yAxis>
        *       </igx-numeric-y-axis>
        * 	 <igx-column-series
        *         #series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *      valueMemberPath="value"
        * 	 markerOutline = "blue">
        *      </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * this.series.markerOutline = "red";
        * ```
        */
        get: function () {
            return brushToString(this.i.m2);
        },
        set: function (v) {
            this.i.m2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMarkerSeriesComponent.prototype, "actualMarkerOutline", {
        /**
         * Gets the effective marker outline for the current series object.
        *
        *     `ActualMarkerOutline` property gets the effective marker outline for the current series object. You can use it like this:
        *
        * ```ts
        *  let effectiveMarkerOutline: string = this.series.actualMarkerOutline;
        *
        * ```
        */
        get: function () {
            return brushToString(this.i.m0);
        },
        set: function (v) {
            this.i.m0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxMarkerSeriesComponent.prototype, "markerType", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxMarkerSeriesComponent.prototype, "markerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxMarkerSeriesComponent.prototype, "markerThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxMarkerSeriesComponent.prototype, "actualMarkerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxMarkerSeriesComponent.prototype, "markerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxMarkerSeriesComponent.prototype, "actualMarkerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxMarkerSeriesComponent.prototype, "markerOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxMarkerSeriesComponent.prototype, "actualMarkerOutline", null);
    return IgxMarkerSeriesComponent;
}(IgxSeriesComponent));
export { IgxMarkerSeriesComponent };
//# sourceMappingURL=igx-marker-series-component.js.map