import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxValueBrushScaleComponent } from "./igx-value-brush-scale-component";
import { IgxContourValueResolverComponent } from "./igx-contour-value-resolver-component";
import { IgxScatterTriangulationSeriesComponent } from "./igx-scatter-triangulation-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterContourSeries } from "./ScatterContourSeries";
/**
 * Series class for rendering isarithmic contours based on a triangulation of X+Y+Value points in the ItemsSource.
*/
export var IgxScatterContourSeriesComponent_PROVIDERS = [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent; }) }];
var IgxScatterContourSeriesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxScatterContourSeriesComponent, _super);
    function IgxScatterContourSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxScatterContourSeriesComponent_1 = IgxScatterContourSeriesComponent;
    IgxScatterContourSeriesComponent.prototype.createImplementation = function () {
        return new ScatterContourSeries();
    };
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "valueMemberPath", {
        /**
         * Gets or set the name of the property from which to retrieve the numeric values from the ItemsSource items.
        */
        get: function () {
            return this.i.nq;
        },
        set: function (v) {
            this.i.nq = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "fillScale", {
        /**
         * Gets or sets the ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
        */
        get: function () {
            if (this.i.nl == null) {
                return null;
            }
            if (!this.i.nl.externalObject) {
                var e = IgxValueBrushScaleComponent._createFromInternal(this.i.nl);
                if (e) {
                    e._implementation = this.i.nl;
                }
                this.i.nl.externalObject = e;
            }
            return this.i.nl.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.nl = null : this.i.nl = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "valueResolver", {
        /**
         * Gets or set the ContourValueResolver used to determine the numeric values of contours.
        */
        get: function () {
            if (this.i.nj == null) {
                return null;
            }
            if (!this.i.nj.externalObject) {
                var e = IgxContourValueResolverComponent._createFromInternal(this.i.nj);
                if (e) {
                    e._implementation = this.i.nj;
                }
                this.i.nj.externalObject = e;
            }
            return this.i.nj.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.nj = null : this.i.nj = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgxScatterContourSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    };
    IgxScatterContourSeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgxScatterContourSeriesComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fs(item, memberPathName);
        return (iv);
    };
    var IgxScatterContourSeriesComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxScatterContourSeriesComponent.prototype, "valueMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxValueBrushScaleComponent),
        tslib_1.__metadata("design:paramtypes", [IgxValueBrushScaleComponent])
    ], IgxScatterContourSeriesComponent.prototype, "fillScale", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", IgxContourValueResolverComponent),
        tslib_1.__metadata("design:paramtypes", [IgxContourValueResolverComponent])
    ], IgxScatterContourSeriesComponent.prototype, "valueResolver", null);
    IgxScatterContourSeriesComponent = IgxScatterContourSeriesComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-scatter-contour-series',
            template: "",
            providers: [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxScatterContourSeriesComponent);
    return IgxScatterContourSeriesComponent;
}(IgxScatterTriangulationSeriesComponent));
export { IgxScatterContourSeriesComponent };
//# sourceMappingURL=igx-scatter-contour-series-component.js.map