/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Input, forwardRef } from '@angular/core';
import { IgxAxisComponent } from './igx-axis-component';
import { toPoint, fromRect, ensureBool, NamePatcher } from "igniteui-angular-core";
export var IgxCategoryAxisBaseComponent_PROVIDERS = [{ provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxCategoryAxisBaseComponent; }) }];
/**
 * Represents the base class for all IgxDataChartComponent category-based axes.
*
* ```html
* <igx-data-chart
*     [dataSource]="data">
*
*     <igx-category-x-axis
*         label="label"
*         #xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
*         #yAxis>
*     </igx-numeric-y-axis>
*
*     <igx-column-series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value">
*     </igx-column-series>
*     <igx-column-series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value">
*       </igx-column-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxColumnSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.valueMemberPath="value";
* this.chart.series.add(series);
* ```
*/
var IgxCategoryAxisBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxCategoryAxisBaseComponent, _super);
    function IgxCategoryAxisBaseComponent() {
        var _this = _super.call(this) || this;
        _this._chartLevelData = null;
        _this._dataSource = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        return _this;
    }
    IgxCategoryAxisBaseComponent.prototype.provideData = function (data) {
        this._chartLevelData = data;
        this.updateDataSource();
    };
    IgxCategoryAxisBaseComponent.prototype.updateDataSource = function () {
        if (this._dataSource == null) {
            this.i.itemsSource = this._chartLevelData;
        }
        else {
            this.i.itemsSource = this._dataSource;
        }
    };
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "dataSource", {
        get: function () {
            if (this._dataSource != null) {
                return this._dataSource;
            }
            return this.i.itemsSource;
        },
        set: function (value) {
            this._dataSource = value;
            this.updateDataSource();
            //console.log("setting axis data source: " + value)
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "i", {
        /**
                                 * @hidden
                                 */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "isContinuous", {
        /**
     * Gets if the current axis is a continuous rather than a discrete scale
    */
        get: function () {
            return this.i.b6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "isCategory", {
        /**
         * Checks if the axis is of category axis type
        */
        get: function () {
            return this.i.b4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "itemsCount", {
        /**
         * Gets the number of items in the current category axis items source.
        */
        get: function () {
            return this.i.j6;
        },
        set: function (v) {
            this.i.j6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "gap", {
        /**
         * Gets or sets the amount of space between adjacent categories for the current axis object.
         * The gap is silently clamped to the range [0, 1] when used.
        *
        * Use the `gap` property to configure the spacing between items on a category axis with item spacing.
        *
        * A `gap` of 0 allocates no space between items.  A `gap` of 1 allocates a space between items equal to the width of one item.
        *
        * To set the item spacing to 75% the width of one item, set the `gap` to 0.75, as in this code:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         gap="0.75"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *         #yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value">
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.jv;
        },
        set: function (v) {
            this.i.jv = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "overlap", {
        /**
         * Gets or sets the amount of overlap between adjacent categories for the current axis object.
         * The overlap is silently clamped to the range [-1, 1] when used.
        *
        * Use the `overlap` property to configure the spacing between items on a category axis with item spacing and more than one series.
        *
        * An `overlap` of 0 places grouped items adjacent to each other.  An `overlap` of 1 places grouped items in the same axis space, completely overlapping.  An `overlap` of -1 places a space between grouped items equal to the width of one item.
        *
        * To place grouped items with 75% overlap, set the `overlap` to 0.75, as in this code:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        *
        *     <igx-category-x-axis
        *         label="label"
        *         overlap="0.75"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *         #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value">
        *     </igx-column-series>
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value">
        *       </igx-column-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.j2;
        },
        set: function (v) {
            this.i.j2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCategoryAxisBaseComponent.prototype, "useClusteringMode", {
        /**
         * Gets or sets whether the category axis should use clustering display mode even if no series are present that would force clustering mode.
        *
        * `useClusteringMode` applies grouping and spacing to a category axis equivalent to the grouping that occurs when grouping series, such as ColumnSeries, are used.
        *
        * Try setting it on an axis displaying financial series to adjust the spacing on the left and right sides of the axis:
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="financialData">
        *     <igx-category-x-axis
        *     label="time"
        *     useClusteringMode="true"
        *     #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *     #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *     [xAxis]="xAxis"
        *     [yAxis]="yAxis"
        *     valueMemberPath="value">
        *     </igx-column-series>
        *     <igx-financial-price-series
        *     [xAxis]="xAxis"
        *     [yAxis]="yAxis"
        *     openMemberPath="open"
        *     highMemberPath="high"
        *     lowMemberPath="low"
        *     closeMemberPath="close"
        *     volumeMemberPath="volume">
        *     </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.jq;
        },
        set: function (v) {
            this.i.jq = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgxCategoryAxisBaseComponent.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {
        var iv = this.i.k1(toPoint(point), useInterpolation, singularWidth);
        return fromRect(iv);
    };
    IgxCategoryAxisBaseComponent.prototype.getCategoryBoundingBoxHelper = function (point, useInterpolation, singularWidth, isVertical) {
        var iv = this.i.k2(toPoint(point), useInterpolation, singularWidth, isVertical);
        return fromRect(iv);
    };
    /**
     * Unscales a value from screen space into axis space.
    
    * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.
    */
    IgxCategoryAxisBaseComponent.prototype.unscaleValue = function (unscaledValue) {
        var iv = this.i.j3(unscaledValue);
        return (iv);
    };
    IgxCategoryAxisBaseComponent.prototype.notifySetItem = function (index, oldItem, newItem) {
        this.i.ko(index, oldItem, newItem);
    };
    /**
     * Used to manually notify the axis that the data source has reset or cleared its items.
    
    */
    IgxCategoryAxisBaseComponent.prototype.notifyClearItems = function () {
        this.i.kl();
    };
    IgxCategoryAxisBaseComponent.prototype.notifyInsertItem = function (index, newItem) {
        this.i.km(index, newItem);
    };
    IgxCategoryAxisBaseComponent.prototype.notifyRemoveItem = function (index, oldItem) {
        this.i.kn(index, oldItem);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxCategoryAxisBaseComponent.prototype, "dataSource", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryAxisBaseComponent.prototype, "itemsCount", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryAxisBaseComponent.prototype, "gap", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxCategoryAxisBaseComponent.prototype, "overlap", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxCategoryAxisBaseComponent.prototype, "useClusteringMode", null);
    return IgxCategoryAxisBaseComponent;
}(IgxAxisComponent));
export { IgxCategoryAxisBaseComponent };
//# sourceMappingURL=igx-category-axis-base-component.js.map