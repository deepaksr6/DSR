import * as tslib_1 from "tslib";
import { EventEmitter, Output, Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { Visibility, Visibility_$type } from "igniteui-angular-core";
import { MarkerType, MarkerType_$type } from "./MarkerType";
import { IgxPropertyUpdatedEventArgs } from "igniteui-angular-core";
import { StackedFragmentSeries } from "./StackedFragmentSeries";
import { TypeRegistrar } from "igniteui-angular-core";
import { NamePatcher, brushToString, stringToBrush, ensureBool, colorToString, stringToColor, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-angular-core";
/**
 * Represents a non-visual child of StackedSeriesBase.
*/
export var IgxStackedFragmentSeriesComponent_PROVIDERS = [];
var IgxStackedFragmentSeriesComponent = /** @class */ (function () {
    function IgxStackedFragmentSeriesComponent() {
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._propertyUpdated = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgxStackedFragmentSeriesComponent.prototype.createImplementation = function () {
        return new StackedFragmentSeries();
    };
    IgxStackedFragmentSeriesComponent.prototype.ngOnInit = function () {
    };
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgxStackedFragmentSeriesComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgxStackedFragmentSeriesComponent.prototype.onImplementationCreated = function () {
    };
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "brush", {
        /**
         * Gets or sets the brush of the stacked fragment.
        */
        get: function () {
            return brushToString(this.i.fu);
        },
        set: function (v) {
            this.i.fu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualBrush", {
        /**
         * Gets the actual brush used by the series.
        */
        get: function () {
            return brushToString(this.i.fp);
        },
        set: function (v) {
            this.i.fp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "isDropShadowEnabled", {
        /**
         * Gets or sets whether drop shadow should be enabled for this series.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualIsDropShadowEnabled", {
        /**
         * Gets whether drop shadow is actually enabled for this series.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "shadowBlur", {
        /**
         * Gets or sets the shadow blur.
         * This property is ignored when StackedFragmentSeries.UseSingleShadow is set to true.
        */
        get: function () {
            return this.i.aq;
        },
        set: function (v) {
            this.i.aq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualShadowBlur", {
        /**
         * Gets the actual shadow blur used by the series.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "shadowColor", {
        /**
         * Gets or sets the drop shadow color.
        */
        get: function () {
            return colorToString(this.i.f1);
        },
        set: function (v) {
            this.i.f1 = stringToColor(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualShadowColor", {
        /**
         * Gets actual the drop shadow color used by the series.
        */
        get: function () {
            return colorToString(this.i.f0);
        },
        set: function (v) {
            this.i.f0 = stringToColor(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "useSingleShadow", {
        /**
         * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
         * When this property is set to true, no StackedFragmentSeries.ShadowBlur is applied.
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualUseSingleShadow", {
        /**
         * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "shadowOffsetX", {
        /**
         * Gets or sets the drop shadow x-offset.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualShadowOffsetX", {
        /**
         * Gets the actual drop shadow x-offset applied to the series.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "shadowOffsetY", {
        /**
         * Gets or sets the drop shadow y-offset.
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualShadowOffsetY", {
        /**
         * Gets the actual drop shadow y-offset applied to the series.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "legendItemBadgeTemplate", {
        /**
         * Gets or sets the LegendItemBadgeTemplate property.
         * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
         * the series object itself.
        */
        get: function () {
            return this.i.du;
        },
        set: function (v) {
            this.i.du = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemBadgeTemplate", {
        /**
         * Gets the actual legend item badge template used by the series.
        */
        get: function () {
            return this.i.dr;
        },
        set: function (v) {
            this.i.dr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "legendItemTemplate", {
        /**
         * Gets or sets the LegendItemTemplate property.
         * The legend item control content is created according to the LegendItemTemplate on-demand by
         * the series object itself.
        */
        get: function () {
            return this.i.dv;
        },
        set: function (v) {
            this.i.dv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemTemplate", {
        /**
         * Gets the actual legend item template used by the series.
        */
        get: function () {
            return this.i.ds;
        },
        set: function (v) {
            this.i.ds = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "legendItemVisibility", {
        /**
         * Gets or sets the legend item visibility for the current series object.
        */
        get: function () {
            return this.i.ge;
        },
        set: function (v) {
            this.i.ge = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemVisibility", {
        /**
         * Gets the actual visibility of the legend items in the series.
        */
        get: function () {
            return this.i.gc;
        },
        set: function (v) {
            this.i.gc = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.fv);
        },
        set: function (v) {
            this.i.fv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualMarkerBrush", {
        /**
         * Gets the actual marker brush of the series.
        */
        get: function () {
            return brushToString(this.i.fq);
        },
        set: function (v) {
            this.i.fq = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.fw);
        },
        set: function (v) {
            this.i.fw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualMarkerOutline", {
        /**
         * Gets the actual marker outline of the series.
        */
        get: function () {
            return brushToString(this.i.fr);
        },
        set: function (v) {
            this.i.fr = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.dw;
        },
        set: function (v) {
            this.i.dw = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualMarkerTemplate", {
        /**
         * Gets the actual marker template used by the series.
        */
        get: function () {
            return this.i.dt;
        },
        set: function (v) {
            this.i.dt = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualMarkerType", {
        /**
         * Gets the actual marker type set used in the series.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "name", {
        /**
         * Gets or sets the Name of the stacked fragment.
        */
        get: function () {
            return this.i.b8;
        },
        set: function (v) {
            this.i.b8 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "opacity", {
        /**
         * Gets or sets the Opacity of the stacked fragment.
        */
        get: function () {
            return this.i.an;
        },
        set: function (v) {
            this.i.an = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualOpacity", {
        /**
         * Gets the series opacity.
        */
        get: function () {
            return this.i.af;
        },
        set: function (v) {
            this.i.af = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "outline", {
        /**
         * Gets or sets the brush to use for the outline of the series.
         * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
        */
        get: function () {
            return brushToString(this.i.fy);
        },
        set: function (v) {
            this.i.fy = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualOutline", {
        /**
         * Gets the series outline.
        */
        get: function () {
            return brushToString(this.i.ft);
        },
        set: function (v) {
            this.i.ft = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "areaFillOpacity", {
        /**
         * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.
        */
        get: function () {
            return this.i.am;
        },
        set: function (v) {
            this.i.am = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualAreaFillOpacity", {
        /**
         * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.
        */
        get: function () {
            return this.i.ae;
        },
        set: function (v) {
            this.i.ae = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
        */
        get: function () {
            return this.i.ao;
        },
        set: function (v) {
            this.i.ao = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualRadiusX", {
        /**
         * Gets the actual corner radius of the series
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
        */
        get: function () {
            return this.i.ap;
        },
        set: function (v) {
            this.i.ap = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualRadiusY", {
        /**
         * Gets the actual corner radius of the series
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            this.i.ah = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "thickness", {
        /**
         * Gets or sets the width of the current series object's line thickness.
        */
        get: function () {
            return this.i.at;
        },
        set: function (v) {
            this.i.at = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualThickness", {
        /**
         * Gets or sets the thickness of this stacked fragment.
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "title", {
        /**
         * Gets or sets the Title property.
         * The legend item control is created according to the Title on-demand by
         * the series object itself.
        */
        get: function () {
            return this.i.ax;
        },
        set: function (v) {
            this.i.ax = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "valueMemberPath", {
        /**
         * Gets or sets the value mapping property for the current series object.
        */
        get: function () {
            return this.i.cq;
        },
        set: function (v) {
            this.i.cq = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "visibility", {
        /**
         * Gets or sets the Visibility of the stacked fragment.
        */
        get: function () {
            return this.i.gf;
        },
        set: function (v) {
            this.i.gf = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "actualVisibility", {
        /**
         * Gets the actual visibility of the stacked fragment.
        */
        get: function () {
            return this.i.gd;
        },
        set: function (v) {
            this.i.gd = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "parentOrLocalBrush", {
        /**
         * Gets the resolved brush used between the local series and the parent series.
        */
        get: function () {
            return brushToString(this.i.fz);
        },
        set: function (v) {
            this.i.fz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    IgxStackedFragmentSeriesComponent.prototype.findByName = function (name) {
        return null;
    };
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgxStackedFragmentSeriesComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxStackedFragmentSeriesComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("StackedFragmentSeriesComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    Object.defineProperty(IgxStackedFragmentSeriesComponent.prototype, "propertyUpdated", {
        /**
         * Event raised when a property (including "effective" and non-dependency property) value changes.
        */
        get: function () {
            var _this = this;
            if (this._propertyUpdated == null) {
                this._propertyUpdated = new EventEmitter();
                this.i.propertyUpdated = delegateCombine(this.i.propertyUpdated, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxPropertyUpdatedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforePropertyUpdated) {
                            _this.beforePropertyUpdated(_this, outerArgs);
                        }
                        _this._propertyUpdated.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._propertyUpdated;
        },
        enumerable: true,
        configurable: true
    });
    IgxStackedFragmentSeriesComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "brush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxStackedFragmentSeriesComponent.prototype, "isDropShadowEnabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualIsDropShadowEnabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "shadowBlur", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualShadowBlur", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "shadowColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualShadowColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxStackedFragmentSeriesComponent.prototype, "useSingleShadow", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualUseSingleShadow", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "shadowOffsetX", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualShadowOffsetX", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "shadowOffsetY", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualShadowOffsetY", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "legendItemBadgeTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemBadgeTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "legendItemTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "legendItemVisibility", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualLegendItemVisibility", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "markerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerBrush", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "markerOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "markerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "markerType", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualMarkerType", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "name", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "opacity", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualOpacity", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "outline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualOutline", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "areaFillOpacity", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualAreaFillOpacity", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "radiusX", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualRadiusX", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "radiusY", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualRadiusY", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "thickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualThickness", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxStackedFragmentSeriesComponent.prototype, "title", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "valueMemberPath", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "visibility", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxStackedFragmentSeriesComponent.prototype, "actualVisibility", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxStackedFragmentSeriesComponent.prototype, "parentOrLocalBrush", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxStackedFragmentSeriesComponent.prototype, "propertyUpdated", null);
    IgxStackedFragmentSeriesComponent = tslib_1.__decorate([
        Component({
            selector: 'igx-stacked-fragment-series',
            template: "",
            providers: [],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxStackedFragmentSeriesComponent);
    return IgxStackedFragmentSeriesComponent;
}());
export { IgxStackedFragmentSeriesComponent };
//# sourceMappingURL=igx-stacked-fragment-series-component.js.map