import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericAngleAxis } from "./NumericAngleAxis";
/**
 * Represents a IgxDataChartComponent angle based axis for polar series.
*/
export var IgxNumericAngleAxisComponent_PROVIDERS = [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent; }) }];
var IgxNumericAngleAxisComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxNumericAngleAxisComponent, _super);
    function IgxNumericAngleAxisComponent() {
        return _super.call(this) || this;
    }
    IgxNumericAngleAxisComponent_1 = IgxNumericAngleAxisComponent;
    IgxNumericAngleAxisComponent.prototype.createImplementation = function () {
        return new NumericAngleAxis();
    };
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "isAngular", {
        /**
         * Gets if the current axis is of angular axis type
        */
        get: function () {
            return this.i.b2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "startAngleOffset", {
        /**
         * Indicates the angle in degress that the chart's 0th angle should be offset.
        */
        get: function () {
            return this.i.lt;
        },
        set: function (v) {
            this.i.lt = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the scaled angle value in radians based on the raw input.
    
    * @param unscaledValue  * The raw input value.
    */
    IgxNumericAngleAxisComponent.prototype.getScaledAngle = function (unscaledValue) {
        var iv = this.i.getScaledAngle(unscaledValue);
        return (iv);
    };
    /**
     * Gets the raw axis value back from the angle that would be used on the chart.
    
    * @param scaledValue  * The chart angle value.
    */
    IgxNumericAngleAxisComponent.prototype.getUnscaledAngle = function (scaledValue) {
        var iv = this.i.getUnscaledAngle(scaledValue);
        return (iv);
    };
    var IgxNumericAngleAxisComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxNumericAngleAxisComponent.prototype, "startAngleOffset", null);
    IgxNumericAngleAxisComponent = IgxNumericAngleAxisComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-numeric-angle-axis',
            template: "",
            providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent_1; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxNumericAngleAxisComponent);
    return IgxNumericAngleAxisComponent;
}(IgxNumericAxisBaseComponent));
export { IgxNumericAngleAxisComponent };
//# sourceMappingURL=igx-numeric-angle-axis-component.js.map