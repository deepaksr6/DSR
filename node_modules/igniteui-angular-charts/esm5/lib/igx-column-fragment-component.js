import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxFragmentBaseComponent } from "./igx-fragment-base-component";
import { IgxHorizontalAnchoredCategorySeriesComponent } from "./igx-horizontal-anchored-category-series-component";
import { IgxAnchoredCategorySeriesComponent } from "./igx-anchored-category-series-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ColumnFragment } from "./ColumnFragment";
import { toPoint, fromRect } from "igniteui-angular-core";
/**
 * Represents one part of a StackedColumnSeries.
*/
export var IgxColumnFragmentComponent_PROVIDERS = [{ provide: IgxFragmentBaseComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent; }) }, { provide: IgxHorizontalAnchoredCategorySeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent; }) }, { provide: IgxAnchoredCategorySeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent; }) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent; }) }];
var IgxColumnFragmentComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnFragmentComponent, _super);
    function IgxColumnFragmentComponent() {
        return _super.call(this) || this;
    }
    IgxColumnFragmentComponent_1 = IgxColumnFragmentComponent;
    IgxColumnFragmentComponent.prototype.createImplementation = function () {
        return new ColumnFragment();
    };
    Object.defineProperty(IgxColumnFragmentComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnFragmentComponent.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.qx;
        },
        set: function (v) {
            this.i.qx = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnFragmentComponent.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.qy;
        },
        set: function (v) {
            this.i.qy = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnFragmentComponent.prototype, "fragmentXAxis", {
        /**
         * Gets or sets the effective x-axis for this series.
        */
        get: function () {
            if (this.i.fragmentXAxis == null) {
                return null;
            }
            if (!this.i.fragmentXAxis.externalObject) {
                var e = IgxCategoryAxisBaseComponent._createFromInternal(this.i.fragmentXAxis);
                if (e) {
                    e._implementation = this.i.fragmentXAxis;
                }
                this.i.fragmentXAxis.externalObject = e;
            }
            return this.i.fragmentXAxis.externalObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnFragmentComponent.prototype, "fragmentYAxis", {
        /**
         * Gets or sets the effective y-axis for this series.
        */
        get: function () {
            if (this.i.fragmentYAxis == null) {
                return null;
            }
            if (!this.i.fragmentYAxis.externalObject) {
                var e = IgxNumericAxisBaseComponent._createFromInternal(this.i.fragmentYAxis);
                if (e) {
                    e._implementation = this.i.fragmentYAxis;
                }
                this.i.fragmentYAxis.externalObject = e;
            }
            return this.i.fragmentYAxis.externalObject;
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnFragmentComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.fragmentXAxis && this.fragmentXAxis._styling) {
            this.fragmentXAxis._styling(container, component, this);
        }
        if (this.fragmentYAxis && this.fragmentYAxis._styling) {
            this.fragmentYAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    IgxColumnFragmentComponent.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.lv(toPoint(world));
        return fromRect(iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgxColumnFragmentComponent.prototype.getItem = function (world) {
        var iv = this.i.fp(toPoint(world));
        return (iv);
    };
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    IgxColumnFragmentComponent.prototype.getItemIndex = function (world) {
        var iv = this.i.e8(toPoint(world));
        return (iv);
    };
    var IgxColumnFragmentComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxColumnFragmentComponent.prototype, "radiusX", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxColumnFragmentComponent.prototype, "radiusY", null);
    IgxColumnFragmentComponent = IgxColumnFragmentComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'igx-column-fragment',
            template: "",
            providers: [{ provide: IgxFragmentBaseComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent_1; }) }, { provide: IgxHorizontalAnchoredCategorySeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent_1; }) }, { provide: IgxAnchoredCategorySeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent_1; }) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent_1; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent_1; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxColumnFragmentComponent_1; }) }],
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IgxColumnFragmentComponent);
    return IgxColumnFragmentComponent;
}(IgxFragmentBaseComponent));
export { IgxColumnFragmentComponent };
//# sourceMappingURL=igx-column-fragment-component.js.map