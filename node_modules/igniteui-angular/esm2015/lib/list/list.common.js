import { Directive, TemplateRef, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
export class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
    }
}
IgxListBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListBase]'
            },] }
];
IgxListBaseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
export class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxEmptyListTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxEmptyList]'
            },] }
];
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDataLoadingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDataLoading]'
            },] }
];
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemLeftPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemLeftPanning]'
            },] }
];
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemRightPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemRightPanning]'
            },] }
];
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvaWduaXRldWktYW5ndWxhci9pZ25pdGV1aS1hbmd1bGFyL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2xpc3QvbGlzdC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQTJCLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLGtCQUFrQixFQUEwQixtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBUWxHLGNBQWM7QUFJZCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsa0JBQWtCO0lBWXhELFlBQStELHNCQUE4QztRQUN6RyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUQ2QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0lBRTdHLENBQUM7OztZQWpCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7YUFDNUI7Ozs0Q0FhZ0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7O0FBS3ZELE1BQU0sQ0FBTixJQUFZLGVBQXFDO0FBQWpELFdBQVksZUFBZTtJQUFHLHFEQUFJLENBQUE7SUFBRSxxREFBSSxDQUFBO0lBQUUsdURBQUssQ0FBQTtBQUFDLENBQUMsRUFBckMsZUFBZSxLQUFmLGVBQWUsUUFBc0I7QUFLakQsTUFBTSxPQUFPLDZCQUE2QjtJQUN0QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjthQUM3Qjs7O1lBbENtQixXQUFXOztBQTBDL0IsTUFBTSxPQUFPLCtCQUErQjtJQUN4QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjthQUMvQjs7O1lBekNtQixXQUFXOztBQWlEL0IsTUFBTSxPQUFPLHVDQUF1QztJQUNoRCxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjthQUN2Qzs7O1lBaERtQixXQUFXOztBQXdEL0IsTUFBTSxPQUFPLHdDQUF3QztJQUNqRCxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjthQUN4Qzs7O1lBdkRtQixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpc3BsYXlEZW5zaXR5QmFzZSwgSURpc3BsYXlEZW5zaXR5T3B0aW9ucywgRGlzcGxheURlbnNpdHlUb2tlbiB9IGZyb20gJy4uL2NvcmUvZGVuc2l0eSc7XG5pbXBvcnQgeyBDdXJyZW50UmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi4vY29yZS9pMThuL3Jlc291cmNlcyc7XG5pbXBvcnQgeyBJTGlzdFJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4uL2NvcmUvaTE4bi9saXN0LXJlc291cmNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpc3RDaGlsZCB7XG4gICAgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RCYXNlXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBEaXNwbGF5RGVuc2l0eUJhc2Uge1xuICAgIG9uSXRlbUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFsbG93TGVmdFBhbm5pbmc6IGJvb2xlYW47XG4gICAgYWxsb3dSaWdodFBhbm5pbmc6IGJvb2xlYW47XG4gICAgcGFuRW5kVHJpZ2dlcmluZ1RocmVzaG9sZDogbnVtYmVyO1xuICAgIG9uTGVmdFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25SaWdodFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25QYW5TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hpbGRyZW46IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGxpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuICAgIGxpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGU6IElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KERpc3BsYXlEZW5zaXR5VG9rZW4pIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKF9kaXNwbGF5RGVuc2l0eU9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gSWd4TGlzdFBhblN0YXRlIHsgTk9ORSwgTEVGVCwgUklHSFQgfVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hFbXB0eUxpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hFbXB0eUxpc3RUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGF0YUxvYWRpbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRhTG9hZGluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbUxlZnRQYW5uaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=