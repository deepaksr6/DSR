import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
/**
 * @hidden
 */
export class IgxGroupByRowTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxGroupByRowTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGroupByRow]'
            },] }
];
IgxGroupByRowTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/**
 * @hidden
 */
export class IgxGridDetailTemplateDirective {
}
IgxGridDetailTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGridDetail]'
            },] }
];
/**
 * @hidden
 */
export class IgxRowExpandedIndicatorDirective {
}
IgxRowExpandedIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRowExpandedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxRowCollapsedIndicatorDirective {
}
IgxRowCollapsedIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRowCollapsedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxHeaderExpandIndicatorDirective {
}
IgxHeaderExpandIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHeaderExpandedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxHeaderCollapseIndicatorDirective {
}
IgxHeaderCollapseIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHeaderCollapsedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxExcelStyleHeaderIconDirective {
}
IgxExcelStyleHeaderIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxExcelStyleHeaderIcon]'
            },] }
];
/**
 * @hidden
 */
export class IgxGroupAreaDropDirective extends IgxDropDirective {
    constructor(elementRef, renderer, zone) {
        super(elementRef, renderer, zone);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.hovered = false;
    }
    onDragEnter(event) {
        const drag = event.detail.owner;
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        const grid = column.grid;
        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
            drag.icon.innerText = 'group_work';
            this.hovered = true;
        }
        else {
            drag.icon.innerText = 'block';
            this.hovered = false;
        }
    }
    onDragLeave(event) {
        const drag = event.detail.owner;
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        event.detail.owner.icon.innerText = 'block';
        this.hovered = false;
    }
    onDragDrop(event) {
        const drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            const column = drag.column;
            if (!this.columnBelongsToGrid(column)) {
                return;
            }
            const grid = column.grid;
            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,
                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });
            }
        }
    }
    closestParentByAttr(elem, attr) {
        return elem.hasAttribute(attr) ?
            elem :
            this.closestParentByAttr(elem.parentElement, attr);
    }
    columnBelongsToGrid(column) {
        const elem = this.elementRef.nativeElement;
        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');
        if (!column) {
            return false;
        }
        else {
            const grid = column.grid;
            if (!grid || grid.id !== closestGridID) {
                return false;
            }
            return true;
        }
    }
}
IgxGroupAreaDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGroupAreaDrop]'
            },] }
];
IgxGroupAreaDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
IgxGroupAreaDropDirective.propDecorators = {
    hovered: [{ type: HostBinding, args: ['class.igx-drop-area--hover',] }]
};
//# sourceMappingURL=data:application/json;base64,