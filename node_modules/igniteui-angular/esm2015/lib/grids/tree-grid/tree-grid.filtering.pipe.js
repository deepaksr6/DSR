import { Pipe } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { resolveNestedPath, parseDate } from '../../core/utils';
/** @hidden */
export class TreeGridFilteringStrategy extends BaseFilteringStrategy {
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined, grid);
    }
    filterImpl(data, expressionsTree, advancedExpressionsTree, parent, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec, grid);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    }
    getFieldValue(rec, fieldName, isDate = false) {
        const hierarchicalRecord = rec;
        let value = resolveNestedPath(hierarchicalRecord.data, fieldName);
        value = value && isDate ? parseDate(value) : value;
        return value;
    }
}
/** @hidden */
export class IgxTreeGridFilteringPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(hierarchyData, expressionsTree, filterStrategy, advancedFilteringExpressionsTree, id, pipeTrigger, filteringPipeTrigger, pinned) {
        const grid = this.gridAPI.grid;
        const state = {
            expressionsTree: expressionsTree,
            advancedExpressionsTree: advancedFilteringExpressionsTree,
            strategy: new TreeGridFilteringStrategy()
        };
        if (filterStrategy) {
            state.strategy = filterStrategy;
        }
        this.resetFilteredOutProperty(grid.records);
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            grid.setFilteredData(null, pinned);
            return hierarchyData;
        }
        const result = this.filter(hierarchyData, state, grid);
        const filteredData = [];
        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);
        grid.setFilteredData(filteredData, pinned);
        return result;
    }
    resetFilteredOutProperty(map) {
        const keys = Array.from(map.keys());
        for (let i = 0; i < keys.length; i++) {
            map.get(keys[i]).isFilteredOutParent = undefined;
        }
    }
    expandAllRecursive(grid, data, expandedStates, filteredData) {
        for (let i = 0; i < data.length; i++) {
            const rec = data[i];
            filteredData.push(rec.data);
            this.updateNonProcessedRecord(grid, rec);
            if (rec.children && rec.children.length > 0) {
                expandedStates.set(rec.rowID, true);
                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);
            }
        }
    }
    updateNonProcessedRecord(grid, record) {
        const rec = grid.records.get(record.rowID);
        rec.isFilteredOutParent = record.isFilteredOutParent;
    }
    filter(data, state, grid) {
        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree, grid);
    }
}
IgxTreeGridFilteringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridFiltering',
                pure: true
            },] }
];
IgxTreeGridFilteringPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
//# sourceMappingURL=data:application/json;base64,