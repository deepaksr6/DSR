import { __decorate } from "tslib";
import { Component, HostBinding, Input, ViewChildren, EventEmitter, Output, IterableDiffers } from '@angular/core';
import { ColumnDisplayOrder } from '../common/enums';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { DeprecateProperty } from '../../core/deprecateDecorators';
let NEXT_ID = 0;
/**
 * Providing reference to `IgxColumnActionsComponent`:
 * ```typescript
 *  @ViewChild('columnActions', { read: IgxColumnActionsComponent })
 *  public columnActions: IgxColumnActionsComponent;
 */
export class IgxColumnActionsComponent {
    constructor(differs) {
        this.differs = differs;
        this._differ = null;
        /**
         * @hidden @internal
         */
        this.actionableColumns = [];
        /**
         * @hidden @internal
         */
        this.filteredColumns = [];
        /**
         * Gets/sets the title of the column actions component.
         * @example
         * ```html
         * <igx-column-actions [title]="'Pin Columns'"></igx-column-actions>
         * ```
         */
        this.title = '';
        /**
         * @hidden @internal
         */
        this._filterColumnsPrompt = '';
        /**
         * Shows/hides the columns filtering input from the UI.
         * @example
         * ```html
         *  <igx-column-actions [hideFilter]="true"></igx-column-actions>
         * ```
         */
        this.hideFilter = false;
        /**
         * @hidden @internal
         */
        this._filterCriteria = '';
        /**
         * @hidden @internal
         */
        this._columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;
        /**
         * Gets/sets the max height of the columns area.
         * @remarks
         * The default max height is 100%.
         * @example
         * ```html
         * <igx-column-actions [columnsAreaMaxHeight]="200px"></igx-column-actions>
         * ```
         */
        this.columnsAreaMaxHeight = '100%';
        /**
         * Gets/sets the indentation of columns in the column list based on their hierarchy level.
         * @example
         * ```
         * <igx-column-actions [indentation]="15"></igx-column-actions>
         * ```
         */
        this.indentation = 30;
        /**
         * An event that is emitted after a column's checked state is changed.
         * Provides references to the `column` and the `checked` properties as event arguments.
         * ```html
         *  <igx-column-actions (onColumnToggled)="onColumnToggled($event)"></igx-column-actions>
         * ```
         */
        this.onColumnToggled = new EventEmitter();
        /**
         * @hidden @internal
         */
        this._pipeTrigger = 0;
        /**
         * Sets/Gets the css class selector.
         * By default the value of the `class` attribute is `"igx-column-actions"`.
         * ```typescript
         * let cssCLass =  this.columnHidingUI.cssClass;
         * ```
         * ```typescript
         * this.columnHidingUI.cssClass = 'column-chooser';
         * ```
         */
        this.cssClass = 'igx-column-actions';
        /**
         * @hidden @internal
         */
        this._id = `igx-column-actions-${NEXT_ID++}`;
        /**
         * @hidden @internal
         */
        this.trackChanges = (index, col) => {
            return col.field + '_' + this.actionsDirective.actionEnabledColumnsFilter(col, index, []);
        };
        this._differ = this.differs.find([]).create(this.trackChanges);
    }
    /**
     * Gets the grid columns to provide an action for.
     * @deprecated
     * @example
     * ```typescript
     * let gridColumns = this.columnActions.columns;
     * ```
     */
    get columns() {
        var _a;
        return (_a = this.grid) === null || _a === void 0 ? void 0 : _a.columns;
    }
    set columns(value) {
        if (value && value.length > 0) {
            this.grid = value[0].grid;
        }
    }
    /**
     * Gets the prompt that is displayed in the filter input.
     * @example
     * ```typescript
     * let filterColumnsPrompt = this.columnActions.filterColumnsPrompt;
     * ```
     */
    get filterColumnsPrompt() {
        return this._filterColumnsPrompt;
    }
    /**
     * Sets the prompt that is displayed in the filter input.
     * @example
     * ```html
     * <igx-column-actions [filterColumnsPrompt]="'Type here to search'"></igx-column-actions>
     * ```
     */
    set filterColumnsPrompt(value) {
        this._filterColumnsPrompt = value || '';
    }
    /**
     * Gets the value which filters the columns list.
     * @example
     * ```typescript
     * let filterCriteria =  this.columnActions.filterCriteria;
     * ```
     */
    get filterCriteria() {
        return this._filterCriteria;
    }
    /**
     * Sets the value which filters the columns list.
     * @example
     * ```html
     *  <igx-column-actions [filterCriteria]="'ID'"></igx-column-actions>
     * ```
     */
    set filterCriteria(value) {
        value = value || '';
        if (value !== this._filterCriteria) {
            this._filterCriteria = value;
            this._pipeTrigger++;
        }
    }
    /**
     * Gets the display order of the columns.
     * @example
     * ```typescript
     * let columnDisplayOrder = this.columnActions.columnDisplayOrder;
     * ```
     */
    get columnDisplayOrder() {
        return this._columnDisplayOrder;
    }
    /**
     * Sets the display order of the columns.
     * @example
     * ```typescript
     * this.columnActions.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;
     * ```
     */
    set columnDisplayOrder(value) {
        if (value && value !== this._columnDisplayOrder) {
            this._columnDisplayOrder = value;
            this._pipeTrigger++;
        }
    }
    /**
     * Gets the text of the button that unchecks all columns.
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```typescript
     * let uncheckAllText = this.columnActions.uncheckAllText;
     * ```
     */
    get uncheckAllText() {
        return this._uncheckAllText || this.actionsDirective.uncheckAllLabel;
    }
    /**
     * Sets the text of the button that unchecks all columns.
     * @example
     * ```html
     * <igx-column-actions [uncheckAllText]="'Show All'"></igx-column-actions>
     * ```
     */
    set uncheckAllText(value) {
        this._uncheckAllText = value;
    }
    /**
     * Gets the text of the button that checks all columns.
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```typescript
     * let uncheckAllText = this.columnActions.uncheckAllText;
     * ```
     */
    get checkAllText() {
        return this._checkAllText || this.actionsDirective.checkAllLabel;
    }
    /**
     * Sets the text of the button that checks all columns.
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```html
     * <igx-column-actions [checkAllText]="'Hide All'"></igx-column-actions>
     * ```
     */
    set checkAllText(value) {
        this._checkAllText = value;
    }
    /**
     * @hidden @internal
     */
    get pipeTrigger() {
        return this._pipeTrigger;
    }
    /**
     * @hidden @internal
     */
    get checkAllDisabled() {
        return this.actionsDirective.allUnchecked;
    }
    /**
     * @hidden @internal
     */
    get uncheckAllDisabled() {
        return this.actionsDirective.allChecked;
    }
    /**
     * Gets/Sets the value of the `id` attribute.
     * @remarks
     * If not provided it will be automatically generated.
     * @example
     * ```html
     * <igx-column-actions [id]="'igx-actions-1'"></igx-column-actions>
     * ```
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * @hidden @internal
     */
    get titleID() {
        return this.id + '_title';
    }
    /**
     * @hidden @internal
     */
    ngDoCheck() {
        var _a;
        if (this._differ) {
            const changes = this._differ.diff((_a = this.grid) === null || _a === void 0 ? void 0 : _a.columns);
            if (changes) {
                this._pipeTrigger++;
            }
        }
    }
    /**
     * Unchecks all columns and performs the appropriate action.
     * @example
     * ```typescript
     * this.columnActions.uncheckAllColumns();
     * ```
     */
    uncheckAllColumns() {
        this.actionsDirective.uncheckAll();
    }
    /**
     * Checks all columns and performs the appropriate action.
     * @example
     * ```typescript
     * this.columnActions.checkAllColumns();
     * ```
     */
    checkAllColumns() {
        this.actionsDirective.checkAll();
    }
    /**
     * @hidden @internal
     */
    toggleColumn(event, column) {
        this.onColumnToggled.emit({
            column: column,
            checked: event.checked
        });
        this.actionsDirective.toggleColumn(column);
    }
}
IgxColumnActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-column-actions',
                template: "<div class=\"igx-column-actions__header\">\n    <h4 [attr.id]='titleID' class=\"igx-column-actions__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-actions__header-input\" *ngIf=\"!hideFilter\">\n        <input igxInput\n            type=\"text\"\n            [attr.aria-describedby]='titleID'\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-actions__columns\" tabindex=\"0\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox\n        *ngFor=\"let column of grid?.columns\n            | columnActionEnabled:actionsDirective.actionEnabledColumnsFilter:pipeTrigger\n            | filterActionColumns:filterCriteria:pipeTrigger\n            | sortActionColumns:columnDisplayOrder:pipeTrigger;\"\n        class=\"igx-column-actions__columns-item\"\n\n        (change)=\"toggleColumn($event, column)\"\n        [checked]=\"actionsDirective.columnChecked(column)\"\n        [style.margin-left.px]=\"column.level * indentation\">\n        {{ column.header || column.field }}\n    </igx-checkbox>\n</div>\n\n<div class=\"igx-column-actions__buttons\">\n    <button igxButton igxRipple (click)=\"uncheckAllColumns()\" [disabled]=\"uncheckAllDisabled\">{{ uncheckAllText }}</button>\n    <button igxButton igxRipple (click)=\"checkAllColumns()\" [disabled]=\"checkAllDisabled\">{{ checkAllText }}</button>\n</div>\n"
            },] }
];
IgxColumnActionsComponent.ctorParameters = () => [
    { type: IterableDiffers }
];
IgxColumnActionsComponent.propDecorators = {
    columns: [{ type: Input }],
    title: [{ type: Input }],
    filterColumnsPrompt: [{ type: Input }],
    hideFilter: [{ type: Input }],
    columnItems: [{ type: ViewChildren, args: [IgxCheckboxComponent,] }],
    filterCriteria: [{ type: Input }],
    columnDisplayOrder: [{ type: Input }],
    columnsAreaMaxHeight: [{ type: Input }],
    uncheckAllText: [{ type: Input }],
    checkAllText: [{ type: Input }],
    indentation: [{ type: Input }],
    onColumnToggled: [{ type: Output }],
    cssClass: [{ type: HostBinding, args: ['attr.class',] }],
    grid: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }]
};
__decorate([
    DeprecateProperty(`Deprecated. Use 'grid' input instead.`)
], IgxColumnActionsComponent.prototype, "columns", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL2lnbml0ZXVpLWFuZ3VsYXIvaWduaXRldWktYW5ndWxhci9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tYWN0aW9ucy9jb2x1bW4tYWN0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxZQUFZLEVBRVosWUFBWSxFQUNaLE1BQU0sRUFDTixlQUFlLEVBR2xCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJELE9BQU8sRUFBRSxvQkFBb0IsRUFBNEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUduRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVuRSxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDaEI7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8seUJBQXlCO0lBR2xDLFlBQXFCLE9BQXdCO1FBQXhCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBRm5DLFlBQU8sR0FBK0IsSUFBSSxDQUFDO1FBTXJEOztXQUVHO1FBQ0ksc0JBQWlCLEdBQXlCLEVBQUUsQ0FBQztRQUVwRDs7V0FFRztRQUNJLG9CQUFlLEdBQXlCLEVBQUUsQ0FBQztRQXNCbEQ7Ozs7OztXQU1HO1FBRUksVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUVsQjs7V0FFRztRQUNLLHlCQUFvQixHQUFHLEVBQUUsQ0FBQztRQXVCbEM7Ozs7OztXQU1HO1FBRUksZUFBVSxHQUFHLEtBQUssQ0FBQztRQVkxQjs7V0FFRztRQUNLLG9CQUFlLEdBQUcsRUFBRSxDQUFDO1FBMkI3Qjs7V0FFRztRQUNLLHdCQUFtQixHQUF1QixrQkFBa0IsQ0FBQyxZ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UUFDbEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNJLFlBQVksQ0FBQyxLQUErQixFQUFFLE1BQTBCO1FBQzNFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQ3RCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7O1lBM1hKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixrL0NBQThDO2FBQ2pEOzs7WUF0QkcsZUFBZTs7O3NCQWlEZCxLQUFLO29CQWtCTCxLQUFLO2tDQWNMLEtBQUs7eUJBc0JMLEtBQUs7MEJBVUwsWUFBWSxTQUFDLG9CQUFvQjs2QkFjakMsS0FBSztpQ0E4QkwsS0FBSzttQ0EyQkwsS0FBSzs2QkFnQkwsS0FBSzsyQkE0QkwsS0FBSzswQkF3QkwsS0FBSzs4QkFVTCxNQUFNO3VCQTZCTixXQUFXLFNBQUMsWUFBWTttQkF3QnhCLEtBQUs7aUJBaUJMLFdBQVcsU0FBQyxTQUFTLGNBQ3JCLEtBQUs7O0FBM1JOO0lBRkMsaUJBQWlCLENBQUMsdUNBQXVDLENBQUM7d0RBSTFEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgVmlld0NoaWxkcmVuLFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgT3V0cHV0LFxuICAgIEl0ZXJhYmxlRGlmZmVycyxcbiAgICBJdGVyYWJsZURpZmZlcixcbiAgICBEb0NoZWNrXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IENvbHVtbkRpc3BsYXlPcmRlciB9IGZyb20gJy4uL2NvbW1vbi9lbnVtcyc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5BY3Rpb25zQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vY29sdW1uLWFjdGlvbnMtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4Q2hlY2tib3hDb21wb25lbnQsIElDaGFuZ2VDaGVja2JveEV2ZW50QXJncyB9IGZyb20gJy4uLy4uL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJQ29sdW1uVG9nZ2xlZEV2ZW50QXJncyB9IGZyb20gJy4uL2NvbW1vbi9ldmVudHMnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IERlcHJlY2F0ZVByb3BlcnR5IH0gZnJvbSAnLi4vLi4vY29yZS9kZXByZWNhdGVEZWNvcmF0b3JzJztcblxubGV0IE5FWFRfSUQgPSAwO1xuLyoqXG4gKiBQcm92aWRpbmcgcmVmZXJlbmNlIHRvIGBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50YDpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBAVmlld0NoaWxkKCdjb2x1bW5BY3Rpb25zJywgeyByZWFkOiBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50IH0pXG4gKiAgcHVibGljIGNvbHVtbkFjdGlvbnM6IElneENvbHVtbkFjdGlvbnNDb21wb25lbnQ7XG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWNvbHVtbi1hY3Rpb25zJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29sdW1uLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtbkFjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBEb0NoZWNrIHtcbiAgICBwcm90ZWN0ZWQgX2RpZmZlcjogSXRlcmFibGVEaWZmZXI8YW55PiB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IgKHByaXZhdGUgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKSB7XG4gICAgICAgIHRoaXMuX2RpZmZlciA9IHRoaXMuZGlmZmVycy5maW5kKFtdKS5jcmVhdGUodGhpcy50cmFja0NoYW5nZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGFjdGlvbmFibGVDb2x1bW5zOiBJZ3hDb2x1bW5Db21wb25lbnRbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZmlsdGVyZWRDb2x1bW5zOiBJZ3hDb2x1bW5Db21wb25lbnRbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZ3JpZCBjb2x1bW5zIHRvIHByb3ZpZGUgYW4gYWN0aW9uIGZvci5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBncmlkQ29sdW1ucyA9IHRoaXMuY29sdW1uQWN0aW9ucy5jb2x1bW5zO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBEZXByZWNhdGVQcm9wZXJ0eShgRGVwcmVjYXRlZC4gVXNlICdncmlkJyBpbnB1dCBpbnN0ZWFkLmApXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGNvbHVtbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQ/LmNvbHVtbnM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBjb2x1bW5zKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmdyaWQgPSB2YWx1ZVswXS5ncmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSB0aXRsZSBvZiB0aGUgY29sdW1uIGFjdGlvbnMgY29tcG9uZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW3RpdGxlXT1cIidQaW4gQ29sdW1ucydcIj48L2lneC1jb2x1bW4tYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0aXRsZSA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJDb2x1bW5zUHJvbXB0ID0gJyc7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvbXB0IHRoYXQgaXMgZGlzcGxheWVkIGluIHRoZSBmaWx0ZXIgaW5wdXQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbHRlckNvbHVtbnNQcm9tcHQgPSB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyQ29sdW1uc1Byb21wdDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZmlsdGVyQ29sdW1uc1Byb21wdCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyQ29sdW1uc1Byb21wdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcHJvbXB0IHRoYXQgaXMgZGlzcGxheWVkIGluIHRoZSBmaWx0ZXIgaW5wdXQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4tYWN0aW9ucyBbZmlsdGVyQ29sdW1uc1Byb21wdF09XCInVHlwZSBoZXJlIHRvIHNlYXJjaCdcIj48L2lneC1jb2x1bW4tYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGZpbHRlckNvbHVtbnNQcm9tcHQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9maWx0ZXJDb2x1bW5zUHJvbXB0ID0gdmFsdWUgfHwgJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MvaGlkZXMgdGhlIGNvbHVtbnMgZmlsdGVyaW5nIGlucHV0IGZyb20gdGhlIFVJLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWNvbHVtbi1hY3Rpb25zIFtoaWRlRmlsdGVyXT1cInRydWVcIj48L2lneC1jb2x1bW4tYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBoaWRlRmlsdGVyID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjaGVja2JveCBjb21wb25lbnRzIHJlcHJlc2VudGluZyBjb2x1bW4gaXRlbXMgY3VycmVudGx5IHByZXNlbnQgaW4gdGhlIGRyb3Bkb3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNvbHVtbkl0ZW1zID0gIHRoaXMuY29sdW1uQWN0aW9ucy5jb2x1bW5JdGVtcztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBAVmlld0NoaWxkcmVuKElneENoZWNrYm94Q29tcG9uZW50KVxuICAgIHB1YmxpYyBjb2x1bW5JdGVtczogUXVlcnlMaXN0PElneENoZWNrYm94Q29tcG9uZW50PjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZmlsdGVyQ3JpdGVyaWEgPSAnJztcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSB3aGljaCBmaWx0ZXJzIHRoZSBjb2x1bW5zIGxpc3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbHRlckNyaXRlcmlhID0gIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJDcml0ZXJpYTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZmlsdGVyQ3JpdGVyaWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJDcml0ZXJpYTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgd2hpY2ggZmlsdGVycyB0aGUgY29sdW1ucyBsaXN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWNvbHVtbi1hY3Rpb25zIFtmaWx0ZXJDcml0ZXJpYV09XCInSUQnXCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldCBmaWx0ZXJDcml0ZXJpYSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fZmlsdGVyQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlckNyaXRlcmlhID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9waXBlVHJpZ2dlcisrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcml2YXRlIF9jb2x1bW5EaXNwbGF5T3JkZXI6IENvbHVtbkRpc3BsYXlPcmRlciA9IENvbHVtbkRpc3BsYXlPcmRlci5EaXNwbGF5T3JkZXI7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGlzcGxheSBvcmRlciBvZiB0aGUgY29sdW1ucy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29sdW1uRGlzcGxheU9yZGVyID0gdGhpcy5jb2x1bW5BY3Rpb25zLmNvbHVtbkRpc3BsYXlPcmRlcjtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgY29sdW1uRGlzcGxheU9yZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uRGlzcGxheU9yZGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkaXNwbGF5IG9yZGVyIG9mIHRoZSBjb2x1bW5zLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY29sdW1uQWN0aW9ucy5jb2x1bW5EaXNwbGF5T3JkZXIgPSBDb2x1bW5EaXNwbGF5T3JkZXIuQWxwaGFiZXRpY2FsO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgY29sdW1uRGlzcGxheU9yZGVyKHZhbHVlOiBDb2x1bW5EaXNwbGF5T3JkZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9PSB0aGlzLl9jb2x1bW5EaXNwbGF5T3JkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbHVtbkRpc3BsYXlPcmRlciA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcGlwZVRyaWdnZXIrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgbWF4IGhlaWdodCBvZiB0aGUgY29sdW1ucyBhcmVhLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhlIGRlZmF1bHQgbWF4IGhlaWdodCBpcyAxMDAlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW2NvbHVtbnNBcmVhTWF4SGVpZ2h0XT1cIjIwMHB4XCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29sdW1uc0FyZWFNYXhIZWlnaHQgPSAnMTAwJSc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByaXZhdGUgX3VuY2hlY2tBbGxUZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGV4dCBvZiB0aGUgYnV0dG9uIHRoYXQgdW5jaGVja3MgYWxsIGNvbHVtbnMuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJZiB1bnNldCBpdCBpcyBvYnRhaW5lZCBmcm9tIHRoZSBJZ3hDb2x1bW5BY3Rpb25zQmFzZWQgZGVyaXZlZCBkaXJlY3RpdmUgYXBwbGllZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgdW5jaGVja0FsbFRleHQgPSB0aGlzLmNvbHVtbkFjdGlvbnMudW5jaGVja0FsbFRleHQ7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IHVuY2hlY2tBbGxUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdW5jaGVja0FsbFRleHQgfHwgdGhpcy5hY3Rpb25zRGlyZWN0aXZlLnVuY2hlY2tBbGxMYWJlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBvZiB0aGUgYnV0dG9uIHRoYXQgdW5jaGVja3MgYWxsIGNvbHVtbnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4tYWN0aW9ucyBbdW5jaGVja0FsbFRleHRdPVwiJ1Nob3cgQWxsJ1wiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgdW5jaGVja0FsbFRleHQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl91bmNoZWNrQWxsVGV4dCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY2hlY2tBbGxUZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGV4dCBvZiB0aGUgYnV0dG9uIHRoYXQgY2hlY2tzIGFsbCBjb2x1bW5zLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgdW5zZXQgaXQgaXMgb2J0YWluZWQgZnJvbSB0aGUgSWd4Q29sdW1uQWN0aW9uc0Jhc2VkIGRlcml2ZWQgZGlyZWN0aXZlIGFwcGxpZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHVuY2hlY2tBbGxUZXh0ID0gdGhpcy5jb2x1bW5BY3Rpb25zLnVuY2hlY2tBbGxUZXh0O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBjaGVja0FsbFRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGVja0FsbFRleHQgfHwgdGhpcy5hY3Rpb25zRGlyZWN0aXZlLmNoZWNrQWxsTGFiZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiB0aGF0IGNoZWNrcyBhbGwgY29sdW1ucy5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIElmIHVuc2V0IGl0IGlzIG9idGFpbmVkIGZyb20gdGhlIElneENvbHVtbkFjdGlvbnNCYXNlZCBkZXJpdmVkIGRpcmVjdGl2ZSBhcHBsaWVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW2NoZWNrQWxsVGV4dF09XCInSGlkZSBBbGwnXCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldCBjaGVja0FsbFRleHQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaGVja0FsbFRleHQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL3NldHMgdGhlIGluZGVudGF0aW9uIG9mIGNvbHVtbnMgaW4gdGhlIGNvbHVtbiBsaXN0IGJhc2VkIG9uIHRoZWlyIGhpZXJhcmNoeSBsZXZlbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW2luZGVudGF0aW9uXT1cIjE1XCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaW5kZW50YXRpb24gPSAzMDtcblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBhZnRlciBhIGNvbHVtbidzIGNoZWNrZWQgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICAgKiBQcm92aWRlcyByZWZlcmVuY2VzIHRvIHRoZSBgY29sdW1uYCBhbmQgdGhlIGBjaGVja2VkYCBwcm9wZXJ0aWVzIGFzIGV2ZW50IGFyZ3VtZW50cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtY29sdW1uLWFjdGlvbnMgKG9uQ29sdW1uVG9nZ2xlZCk9XCJvbkNvbHVtblRvZ2dsZWQoJGV2ZW50KVwiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNvbHVtblRvZ2dsZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElDb2x1bW5Ub2dnbGVkRXZlbnRBcmdzPigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcml2YXRlIF9waXBlVHJpZ2dlciA9IDA7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHBpcGVUcmlnZ2VyKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9waXBlVHJpZ2dlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpb25zRGlyZWN0aXZlOiBJZ3hDb2x1bW5BY3Rpb25zQmFzZURpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIFNldHMvR2V0cyB0aGUgY3NzIGNsYXNzIHNlbGVjdG9yLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIHZhbHVlIG9mIHRoZSBgY2xhc3NgIGF0dHJpYnV0ZSBpcyBgXCJpZ3gtY29sdW1uLWFjdGlvbnNcImAuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjc3NDTGFzcyA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNzc0NsYXNzO1xuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNvbHVtbkhpZGluZ1VJLmNzc0NsYXNzID0gJ2NvbHVtbi1jaG9vc2VyJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuY2xhc3MnKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtY29sdW1uLWFjdGlvbnMnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNoZWNrQWxsRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbnNEaXJlY3RpdmUuYWxsVW5jaGVja2VkO1xuXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCB1bmNoZWNrQWxsRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbnNEaXJlY3RpdmUuYWxsQ2hlY2tlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGdyaWQgdG8gcHJvdmlkZSBjb2x1bW4gYWN0aW9ucyBmb3IuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGdyaWQgPSB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBncmlkOiBJZ3hHcmlkQmFzZURpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfaWQgPSBgaWd4LWNvbHVtbi1hY3Rpb25zLSR7TkVYVF9JRCsrfWA7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHZhbHVlIG9mIHRoZSBgaWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW2lkXT1cIidpZ3gtYWN0aW9ucy0xJ1wiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgcHVibGljIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgdGl0bGVJRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQgKyAnX3RpdGxlJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFja0NoYW5nZXMgPSAoaW5kZXgsIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gY29sLmZpZWxkICsgJ18nICsgdGhpcy5hY3Rpb25zRGlyZWN0aXZlLmFjdGlvbkVuYWJsZWRDb2x1bW5zRmlsdGVyKGNvbCwgaW5kZXgsIFtdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaWZmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLl9kaWZmZXIuZGlmZih0aGlzLmdyaWQ/LmNvbHVtbnMpO1xuICAgICAgICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9waXBlVHJpZ2dlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5jaGVja3MgYWxsIGNvbHVtbnMgYW5kIHBlcmZvcm1zIHRoZSBhcHByb3ByaWF0ZSBhY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5jb2x1bW5BY3Rpb25zLnVuY2hlY2tBbGxDb2x1bW5zKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHVuY2hlY2tBbGxDb2x1bW5zKCkge1xuICAgICAgICB0aGlzLmFjdGlvbnNEaXJlY3RpdmUudW5jaGVja0FsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBhbGwgY29sdW1ucyBhbmQgcGVyZm9ybXMgdGhlIGFwcHJvcHJpYXRlIGFjdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNvbHVtbkFjdGlvbnMuY2hlY2tBbGxDb2x1bW5zKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrQWxsQ29sdW1ucygpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25zRGlyZWN0aXZlLmNoZWNrQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uKGV2ZW50OiBJQ2hhbmdlQ2hlY2tib3hFdmVudEFyZ3MsIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMub25Db2x1bW5Ub2dnbGVkLmVtaXQoe1xuICAgICAgICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICAgICAgICBjaGVja2VkOiBldmVudC5jaGVja2VkXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFjdGlvbnNEaXJlY3RpdmUudG9nZ2xlQ29sdW1uKGNvbHVtbik7XG4gICAgfVxufVxuIl19