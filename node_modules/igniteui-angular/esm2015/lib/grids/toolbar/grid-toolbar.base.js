import { Directive, Host, Input } from '@angular/core';
import { first } from 'rxjs/operators';
import { AbsoluteScrollStrategy, ConnectedPositioningStrategy, HorizontalAlignment, VerticalAlignment } from '../../services/public_api';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
/**
 * Base class for the pinning/hiding column actions.
 * @hidden @internal
 */
export class BaseToolbarDirective {
    constructor(toolbar) {
        this.toolbar = toolbar;
    }
    /**
     * Returns the grid containing this component.
     */
    get grid() {
        return this.toolbar.grid;
    }
    /** @hidden @internal */
    toggle(anchorElement, toggleRef, actions) {
        if (actions) {
            const setHeight = () => { var _a; return actions.columnsAreaMaxHeight = (_a = this.columnListHeight) !== null && _a !== void 0 ? _a : `${Math.max(this.grid.calcHeight, 200)}px`; };
            toggleRef.onOpening.pipe(first()).subscribe(setHeight);
        }
        toggleRef.toggle(Object.assign(Object.assign({}, _makeOverlaySettings()), { target: anchorElement, outlet: this.grid.outlet,
            excludeFromOutsideClick: [anchorElement] }));
    }
    /** @hidden @internal */
    focusSearch(columnActions) {
        var _a;
        (_a = columnActions.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
    }
}
BaseToolbarDirective.decorators = [
    { type: Directive }
];
BaseToolbarDirective.ctorParameters = () => [
    { type: IgxGridToolbarComponent, decorators: [{ type: Host }] }
];
BaseToolbarDirective.propDecorators = {
    columnListHeight: [{ type: Input }],
    title: [{ type: Input }],
    prompt: [{ type: Input }]
};
function _makeOverlaySettings() {
    const positionSettings = {
        horizontalDirection: HorizontalAlignment.Left,
        horizontalStartPoint: HorizontalAlignment.Right,
        verticalDirection: VerticalAlignment.Bottom,
        verticalStartPoint: VerticalAlignment.Bottom
    };
    return {
        positionStrategy: new ConnectedPositioningStrategy(positionSettings),
        scrollStrategy: new AbsoluteScrollStrategy(),
        modal: false,
        closeOnEscape: true,
        closeOnOutsideClick: true
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLmJhc2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvaWduaXRldWktYW5ndWxhci9pZ25pdGV1aS1hbmd1bGFyL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLmJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLDRCQUE0QixFQUM1QixtQkFBbUIsRUFHbkIsaUJBQWlCLEVBQ3BCLE1BQU0sMkJBQTJCLENBQUM7QUFFbkMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHbkU7OztHQUdHO0FBRUgsTUFBTSxPQUFnQixvQkFBb0I7SUEyQnRDLFlBQThCLE9BQWdDO1FBQWhDLFlBQU8sR0FBUCxPQUFPLENBQXlCO0lBQUksQ0FBQztJQVBuRTs7T0FFRztJQUNILElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUlELHdCQUF3QjtJQUNqQixNQUFNLENBQUMsYUFBMEIsRUFBRSxTQUE2QixFQUFFLE9BQW1DO1FBQ3hHLElBQUksT0FBTyxFQUFFO1lBQ1QsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFLFdBQUMsT0FBQSxPQUFPLENBQUMsb0JBQW9CLFNBQUcsSUFBSSxDQUFDLGdCQUFnQixtQ0FBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQSxFQUFBLENBQUM7WUFDM0gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDMUQ7UUFDRCxTQUFTLENBQUMsTUFBTSxpQ0FBTSxvQkFBb0IsRUFBRSxHQUFLLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQzlGLHVCQUF1QixFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFFRCx3QkFBd0I7SUFDakIsV0FBVyxDQUFDLGFBQTBCOztRQUN6QyxNQUFBLGFBQWEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLDBDQUFFLEtBQUssR0FBRztJQUNsRCxDQUFDOzs7WUEzQ0osU0FBUzs7O1lBUEQsdUJBQXVCLHVCQW1DZixJQUFJOzs7K0JBdEJoQixLQUFLO29CQU1MLEtBQUs7cUJBTUwsS0FBSzs7QUE2QlYsU0FBUyxvQkFBb0I7SUFDekIsTUFBTSxnQkFBZ0IsR0FBcUI7UUFDdkMsbUJBQW1CLEVBQUUsbUJBQW1CLENBQUMsSUFBSTtRQUM3QyxvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQyxLQUFLO1FBQy9DLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLE1BQU07UUFDM0Msa0JBQWtCLEVBQUUsaUJBQWlCLENBQUMsTUFBTTtLQUMvQyxDQUFDO0lBQ0YsT0FBTztRQUNILGdCQUFnQixFQUFFLElBQUksNEJBQTRCLENBQUMsZ0JBQWdCLENBQUM7UUFDcEUsY0FBYyxFQUFFLElBQUksc0JBQXNCLEVBQUU7UUFDNUMsS0FBSyxFQUFFLEtBQUs7UUFDWixhQUFhLEVBQUUsSUFBSTtRQUNuQixtQkFBbUIsRUFBRSxJQUFJO0tBQzVCLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJZ3hUb2dnbGVEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3RvZ2dsZS90b2dnbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgQWJzb2x1dGVTY3JvbGxTdHJhdGVneSxcbiAgICBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICAgIEhvcml6b250YWxBbGlnbm1lbnQsXG4gICAgT3ZlcmxheVNldHRpbmdzLFxuICAgIFBvc2l0aW9uU2V0dGluZ3MsXG4gICAgVmVydGljYWxBbGlnbm1lbnRcbn0gZnJvbSAnLi4vLi4vc2VydmljZXMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1uLWFjdGlvbnMvY29sdW1uLWFjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRUb29sYmFyQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLXRvb2xiYXIuY29tcG9uZW50JztcblxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHRoZSBwaW5uaW5nL2hpZGluZyBjb2x1bW4gYWN0aW9ucy5cbiAqIEBoaWRkZW4gQGludGVybmFsXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VUb29sYmFyRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlaWdodCBvZiB0aGUgY29sdW1uIGxpc3QgaW4gdGhlIGRyb3Bkb3duLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbHVtbkxpc3RIZWlnaHQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRpdGxlIHRleHQgZm9yIHRoZSBjb2x1bW4gYWN0aW9uIGNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2Vob2xkZXIgdGV4dCBmb3IgdGhlIHNlYXJjaCBpbnB1dC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBwcm9tcHQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdyaWQgY29udGFpbmluZyB0aGlzIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGdyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXIuZ3JpZDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihASG9zdCgpIHByb3RlY3RlZCB0b29sYmFyOiBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudCkgeyB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgdG9nZ2xlKGFuY2hvckVsZW1lbnQ6IEhUTUxFbGVtZW50LCB0b2dnbGVSZWY6IElneFRvZ2dsZURpcmVjdGl2ZSwgYWN0aW9ucz86IElneENvbHVtbkFjdGlvbnNDb21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGFjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNldEhlaWdodCA9ICgpID0+IGFjdGlvbnMuY29sdW1uc0FyZWFNYXhIZWlnaHQgPSB0aGlzLmNvbHVtbkxpc3RIZWlnaHQgPz8gYCR7TWF0aC5tYXgodGhpcy5ncmlkLmNhbGNIZWlnaHQsIDIwMCl9cHhgO1xuICAgICAgICAgICAgdG9nZ2xlUmVmLm9uT3BlbmluZy5waXBlKGZpcnN0KCkpLnN1YnNjcmliZShzZXRIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZVJlZi50b2dnbGUoeyAuLi5fbWFrZU92ZXJsYXlTZXR0aW5ncygpLCAuLi57IHRhcmdldDogYW5jaG9yRWxlbWVudCwgb3V0bGV0OiB0aGlzLmdyaWQub3V0bGV0LFxuICAgICAgICAgICAgZXhjbHVkZUZyb21PdXRzaWRlQ2xpY2s6IFthbmNob3JFbGVtZW50XSB9fSk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGZvY3VzU2VhcmNoKGNvbHVtbkFjdGlvbnM6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbHVtbkFjdGlvbnMucXVlcnlTZWxlY3RvcignaW5wdXQnKT8uZm9jdXMoKTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gX21ha2VPdmVybGF5U2V0dGluZ3MoKTogT3ZlcmxheVNldHRpbmdzIHtcbiAgICBjb25zdCBwb3NpdGlvblNldHRpbmdzOiBQb3NpdGlvblNldHRpbmdzID0ge1xuICAgICAgICBob3Jpem9udGFsRGlyZWN0aW9uOiBIb3Jpem9udGFsQWxpZ25tZW50LkxlZnQsXG4gICAgICAgIGhvcml6b250YWxTdGFydFBvaW50OiBIb3Jpem9udGFsQWxpZ25tZW50LlJpZ2h0LFxuICAgICAgICB2ZXJ0aWNhbERpcmVjdGlvbjogVmVydGljYWxBbGlnbm1lbnQuQm90dG9tLFxuICAgICAgICB2ZXJ0aWNhbFN0YXJ0UG9pbnQ6IFZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9zaXRpb25TdHJhdGVneTogbmV3IENvbm5lY3RlZFBvc2l0aW9uaW5nU3RyYXRlZ3kocG9zaXRpb25TZXR0aW5ncyksXG4gICAgICAgIHNjcm9sbFN0cmF0ZWd5OiBuZXcgQWJzb2x1dGVTY3JvbGxTdHJhdGVneSgpLFxuICAgICAgICBtb2RhbDogZmFsc2UsXG4gICAgICAgIGNsb3NlT25Fc2NhcGU6IHRydWUsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IHRydWVcbiAgICB9O1xufVxuIl19