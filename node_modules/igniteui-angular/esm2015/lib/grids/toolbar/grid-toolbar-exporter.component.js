import { Component, ContentChild, Input, Output, EventEmitter, Optional, Host } from '@angular/core';
import { first } from 'rxjs/operators';
import { BaseToolbarDirective } from './grid-toolbar.base';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
import { IgxExcelTextDirective, IgxCSVTextDirective } from './common';
import { CsvFileTypes, IgxCsvExporterOptions, IgxCsvExporterService, IgxExcelExporterOptions, IgxExcelExporterService } from '../../services/public_api';
/**
 * Provides a pre-configured exporter component for the grid.
 *
 * @remarks
 * This component still needs the actual exporter service(s) provided in the DI chain
 * in order to export something.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 */
export class IgxGridToolbarExporterComponent extends BaseToolbarDirective {
    constructor(toolbar, excelExporter, csvExporter) {
        super(toolbar);
        this.toolbar = toolbar;
        this.excelExporter = excelExporter;
        this.csvExporter = csvExporter;
        /**
         * Show entry for CSV export.
         */
        this.exportCSV = true;
        /**
         * Show entry for Excel export.
         */
        this.exportExcel = true;
        /**
         * The name for the exported file.
         */
        this.filename = 'ExportedData';
        /**
         * Indicates whether there is an export in progress.
         */
        this.isExporting = false;
        /**
         * Emitted when starting an export operation. Re-emitted additionally
         * by the grid itself.
         */
        this.exportStarted = new EventEmitter();
        /**
         * Emitted on successful ending of an export operation.
         */
        this.exportEnded = new EventEmitter();
    }
    /**
     * Returns whether the CSV exporter service is available in the DI chain.
     */
    get hasCsvExporter() {
        return !!this.csvExporter;
    }
    /**
     * Returns whether the Excel exporter service is available in the DI chain.
     */
    get hasExcelExporter() {
        return !!this.excelExporter;
    }
    export(type, toggleRef) {
        let options;
        let exporter;
        toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.close();
        switch (type) {
            case 'csv':
                options = new IgxCsvExporterOptions(this.filename, CsvFileTypes.CSV);
                exporter = this.csvExporter;
                break;
            case 'excel':
                options = new IgxExcelExporterOptions(this.filename);
                exporter = this.excelExporter;
        }
        const args = { exporter, options, grid: this.grid, cancel: false };
        this.exportStarted.emit(args);
        this.grid.onToolbarExporting.emit(args);
        this.isExporting = true;
        this.toolbar.showProgress = true;
        if (args.cancel) {
            return;
        }
        exporter.onExportEnded.pipe(first()).subscribe(() => {
            this.exportEnded.emit();
            this.isExporting = false;
            this.toolbar.showProgress = false;
        });
        exporter.export(this.grid, options);
    }
}
IgxGridToolbarExporterComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-grid-toolbar-exporter',
                template: "<div class=\"igx-grid-toolbar__dropdown\" id=\"btnExport\">\n    <button [title]=\"grid?.resourceStrings.igx_grid_toolbar_exporter_button_tooltip\" [disabled]=\"isExporting\"\n        igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" igxRipple #btn (click)=\"toggle(btn, toggleRef)\">\n        <span class=\"igx-grid-toolbar__button-space\">\n            <igx-icon>import_export</igx-icon>\n            <span #ref>\n                <ng-content></ng-content>\n            </span>\n            <span\n                *ngIf=\"!ref.childNodes.length\">{{ grid.exportText || grid?.resourceStrings.igx_grid_toolbar_exporter_button_label }}</span>\n            <igx-icon>arrow_drop_down</igx-icon>\n        </span>\n    </button>\n\n    <ul class=\"igx-grid-toolbar__dd-list\" igxToggle #toggleRef=\"toggle\">\n        <li *ngIf=\"grid.exportExcel || exportExcel\" #btnExportExcel id=\"btnExportExcel\"\n            class=\"igx-grid-toolbar__dd-list-items\" igxRipple (click)=\"export('excel', toggleRef)\">\n            <ng-template #excel>\n                <ng-content select=[excelText],excel-text></ng-content>\n            </ng-template>\n            <excel-text *ngIf=\"!hasExcelAttr\">\n                {{ grid.exportExcelText || grid?.resourceStrings.igx_grid_toolbar_exporter_excel_entry_text}}\n            </excel-text>\n            <ng-container *ngTemplateOutlet=\"excel\"></ng-container>\n        </li>\n\n        <li *ngIf=\"grid.exportCsv || exportCSV\" #btnExportCsv id=\"btnExportCsv\" class=\"igx-grid-toolbar__dd-list-items\"\n            igxRipple (click)=\"export('csv', toggleRef)\">\n            <ng-template #csv>\n                <ng-content select=[csvText],csv-text></ng-content>\n            </ng-template>\n            <csv-text *ngIf=\"!hasCSVAttr\">\n                {{ grid.exportCsvText || grid?.resourceStrings.igx_grid_toolbar_exporter_csv_entry_text }}</csv-text>\n            <ng-container *ngTemplateOutlet=\"csv\"></ng-container>\n        </li>\n    </ul>\n</div>\n"
            },] }
];
IgxGridToolbarExporterComponent.ctorParameters = () => [
    { type: IgxGridToolbarComponent, decorators: [{ type: Host }] },
    { type: IgxExcelExporterService, decorators: [{ type: Optional }] },
    { type: IgxCsvExporterService, decorators: [{ type: Optional }] }
];
IgxGridToolbarExporterComponent.propDecorators = {
    hasExcelAttr: [{ type: ContentChild, args: [IgxExcelTextDirective,] }],
    hasCSVAttr: [{ type: ContentChild, args: [IgxCSVTextDirective,] }],
    exportCSV: [{ type: Input }],
    exportExcel: [{ type: Input }],
    filename: [{ type: Input }],
    exportStarted: [{ type: Output }],
    exportEnded: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,