import { cloneValue } from '../../core/utils';
export var HorizontalAlignment;
(function (HorizontalAlignment) {
    HorizontalAlignment[HorizontalAlignment["Left"] = -1] = "Left";
    HorizontalAlignment[HorizontalAlignment["Center"] = -0.5] = "Center";
    HorizontalAlignment[HorizontalAlignment["Right"] = 0] = "Right";
})(HorizontalAlignment || (HorizontalAlignment = {}));
export var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment[VerticalAlignment["Top"] = -1] = "Top";
    VerticalAlignment[VerticalAlignment["Middle"] = -0.5] = "Middle";
    VerticalAlignment[VerticalAlignment["Bottom"] = 0] = "Bottom";
})(VerticalAlignment || (VerticalAlignment = {}));
/**
 * Defines the possible values of the overlays' position strategy.
 */
export var RelativePositionStrategy;
(function (RelativePositionStrategy) {
    RelativePositionStrategy["Connected"] = "connected";
    RelativePositionStrategy["Auto"] = "auto";
    RelativePositionStrategy["Elastic"] = "elastic";
})(RelativePositionStrategy || (RelativePositionStrategy = {}));
/**
 * Defines the possible positions for the relative overlay settings presets.
 */
export var RelativePosition;
(function (RelativePosition) {
    RelativePosition["Above"] = "above";
    RelativePosition["Below"] = "below";
    RelativePosition["Before"] = "before";
    RelativePosition["After"] = "after";
    RelativePosition["Default"] = "default";
})(RelativePosition || (RelativePosition = {}));
/**
 * Defines the possible positions for the absolute overlay settings presets.
 */
export var AbsolutePosition;
(function (AbsolutePosition) {
    AbsolutePosition["Bottom"] = "bottom";
    AbsolutePosition["Top"] = "top";
    AbsolutePosition["Center"] = "center";
})(AbsolutePosition || (AbsolutePosition = {}));
export class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
/** @hidden */
export class Util {
    /**
     * @hidden
     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle
     * if no target is provided
     * @param settings Overlay settings for which to calculate target rectangle
     */
    static getTargetRect(target) {
        let targetRect = {
            bottom: 0,
            height: 0,
            left: 0,
            right: 0,
            top: 0,
            width: 0
        };
        if (target instanceof HTMLElement) {
            targetRect = target.getBoundingClientRect();
        }
        else if (target instanceof Point) {
            const targetPoint = target;
            targetRect = {
                bottom: targetPoint.y,
                height: 0,
                left: targetPoint.x,
                right: targetPoint.x,
                top: targetPoint.y,
                width: 0
            };
        }
        return targetRect;
    }
    /** @hidden @internal */
    static getViewportRect(document) {
        const width = document.documentElement.clientWidth;
        const height = document.documentElement.clientHeight;
        const scrollPosition = Util.getViewportScrollPosition(document);
        return {
            top: scrollPosition.y,
            left: scrollPosition.x,
            right: scrollPosition.x + width,
            bottom: scrollPosition.y + height,
            width: width,
            height: height,
        };
    }
    /** @hidden @internal */
    static getViewportScrollPosition(document) {
        const documentElement = document.documentElement;
        const documentRect = documentElement.getBoundingClientRect();
        const horizontalScrollPosition = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;
        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;
        return new Point(horizontalScrollPosition, verticalScrollPosition);
    }
    /** @hidden @internal */
    static cloneInstance(object) {
        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);
        clonedObj.settings = cloneValue(clonedObj.settings);
        return clonedObj;
    }
}
//# sourceMappingURL=data:application/json;base64,