import { Injectable, Inject, InjectionToken, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * Injection token is used to inject the document into Directionality
 * which factory could be faked for testing purposes.
 *
 * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule
 * allows override of the default providers, directive, pipes, modules of the test injector
 * which causes errors.
 *
 * @hidden
 */
export const DIR_DOCUMENT = new InjectionToken('dir-doc', {
    providedIn: 'root',
    factory: DIR_DOCUMENT_FACTORY
});
/**
 * @hidden
 */
export function DIR_DOCUMENT_FACTORY() {
    return inject(DOCUMENT);
}
/**
 * @hidden
 *
 * Bidirectional service that extracts the value of the direction attribute on the body or html elements.
 *
 * The dir attribute over the body element takes precedence.
 */
export class IgxDirectionality {
    constructor(document) {
        this._document = document;
        const bodyDir = this._document.body ? this._document.body.dir : null;
        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;
        const extractedDir = bodyDir || htmlDir;
        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';
    }
    get value() {
        return this._dir;
    }
    get document() {
        return this._document;
    }
    get rtl() {
        return this._dir === 'rtl';
    }
}
IgxDirectionality.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxDirectionality_Factory() { return new IgxDirectionality(i0.ɵɵinject(DIR_DOCUMENT)); }, token: IgxDirectionality, providedIn: "root" });
IgxDirectionality.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IgxDirectionality.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DIR_DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWxpdHkuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvaWduaXRldWktYW5ndWxhci9pZ25pdGV1aS1hbmd1bGFyL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2RpcmVjdGlvbi9kaXJlY3Rpb25hbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFPM0M7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFXLFNBQVMsRUFBRTtJQUNoRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsb0JBQW9CO0NBQ2hDLENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLGlCQUFpQjtJQWdCMUIsWUFBa0MsUUFBUTtRQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFhLFFBQVEsQ0FBQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNGLE1BQU0sWUFBWSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksS0FBSyxLQUFLLElBQUksWUFBWSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMxRixDQUFDO0lBbEJELElBQVcsS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0lBQy9CLENBQUM7Ozs7WUFqQkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7NENBaUJnQixNQUFNLFNBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHR5cGUgRGlyZWN0aW9uID0gJ2x0cicgfCAncnRsJztcblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gaXMgdXNlZCB0byBpbmplY3QgdGhlIGRvY3VtZW50IGludG8gRGlyZWN0aW9uYWxpdHlcbiAqIHdoaWNoIGZhY3RvcnkgY291bGQgYmUgZmFrZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKlxuICogV2UgY2FuJ3QgcHJvdmlkZSBhbmQgbW9jayB0aGUgRE9DVU1FTlQgdG9rZW4gZnJvbSBwbGF0Zm9ybS1icm93c2VyIGJlY2F1c2UgY29uZmlndXJlVGVzdGluZ01vZHVsZVxuICogYWxsb3dzIG92ZXJyaWRlIG9mIHRoZSBkZWZhdWx0IHByb3ZpZGVycywgZGlyZWN0aXZlLCBwaXBlcywgbW9kdWxlcyBvZiB0aGUgdGVzdCBpbmplY3RvclxuICogd2hpY2ggY2F1c2VzIGVycm9ycy5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBESVJfRE9DVU1FTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW48RG9jdW1lbnQ+KCdkaXItZG9jJywge1xuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICBmYWN0b3J5OiBESVJfRE9DVU1FTlRfRkFDVE9SWVxufSk7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gRElSX0RPQ1VNRU5UX0ZBQ1RPUlkoKTogRG9jdW1lbnQge1xuICAgIHJldHVybiBpbmplY3QoRE9DVU1FTlQpO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqXG4gKiBCaWRpcmVjdGlvbmFsIHNlcnZpY2UgdGhhdCBleHRyYWN0cyB0aGUgdmFsdWUgb2YgdGhlIGRpcmVjdGlvbiBhdHRyaWJ1dGUgb24gdGhlIGJvZHkgb3IgaHRtbCBlbGVtZW50cy5cbiAqXG4gKiBUaGUgZGlyIGF0dHJpYnV0ZSBvdmVyIHRoZSBib2R5IGVsZW1lbnQgdGFrZXMgcHJlY2VkZW5jZS5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEaXJlY3Rpb25hbGl0eSB7XG4gICAgcHJpdmF0ZSBfZGlyOiBEaXJlY3Rpb247XG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gICAgcHVibGljIGdldCB2YWx1ZSgpOiBEaXJlY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZG9jdW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kb2N1bWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHJ0bCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpciA9PT0gJ3J0bCc7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChESVJfRE9DVU1FTlQpIGRvY3VtZW50KSB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50ID0gPERvY3VtZW50PmRvY3VtZW50O1xuICAgICAgICBjb25zdCBib2R5RGlyID0gdGhpcy5fZG9jdW1lbnQuYm9keSA/IHRoaXMuX2RvY3VtZW50LmJvZHkuZGlyIDogbnVsbDtcbiAgICAgICAgY29uc3QgaHRtbERpciA9IHRoaXMuX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/IHRoaXMuX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIgOiBudWxsO1xuICAgICAgICBjb25zdCBleHRyYWN0ZWREaXIgPSBib2R5RGlyIHx8IGh0bWxEaXI7XG4gICAgICAgIHRoaXMuX2RpciA9IChleHRyYWN0ZWREaXIgPT09ICdsdHInIHx8IGV4dHJhY3RlZERpciA9PT0gJ3J0bCcpID8gZXh0cmFjdGVkRGlyIDogJ2x0cic7XG4gICAgfVxufVxuIl19