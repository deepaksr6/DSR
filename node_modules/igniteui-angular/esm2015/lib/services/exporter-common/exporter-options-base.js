export class IgxExporterOptionsBase {
    constructor(fileName, _fileExtension) {
        this._fileExtension = _fileExtension;
        /**
         * Specifies whether hidden columns should be exported.
         * ```typescript
         * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;
         * this.exportOptions.ignoreColumnsVisibility = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsVisibility = false;
        /**
         * Specifies whether filtered out rows should be exported.
         * ```typescript
         * let ignoreFiltering = this.exportOptions.ignoreFiltering;
         * this.exportOptions.ignoreFiltering = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreFiltering = false;
        /**
         * Specifies if the exporter should ignore the current column order in the IgxGrid.
         * ```typescript
         * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;
         * this.exportOptions.ignoreColumnsOrder = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsOrder = false;
        /**
         * Specifies whether the exported data should be sorted as in the provided IgxGrid.
         * ```typescript
         * let ignoreSorting = this.exportOptions.ignoreSorting;
         * this.exportOptions.ignoreSorting = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreSorting = false;
        this.setFileName(fileName);
    }
    setFileName(fileName) {
        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');
    }
    /**
     * Gets the file name which will be used for the exporting operation.
     * ```typescript
     * let fileName = this.exportOptions.fileName;
     * ```
     * @memberof IgxExporterOptionsBase
     */
    get fileName() {
        return this._fileName;
    }
    /**
     * Sets the file name which will be used for the exporting operation.
     * ```typescript
     * this.exportOptions.fileName = 'exportedData01';
     * ```
     * @memberof IgxExporterOptionsBase
     */
    set fileName(value) {
        this.setFileName(value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0ZXItb3B0aW9ucy1iYXNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL2lnbml0ZXVpLWFuZ3VsYXIvaWduaXRldWktYW5ndWxhci9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9leHBvcnRlci1jb21tb24vZXhwb3J0ZXItb3B0aW9ucy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBZ0Isc0JBQXNCO0lBMkN4QyxZQUFZLFFBQWdCLEVBQVksY0FBc0I7UUFBdEIsbUJBQWMsR0FBZCxjQUFjLENBQVE7UUF4QzlEOzs7Ozs7O1dBT0c7UUFDSSw0QkFBdUIsR0FBRyxLQUFLLENBQUM7UUFFdkM7Ozs7Ozs7V0FPRztRQUNJLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRS9COzs7Ozs7O1dBT0c7UUFDSSx1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFFbEM7Ozs7Ozs7V0FPRztRQUNJLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBR3pCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVPLFdBQVcsQ0FBQyxRQUFnQjtRQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBSSxRQUFRLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFic3RyYWN0IGNsYXNzIElneEV4cG9ydGVyT3B0aW9uc0Jhc2Uge1xuICAgIHByaXZhdGUgX2ZpbGVOYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBoaWRkZW4gY29sdW1ucyBzaG91bGQgYmUgZXhwb3J0ZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpZ25vcmVDb2x1bW5zVmlzaWJpbGl0eSA9IHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVDb2x1bW5zVmlzaWJpbGl0eTtcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlQ29sdW1uc1Zpc2liaWxpdHkgPSB0cnVlO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZUNvbHVtbnNWaXNpYmlsaXR5ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBmaWx0ZXJlZCBvdXQgcm93cyBzaG91bGQgYmUgZXhwb3J0ZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpZ25vcmVGaWx0ZXJpbmcgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlRmlsdGVyaW5nO1xuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVGaWx0ZXJpbmcgPSB0cnVlO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZUZpbHRlcmluZyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBleHBvcnRlciBzaG91bGQgaWdub3JlIHRoZSBjdXJyZW50IGNvbHVtbiBvcmRlciBpbiB0aGUgSWd4R3JpZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlnbm9yZUNvbHVtbnNPcmRlciA9IHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVDb2x1bW5zT3JkZXI7XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUNvbHVtbnNPcmRlciA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaWdub3JlQ29sdW1uc09yZGVyID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgZXhwb3J0ZWQgZGF0YSBzaG91bGQgYmUgc29ydGVkIGFzIGluIHRoZSBwcm92aWRlZCBJZ3hHcmlkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlU29ydGluZyA9IHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVTb3J0aW5nO1xuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVTb3J0aW5nID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIHB1YmxpYyBpZ25vcmVTb3J0aW5nID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlTmFtZTogc3RyaW5nLCBwcm90ZWN0ZWQgX2ZpbGVFeHRlbnNpb246IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldEZpbGVOYW1lKGZpbGVOYW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEZpbGVOYW1lKGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZmlsZU5hbWUgPSBmaWxlTmFtZSArIChmaWxlTmFtZS5lbmRzV2l0aCh0aGlzLl9maWxlRXh0ZW5zaW9uKSA9PT0gZmFsc2UgPyB0aGlzLl9maWxlRXh0ZW5zaW9uIDogJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpbGUgbmFtZSB3aGljaCB3aWxsIGJlIHVzZWQgZm9yIHRoZSBleHBvcnRpbmcgb3BlcmF0aW9uLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZmlsZU5hbWUgPSB0aGlzLmV4cG9ydE9wdGlvbnMuZmlsZU5hbWU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBnZXQgZmlsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmaWxlIG5hbWUgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciB0aGUgZXhwb3J0aW5nIG9wZXJhdGlvbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmZpbGVOYW1lID0gJ2V4cG9ydGVkRGF0YTAxJztcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIHNldCBmaWxlTmFtZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldEZpbGVOYW1lKHZhbHVlKTtcbiAgICB9XG5cbn1cbiJdfQ==