import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';
/**
 * Objects of this class are used to configure the Excel exporting process.
 */
export class IgxExcelExporterOptions extends IgxExporterOptionsBase {
    constructor(fileName) {
        super(fileName, '.xlsx');
        /**
         * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,
         * this option will always be considered as set to true.
         * ```typescript
         * let ignorePinning = this.exportOptions.ignorePinning;
         * this.exportOptions.ignorePinning = true;
         * ```
         * @memberof IgxExcelExporterOptions
         */
        this.ignorePinning = false;
        /**
         * Specifies whether the exported data should be formatted as Excel table. (True by default)
         * ```typescript
         * let exportAsTable = this.exportOptions.exportAsTable;
         * this.exportOptions.exportAsTable = false;
         * ```
         * @memberof IgxExcelExporterOptions
         */
        this.exportAsTable = true;
    }
    /**
     * Gets the width of the columns in the exported excel file.
     * ```typescript
     * let width = this.exportOptions.columnWidth;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    get columnWidth() {
        return this._columnWidth;
    }
    /**
     * Sets the width of the columns in the exported excel file. If left unspecified,
     * the width of the column or the default width of the excel columns will be used.
     * ```typescript
     * this.exportOptions.columnWidth = 55;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    set columnWidth(value) {
        if (value < 0) {
            throw Error('Invalid value for column width!');
        }
        this._columnWidth = value;
    }
    /**
     * Gets the height of the rows in the exported excel file.
     * ```typescript
     * let height = this.exportOptions.rowHeight;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    get rowHeight() {
        return this._rowHeight;
    }
    /**
     * Sets the height of the rows in the exported excel file. If left unspecified or 0,
     * the default height of the excel rows will be used.
     * ```typescript
     * this.exportOptions.rowHeight = 25;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    set rowHeight(value) {
        if (value < 0) {
            throw Error('Invalid value for row height!');
        }
        this._rowHeight = value;
    }
    /**
     * Gets the name of the worksheet in the exported excel file.
     * ```typescript
     * let worksheetName = this.exportOptions.worksheetName;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    get worksheetName() {
        if (this._worksheetName === undefined || this._worksheetName === null) {
            return 'Sheet1';
        }
        return this._worksheetName;
    }
    /**
     * Sets the name of the worksheet in the exported excel file.
     * ```typescript
     * this.exportOptions.worksheetName = "Worksheet";
     * ```
     * @memberof IgxExcelExporterOptions
     */
    set worksheetName(value) {
        this._worksheetName = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtZXhwb3J0ZXItb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9pZ25pdGV1aS1hbmd1bGFyL2lnbml0ZXVpLWFuZ3VsYXIvcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZXhjZWwvZXhjZWwtZXhwb3J0ZXItb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUVsRjs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxzQkFBc0I7SUEwQi9ELFlBQVksUUFBZ0I7UUFDeEIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQXRCN0I7Ozs7Ozs7O1dBUUc7UUFDSSxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUU3Qjs7Ozs7OztXQU9HO1FBQ0ksa0JBQWEsR0FBRyxJQUFJLENBQUM7SUFJNUIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQVcsV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFXLFdBQVcsQ0FBQyxLQUFhO1FBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNYLE1BQU0sS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBVyxTQUFTO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsU0FBUyxDQUFDLEtBQWE7UUFDOUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsTUFBTSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxJQUFXLGFBQWE7UUFDcEIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUNuRSxPQUFPLFFBQVEsQ0FBQztTQUNuQjtRQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBVyxhQUFhLENBQUMsS0FBYTtRQUNsQyxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlIH0gZnJvbSAnLi4vZXhwb3J0ZXItY29tbW9uL2V4cG9ydGVyLW9wdGlvbnMtYmFzZSc7XG5cbi8qKlxuICogT2JqZWN0cyBvZiB0aGlzIGNsYXNzIGFyZSB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgRXhjZWwgZXhwb3J0aW5nIHByb2Nlc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9ucyBleHRlbmRzIElneEV4cG9ydGVyT3B0aW9uc0Jhc2Uge1xuICAgIHByaXZhdGUgX2NvbHVtbldpZHRoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfcm93SGVpZ2h0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfd29ya3NoZWV0TmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIGNvbHVtbiBwaW5uaW5nIHNob3VsZCBiZSBpZ25vcmVkLiBJZiBpZ25vcmVDb2x1bW5zT3JkZXIgaXMgc2V0IHRvIHRydWUsXG4gICAgICogdGhpcyBvcHRpb24gd2lsbCBhbHdheXMgYmUgY29uc2lkZXJlZCBhcyBzZXQgdG8gdHJ1ZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlnbm9yZVBpbm5pbmcgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlUGlubmluZztcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlUGlubmluZyA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZVBpbm5pbmcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBleHBvcnRlZCBkYXRhIHNob3VsZCBiZSBmb3JtYXR0ZWQgYXMgRXhjZWwgdGFibGUuIChUcnVlIGJ5IGRlZmF1bHQpXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBleHBvcnRBc1RhYmxlID0gdGhpcy5leHBvcnRPcHRpb25zLmV4cG9ydEFzVGFibGU7XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmV4cG9ydEFzVGFibGUgPSBmYWxzZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZXhwb3J0QXNUYWJsZSA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGZpbGVOYW1lLCAnLnhsc3gnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB3aWR0aCBvZiB0aGUgY29sdW1ucyBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHdpZHRoID0gdGhpcy5leHBvcnRPcHRpb25zLmNvbHVtbldpZHRoO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY29sdW1uV2lkdGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbldpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW5zIGluIHRoZSBleHBvcnRlZCBleGNlbCBmaWxlLiBJZiBsZWZ0IHVuc3BlY2lmaWVkLFxuICAgICAqIHRoZSB3aWR0aCBvZiB0aGUgY29sdW1uIG9yIHRoZSBkZWZhdWx0IHdpZHRoIG9mIHRoZSBleGNlbCBjb2x1bW5zIHdpbGwgYmUgdXNlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmNvbHVtbldpZHRoID0gNTU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIHNldCBjb2x1bW5XaWR0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBjb2x1bW4gd2lkdGghJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb2x1bW5XaWR0aCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhlaWdodCBvZiB0aGUgcm93cyBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGhlaWdodCA9IHRoaXMuZXhwb3J0T3B0aW9ucy5yb3dIZWlnaHQ7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIGdldCByb3dIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvd0hlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIHJvd3MgaW4gdGhlIGV4cG9ydGVkIGV4Y2VsIGZpbGUuIElmIGxlZnQgdW5zcGVjaWZpZWQgb3IgMCxcbiAgICAgKiB0aGUgZGVmYXVsdCBoZWlnaHQgb2YgdGhlIGV4Y2VsIHJvd3Mgd2lsbCBiZSB1c2VkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMucm93SGVpZ2h0ID0gMjU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIHNldCByb3dIZWlnaHQodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igcm93IGhlaWdodCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Jvd0hlaWdodCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgdGhlIHdvcmtzaGVldCBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHdvcmtzaGVldE5hbWUgPSB0aGlzLmV4cG9ydE9wdGlvbnMud29ya3NoZWV0TmFtZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHdvcmtzaGVldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzaGVldE5hbWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93b3Jrc2hlZXROYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1NoZWV0MSc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NoZWV0TmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuYW1lIG9mIHRoZSB3b3Jrc2hlZXQgaW4gdGhlIGV4cG9ydGVkIGV4Y2VsIGZpbGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy53b3Jrc2hlZXROYW1lID0gXCJXb3Jrc2hlZXRcIjtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHdvcmtzaGVldE5hbWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl93b3Jrc2hlZXROYW1lID0gdmFsdWU7XG4gICAgfVxufVxuIl19