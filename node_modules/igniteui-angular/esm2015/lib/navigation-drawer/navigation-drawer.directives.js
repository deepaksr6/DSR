import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';
export class IgxNavDrawerItemDirective {
    constructor() {
        /**
         * @hidden
         */
        this.active = false;
        /**
         * @hidden
         */
        this.isHeader = false;
        /**
         * @hidden
         */
        this.activeClass = 'igx-nav-drawer__item--active';
    }
    /**
     * @hidden
     */
    get defaultCSS() {
        return !this.active && !this.isHeader;
    }
    /**
     * @hidden
     */
    get currentCSS() {
        return this.active && !this.isHeader;
    }
    /**
     * @hidden
     */
    get headerCSS() {
        return this.isHeader;
    }
}
IgxNavDrawerItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDrawerItem]',
                exportAs: 'igxDrawerItem'
            },] }
];
IgxNavDrawerItemDirective.propDecorators = {
    active: [{ type: Input, args: ['active',] }],
    isHeader: [{ type: Input, args: ['isHeader',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-nav-drawer__item',] }],
    currentCSS: [{ type: HostBinding, args: ['class.igx-nav-drawer__item--active',] }],
    headerCSS: [{ type: HostBinding, args: ['class.igx-nav-drawer__item--header',] }]
};
export class IgxNavDrawerTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxNavDrawerTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDrawer]'
            },] }
];
IgxNavDrawerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxNavDrawerMiniTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxNavDrawerMiniTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDrawerMini]'
            },] }
];
IgxNavDrawerMiniTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1kcmF3ZXIuZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9pZ25pdGV1aS1hbmd1bGFyL2lnbml0ZXVpLWFuZ3VsYXIvcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvbmF2aWdhdGlvbi1kcmF3ZXIvbmF2aWdhdGlvbi1kcmF3ZXIuZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNFLE1BQU0sT0FBTyx5QkFBeUI7SUFKdEM7UUFNSTs7V0FFRztRQUNxQixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXZDOztXQUVHO1FBQ3VCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFM0M7O1dBRUc7UUFDYSxnQkFBVyxHQUFHLDhCQUE4QixDQUFDO0lBeUJqRSxDQUFDO0lBdkJHOztPQUVHO0lBQ0gsSUFDSSxVQUFVO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQ0ksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFDSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7OztZQTNDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsUUFBUSxFQUFFLGVBQWU7YUFDNUI7OztxQkFNSSxLQUFLLFNBQUMsUUFBUTt1QkFLZCxLQUFLLFNBQUMsVUFBVTt5QkFVaEIsV0FBVyxTQUFDLDRCQUE0Qjt5QkFReEMsV0FBVyxTQUFDLG9DQUFvQzt3QkFRaEQsV0FBVyxTQUFDLG9DQUFvQzs7QUFTckQsTUFBTSxPQUFPLDZCQUE2QjtJQUV0QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUM1QyxDQUFDOzs7WUFOTCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7YUFDMUI7OztZQWxEdUMsV0FBVzs7QUE0RG5ELE1BQU0sT0FBTyxpQ0FBaUM7SUFFMUMsWUFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFDNUMsQ0FBQzs7O1lBTkwsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7YUFDOUI7OztZQTNEdUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcmF3ZXJJdGVtXScsXG4gICAgZXhwb3J0QXM6ICdpZ3hEcmF3ZXJJdGVtJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZEcmF3ZXJJdGVtRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASW5wdXQoJ2FjdGl2ZScpIHB1YmxpYyBhY3RpdmUgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASW5wdXQoJ2lzSGVhZGVyJykgcHVibGljIGlzSGVhZGVyID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGFjdGl2ZUNsYXNzID0gJ2lneC1uYXYtZHJhd2VyX19pdGVtLS1hY3RpdmUnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LW5hdi1kcmF3ZXJfX2l0ZW0nKVxuICAgIGdldCBkZWZhdWx0Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuYWN0aXZlICYmICF0aGlzLmlzSGVhZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1uYXYtZHJhd2VyX19pdGVtLS1hY3RpdmUnKVxuICAgIGdldCBjdXJyZW50Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuaXNIZWFkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LW5hdi1kcmF3ZXJfX2l0ZW0tLWhlYWRlcicpXG4gICAgZ2V0IGhlYWRlckNTUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIZWFkZXI7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcmF3ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZEcmF3ZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcmF3ZXJNaW5pXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TmF2RHJhd2VyTWluaVRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge1xuICAgICB9XG59XG4iXX0=