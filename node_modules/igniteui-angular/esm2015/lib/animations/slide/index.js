import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
const base = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `{{fromPosition}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        opacity: `{{endOpacity}}`,
        transform: `{{toPosition}}`
    }))
];
const baseInParams = {
    delay: '0s',
    duration: '350ms',
    easing: EaseOut.quad,
    endOpacity: 1,
    fromPosition: 'translateY(-500px)',
    startOpacity: 0,
    toPosition: 'translateY(0)'
};
const baseOutParams = {
    delay: '0s',
    duration: '350ms',
    easing: EaseIn.quad,
    endOpacity: 0,
    fromPosition: 'translateY(0)',
    startOpacity: 1,
    toPosition: 'translateY(-500px)'
};
const slideInTop = animation(base, { params: baseInParams });
const slideInLeft = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateX(-500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
const slideInRight = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateX(500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
const slideInBottom = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateY(500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
const slideInTr = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { fromPosition: 'translateY(-500px) translateX(500px)', toPosition: 'translateY(0) translateX(0)' })
});
const slideInTl = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { fromPosition: 'translateY(-500px) translateX(-500px)', toPosition: 'translateY(0) translateX(0)' })
});
const slideInBr = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { fromPosition: 'translateY(500px) translateX(500px)', toPosition: 'translateY(0) translateX(0)' })
});
const slideInBl = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { fromPosition: 'translateY(500px) translateX(-500px)', toPosition: 'translateY(0) translateX(0)' })
});
const slideOutTop = animation(base, { params: baseOutParams });
const slideOutRight = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { toPosition: 'translateX(500px)' })
});
const slideOutBottom = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseIn.quad,
        endOpacity: 0,
        fromPosition: 'translateY(0)',
        startOpacity: 1,
        toPosition: 'translateY(500px)'
    }
});
const slideOutLeft = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { toPosition: 'translateX(-500px)' })
});
const slideOutTr = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(-500px) translateX(500px)' })
});
const slideOutBr = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(500px) translateX(500px)' })
});
const slideOutBl = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(500px) translateX(-500px)' })
});
const slideOutTl = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(-500px) translateX(-500px)' })
});
export { slideInTop, slideInRight, slideInBottom, slideInLeft, slideInTr, slideInBr, slideInBl, slideInTl, slideOutTop, slideOutBottom, slideOutRight, slideOutLeft, slideOutTr, slideOutBr, slideOutBl, slideOutTl };
//# sourceMappingURL=data:application/json;base64,