import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
const baseRecipe = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        offset: 0,
        opacity: `{{endOpacity}}`,
        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }))
];
const baseInParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.quad,
    endAngle: 0,
    endOpacity: 1,
    rotateX: 0,
    rotateY: 0,
    rotateZ: 1,
    startAngle: -360,
    startOpacity: 0,
    xPos: 'center',
    yPos: 'center'
};
const baseOutParams = Object.assign(Object.assign({}, baseInParams), { easing: EaseIn.quad, endOpacity: 0, startOpacity: 1 });
const rotateInCenter = animation(baseRecipe, {
    params: Object.assign({}, baseInParams)
});
const rotateOutCenter = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams)
});
const rotateInTop = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'top' })
});
const rotateOutTop = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'top' })
});
const rotateInRight = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'right' })
});
const rotateOutRight = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'right' })
});
const rotateInBottom = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'bottom' })
});
const rotateOutBottom = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'bottom' })
});
const rotateInLeft = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'left' })
});
const rotateOutLeft = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'left' })
});
const rotateInTr = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'right', yPos: 'top' })
});
const rotateOutTr = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'right', yPos: 'top' })
});
const rotateInBr = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'right', yPos: 'bottom' })
});
const rotateOutBr = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'right', yPos: 'bottom' })
});
const rotateInBl = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'left', yPos: 'bottom' })
});
const rotateOutBl = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'left', yPos: 'bottom' })
});
const rotateInTl = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: 'left', yPos: 'top' })
});
const rotateOutTl = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: 'left', yPos: 'top' })
});
const rotateInDiagonal1 = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
const rotateOutDiagonal1 = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
const rotateInDiagonal2 = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
const rotateOutDiagonal2 = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
const rotateInHor = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
const rotateOutHor = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
const rotateInVer = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseInParams), { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
const rotateOutVer = animation(baseRecipe, {
    params: Object.assign(Object.assign({}, baseOutParams), { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
export { rotateInCenter, rotateInTop, rotateInRight, rotateInLeft, rotateInBottom, rotateInTr, rotateInBr, rotateInBl, rotateInTl, rotateInDiagonal1, rotateInDiagonal2, rotateInHor, rotateInVer, rotateOutCenter, rotateOutTop, rotateOutRight, rotateOutLeft, rotateOutBottom, rotateOutTr, rotateOutBr, rotateOutBl, rotateOutTl, rotateOutDiagonal1, rotateOutDiagonal2, rotateOutHor, rotateOutVer };
//# sourceMappingURL=data:application/json;base64,