import { animate, animation, style } from '@angular/animations';
import { EaseOut } from '../easings';
const base = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `scale{{direction}}({{fromScale}})`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        opacity: `{{endOpacity}}`,
        transform: `scale{{direction}}({{toScale}})`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }))
];
const baseInParams = {
    delay: '0s',
    direction: '',
    duration: '350ms',
    easing: EaseOut.quad,
    endOpacity: 1,
    fromScale: .5,
    startOpacity: 0,
    toScale: 1,
    xPos: '50%',
    yPos: '50%'
};
const baseOutParams = Object.assign(Object.assign({}, baseInParams), { easing: EaseOut.sine, endOpacity: 0, fromScale: 1, startOpacity: 1, toScale: .5 });
const scaleInCenter = animation(base, { params: baseInParams });
const scaleInBl = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '0', yPos: '100%' })
});
const scaleInVerCenter = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { direction: 'Y', fromScale: .4 })
});
const scaleInTop = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '50%', yPos: '0' })
});
const scaleInLeft = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '0', yPos: '50%' })
});
const scaleInVerTop = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { direction: 'Y', fromScale: .4, xPos: '100%', yPos: '0' })
});
const scaleInTr = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '100%', yPos: '0' })
});
const scaleInTl = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '0', yPos: '0' })
});
const scaleInVerBottom = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { direction: 'Y', fromScale: .4, xPos: '0', yPos: '100%' })
});
const scaleInRight = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '100%', yPos: '50%' })
});
const scaleInHorCenter = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { direction: 'X', fromScale: .4 })
});
const scaleInBr = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '100%', yPos: '100%' })
});
const scaleInHorLeft = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { direction: 'X', fromScale: .4, xPos: '0', yPos: '0' })
});
const scaleInBottom = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { xPos: '50%', yPos: '100%' })
});
const scaleInHorRight = animation(base, {
    params: Object.assign(Object.assign({}, baseInParams), { direction: 'X', fromScale: .4, xPos: '100%', yPos: '100%' })
});
const scaleOutCenter = animation(base, { params: baseOutParams });
const scaleOutBl = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '0', yPos: '100%' })
});
const scaleOutBr = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '100%', yPos: '100%' })
});
const scaleOutVerCenter = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { direction: 'Y', toScale: .3 })
});
const scaleOutVerTop = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { direction: 'Y', toScale: .3, xPos: '100%', yPos: '0' })
});
const scaleOutVerBottom = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { direction: 'Y', toScale: .3, xPos: '0', yPos: '100%' })
});
const scaleOutTop = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '50%', yPos: '0' })
});
const scaleOutLeft = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '0', yPos: '50%' })
});
const scaleOutTr = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '100%', yPos: '0' })
});
const scaleOutTl = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '0', yPos: '0' })
});
const scaleOutRight = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '100%', yPos: '50%' })
});
const scaleOutBottom = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { xPos: '50%', yPos: '100%' })
});
const scaleOutHorCenter = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { direction: 'X', toScale: .3 })
});
const scaleOutHorLeft = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { direction: 'X', toScale: .3, xPos: '0', yPos: '0' })
});
const scaleOutHorRight = animation(base, {
    params: Object.assign(Object.assign({}, baseOutParams), { direction: 'X', toScale: .3, xPos: '100%', yPos: '100%' })
});
export { scaleInTop, scaleInRight, scaleInBottom, scaleInLeft, scaleInCenter, scaleInTr, scaleInBr, scaleInBl, scaleInTl, scaleInVerTop, scaleInVerBottom, scaleInVerCenter, scaleInHorCenter, scaleInHorLeft, scaleInHorRight, scaleOutTop, scaleOutRight, scaleOutBottom, scaleOutLeft, scaleOutCenter, scaleOutTr, scaleOutBr, scaleOutBl, scaleOutTl, scaleOutVerTop, scaleOutVerBottom, scaleOutVerCenter, scaleOutHorCenter, scaleOutHorLeft, scaleOutHorRight };
//# sourceMappingURL=data:application/json;base64,