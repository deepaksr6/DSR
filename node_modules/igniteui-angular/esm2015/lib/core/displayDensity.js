import { InjectionToken, Input, Output, EventEmitter, Directive, NgModule, Optional, Inject } from '@angular/core';
import { mkenum } from './utils';
/**
 * Defines the possible values of the components' display density.
 */
export const DisplayDensity = mkenum({
    comfortable: 'comfortable',
    cosy: 'cosy',
    compact: 'compact'
});
/**
 * Defines the DisplayDensity DI token.
 */
export const DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * Base class containing all logic required for implementing DisplayDensity.
 */
// tslint:disable-next-line: directive-class-suffix
export class DisplayDensityBase {
    constructor(displayDensityOptions) {
        this.displayDensityOptions = displayDensityOptions;
        this.onDensityChanged = new EventEmitter();
        this.oldDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };
        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);
    }
    /**
     * Returns the theme of the component.
     * The default theme is `comfortable`.
     * Available options are `comfortable`, `cosy`, `compact`.
     * ```typescript
     * let componentTheme = this.component.displayDensity;
     * ```
     */
    get displayDensity() {
        return this._displayDensity ||
            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);
    }
    /**
     * Sets the theme of the component.
     */
    set displayDensity(val) {
        const currentDisplayDensity = this._displayDensity;
        this._displayDensity = val;
        if (currentDisplayDensity !== this._displayDensity) {
            const densityChangedArgs = {
                oldDensity: currentDisplayDensity,
                newDensity: this._displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
        }
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.initialDensity = this._displayDensity;
    }
    ngDoCheck() {
        if (!this._displayDensity && this.displayDensityOptions &&
            this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {
            const densityChangedArgs = {
                oldDensity: this.oldDisplayDensityOptions.displayDensity,
                newDensity: this.displayDensityOptions.displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);
        }
    }
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     */
    getComponentDensityClass(baseStyleClass) {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return `${baseStyleClass}--${DisplayDensity.cosy}`;
            case DisplayDensity.compact:
                return `${baseStyleClass}--${DisplayDensity.compact}`;
            default:
                return baseStyleClass;
        }
    }
}
DisplayDensityBase.decorators = [
    { type: Directive, args: [{
                selector: '[igxDisplayDensityBase]'
            },] }
];
DisplayDensityBase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
DisplayDensityBase.propDecorators = {
    displayDensity: [{ type: Input }],
    onDensityChanged: [{ type: Output }]
};
export class IgxDisplayDensityModule {
}
IgxDisplayDensityModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DisplayDensityBase
                ],
                exports: [
                    DisplayDensityBase
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheURlbnNpdHkuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvcnVubmVyL3dvcmsvaWduaXRldWktYW5ndWxhci9pZ25pdGV1aS1hbmd1bGFyL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGlzcGxheURlbnNpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBbUIsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BJLE9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQztJQUNqQyxXQUFXLEVBQUUsYUFBYTtJQUMxQixJQUFJLEVBQUUsTUFBTTtJQUNaLE9BQU8sRUFBRSxTQUFTO0NBQ3JCLENBQUMsQ0FBQztBQWVIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQXlCLGdCQUFnQixDQUFDLENBQUM7QUFFaEc7O0dBRUc7QUFJSCxtREFBbUQ7QUFDbkQsTUFBTSxPQUFPLGtCQUFrQjtJQTZDM0IsWUFBK0QscUJBQTZDO1FBQTdDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBd0I7UUFMckcscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7UUFFN0QsNkJBQXdCLEdBQTJCLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUl4RyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUF2Q0Q7Ozs7Ozs7T0FPRztJQUNILElBQ1csY0FBYztRQUNyQixPQUFPLElBQUksQ0FBQyxlQUFlO1lBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGNBQWMsQ0FBQyxHQUE0QjtRQUNsRCxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDbkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFxQixDQUFDO1FBRTdDLElBQUkscUJBQXFCLEtBQUssSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNoRCxNQUFNLGtCQUFrQixHQUE2QjtnQkFDakQsVUFBVSxFQUFFLHFCQUFxQjtnQkFDakMsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlO2FBQ25DLENBQUM7WUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0lBWUQ7O09BRUc7SUFDSSxRQUFRO1FBQ1gsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQy9DLENBQUM7SUFFTSxTQUFTO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLHFCQUFxQjtZQUMvQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLEVBQUU7WUFDaEcsTUFBTSxrQkFBa0IsR0FBNkI7Z0JBQ2pELFVBQVUsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYztnQkFDeEQsVUFBVSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjO2FBQ3hELENBQUM7WUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQzVHO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNPLHdCQUF3QixDQUFDLGNBQXNCO1FBQ3JELFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN6QixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixPQUFPLEdBQUcsY0FBYyxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2RCxLQUFLLGNBQWMsQ0FBQyxPQUFPO2dCQUN2QixPQUFPLEdBQUcsY0FBYyxLQUFLLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMxRDtnQkFDSSxPQUFPLGNBQWMsQ0FBQztTQUM3QjtJQUNMLENBQUM7OztZQXRGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjthQUN0Qzs7OzRDQStDZ0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7Ozs2QkE3QmxELEtBQUs7K0JBdUJMLE1BQU07O0FBc0RYLE1BQU0sT0FBTyx1QkFBdUI7OztZQVJuQyxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFO29CQUNWLGtCQUFrQjtpQkFDckI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLGtCQUFrQjtpQkFDckI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERvQ2hlY2ssIE9uSW5pdCwgRGlyZWN0aXZlLCBOZ01vZHVsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MsIG1rZW51bSB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIERlZmluZXMgdGhlIHBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgY29tcG9uZW50cycgZGlzcGxheSBkZW5zaXR5LlxuICovXG5leHBvcnQgY29uc3QgRGlzcGxheURlbnNpdHkgPSBta2VudW0oe1xuICAgIGNvbWZvcnRhYmxlOiAnY29tZm9ydGFibGUnLFxuICAgIGNvc3k6ICdjb3N5JyxcbiAgICBjb21wYWN0OiAnY29tcGFjdCdcbn0pO1xuZXhwb3J0IHR5cGUgRGlzcGxheURlbnNpdHkgPSAodHlwZW9mIERpc3BsYXlEZW5zaXR5KVtrZXlvZiB0eXBlb2YgRGlzcGxheURlbnNpdHldO1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgb2JqZWN0IHVzZWQgdG8gY29uZmlndXJlIHRoZSBEaXNwbGF5RGVuc2l0eSBpbiBBbmd1bGFyIERJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEaXNwbGF5RGVuc2l0eU9wdGlvbnMge1xuICAgIGRpc3BsYXlEZW5zaXR5OiBEaXNwbGF5RGVuc2l0eTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGVuc2l0eUNoYW5nZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgb2xkRGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG4gICAgbmV3RGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgRGlzcGxheURlbnNpdHkgREkgdG9rZW4uXG4gKi9cbmV4cG9ydCBjb25zdCBEaXNwbGF5RGVuc2l0eVRva2VuID0gbmV3IEluamVjdGlvblRva2VuPElEaXNwbGF5RGVuc2l0eU9wdGlvbnM+KCdEaXNwbGF5RGVuc2l0eScpO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgY29udGFpbmluZyBhbGwgbG9naWMgcmVxdWlyZWQgZm9yIGltcGxlbWVudGluZyBEaXNwbGF5RGVuc2l0eS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGlzcGxheURlbnNpdHlCYXNlXSdcbn0pXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbmV4cG9ydCBjbGFzcyBEaXNwbGF5RGVuc2l0eUJhc2UgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkluaXQge1xuICAgIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHk6IERpc3BsYXlEZW5zaXR5O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpbml0aWFsRGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIFRoZSBkZWZhdWx0IHRoZW1lIGlzIGBjb21mb3J0YWJsZWAuXG4gICAgICogQXZhaWxhYmxlIG9wdGlvbnMgYXJlIGBjb21mb3J0YWJsZWAsIGBjb3N5YCwgYGNvbXBhY3RgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29tcG9uZW50VGhlbWUgPSB0aGlzLmNvbXBvbmVudC5kaXNwbGF5RGVuc2l0eTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZGlzcGxheURlbnNpdHkoKTogRGlzcGxheURlbnNpdHkgfCBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlbnNpdHkgfHxcbiAgICAgICAgICAgICgodGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkpIHx8IERpc3BsYXlEZW5zaXR5LmNvbWZvcnRhYmxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZGlzcGxheURlbnNpdHkodmFsOiBEaXNwbGF5RGVuc2l0eSB8IHN0cmluZykge1xuICAgICAgICBjb25zdCBjdXJyZW50RGlzcGxheURlbnNpdHkgPSB0aGlzLl9kaXNwbGF5RGVuc2l0eTtcbiAgICAgICAgdGhpcy5fZGlzcGxheURlbnNpdHkgPSB2YWwgYXMgRGlzcGxheURlbnNpdHk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnREaXNwbGF5RGVuc2l0eSAhPT0gdGhpcy5fZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHlDaGFuZ2VkQXJnczogSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIG9sZERlbnNpdHk6IGN1cnJlbnREaXNwbGF5RGVuc2l0eSxcbiAgICAgICAgICAgICAgICBuZXdEZW5zaXR5OiB0aGlzLl9kaXNwbGF5RGVuc2l0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5vbkRlbnNpdHlDaGFuZ2VkLmVtaXQoZGVuc2l0eUNoYW5nZWRBcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkRlbnNpdHlDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxJRGVuc2l0eUNoYW5nZWRFdmVudEFyZ3M+KCk7XG5cbiAgICBwcm90ZWN0ZWQgb2xkRGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zID0geyBkaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHkuY29tZm9ydGFibGUgfTtcblxuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChEaXNwbGF5RGVuc2l0eVRva2VuKSBwcm90ZWN0ZWQgZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vbGREaXNwbGF5RGVuc2l0eU9wdGlvbnMsIGRpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbml0aWFsRGVuc2l0eSA9IHRoaXMuX2Rpc3BsYXlEZW5zaXR5O1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlzcGxheURlbnNpdHkgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9sZERpc3BsYXlEZW5zaXR5T3B0aW9ucy5kaXNwbGF5RGVuc2l0eSAhPT0gdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHlDaGFuZ2VkQXJnczogSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIG9sZERlbnNpdHk6IHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLmRpc3BsYXlEZW5zaXR5LFxuICAgICAgICAgICAgICAgIG5ld0RlbnNpdHk6IHRoaXMuZGlzcGxheURlbnNpdHlPcHRpb25zLmRpc3BsYXlEZW5zaXR5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLm9uRGVuc2l0eUNoYW5nZWQuZW1pdChkZW5zaXR5Q2hhbmdlZEFyZ3MpO1xuICAgICAgICAgICAgdGhpcy5vbGREaXNwbGF5RGVuc2l0eU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLCB0aGlzLmRpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHN0eWxlIGNsYXNzIG9mIGEgY29tcG9uZW50L2VsZW1lbnQgcmV0dXJucyB0aGUgbW9kaWZpZWQgdmVyc2lvbiBvZiBpdCBiYXNlZFxuICAgICAqIG9uIHRoZSBjdXJyZW50IGRpc3BsYXkgZGVuc2l0eS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0Q29tcG9uZW50RGVuc2l0eUNsYXNzKGJhc2VTdHlsZUNsYXNzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29zeTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZVN0eWxlQ2xhc3N9LS0ke0Rpc3BsYXlEZW5zaXR5LmNvc3l9YDtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29tcGFjdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZVN0eWxlQ2xhc3N9LS0ke0Rpc3BsYXlEZW5zaXR5LmNvbXBhY3R9YDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VTdHlsZUNsYXNzO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBEaXNwbGF5RGVuc2l0eUJhc2VcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgRGlzcGxheURlbnNpdHlCYXNlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hEaXNwbGF5RGVuc2l0eU1vZHVsZSB7fVxuIl19