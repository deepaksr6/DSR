import { Directive, HostListener, Input, NgModule } from '@angular/core';
import { IgxNavigationService } from './nav.service';
/**
 * Directive that can toggle targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavToggle="ID"> Toggle </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
export class IgxNavigationToggleDirective {
    constructor(nav) {
        this.state = nav;
    }
    toggleNavigationDrawer() {
        this.state.toggle(this.target, true);
    }
}
IgxNavigationToggleDirective.decorators = [
    { type: Directive, args: [{ selector: '[igxNavToggle]' },] }
];
IgxNavigationToggleDirective.ctorParameters = () => [
    { type: IgxNavigationService }
];
IgxNavigationToggleDirective.propDecorators = {
    target: [{ type: Input, args: ['igxNavToggle',] }],
    toggleNavigationDrawer: [{ type: HostListener, args: ['click',] }]
};
/**
 * Directive that can close targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavClose="ID"> Close </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
export class IgxNavigationCloseDirective {
    constructor(nav) {
        this.state = nav;
    }
    closeNavigationDrawer() {
        this.state.close(this.target, true);
    }
}
IgxNavigationCloseDirective.decorators = [
    { type: Directive, args: [{ selector: '[igxNavClose]' },] }
];
IgxNavigationCloseDirective.ctorParameters = () => [
    { type: IgxNavigationService }
];
IgxNavigationCloseDirective.propDecorators = {
    target: [{ type: Input, args: ['igxNavClose',] }],
    closeNavigationDrawer: [{ type: HostListener, args: ['click',] }]
};
/**
 * @hidden
 */
export class IgxNavigationModule {
}
IgxNavigationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
                exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
                providers: [IgxNavigationService]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9pZ25pdGV1aS1hbmd1bGFyL2lnbml0ZXVpLWFuZ3VsYXIvcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvY29yZS9uYXZpZ2F0aW9uL2RpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbkQ7Ozs7Ozs7O0dBUUc7QUFFSCxNQUFNLE9BQU8sNEJBQTRCO0lBS3JDLFlBQVksR0FBeUI7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDckIsQ0FBQztJQUdNLHNCQUFzQjtRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OztZQWJKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRTs7O1lBWGpDLG9CQUFvQjs7O3FCQWV2QixLQUFLLFNBQUMsY0FBYztxQ0FNcEIsWUFBWSxTQUFDLE9BQU87O0FBTXpCOzs7Ozs7OztHQVFHO0FBRUgsTUFBTSxPQUFPLDJCQUEyQjtJQUtwQyxZQUFZLEdBQXlCO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLENBQUM7SUFHTSxxQkFBcUI7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7WUFiSixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFOzs7WUFwQ2hDLG9CQUFvQjs7O3FCQXdDdkIsS0FBSyxTQUFDLGFBQWE7b0NBTW5CLFlBQVksU0FBQyxPQUFPOztBQU16Qjs7R0FFRztBQU1ILE1BQU0sT0FBTyxtQkFBbUI7OztZQUwvQixRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLENBQUMsMkJBQTJCLEVBQUUsNEJBQTRCLENBQUM7Z0JBQ3pFLE9BQU8sRUFBRSxDQUFDLDJCQUEyQixFQUFFLDRCQUE0QixDQUFDO2dCQUNwRSxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzthQUNwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SWd4TmF2aWdhdGlvblNlcnZpY2V9IGZyb20gJy4vbmF2LnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0aGF0IGNhbiB0b2dnbGUgdGFyZ2V0cyB0aHJvdWdoIHByb3ZpZGVkIE5hdmlnYXRpb25TZXJ2aWNlLlxuICpcbiAqIFVzYWdlOlxuICogYGBgXG4gKiA8YnV0dG9uIGlneE5hdlRvZ2dsZT1cIklEXCI+IFRvZ2dsZSA8L2J1dHRvbj5cbiAqIGBgYFxuICogV2hlcmUgdGhlIGBJRGAgbWF0Y2hlcyB0aGUgSUQgb2YgY29tcGF0aWJsZSBgSVRvZ2dsZVZpZXdgIGNvbXBvbmVudC5cbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2lneE5hdlRvZ2dsZV0nIH0pXG5leHBvcnQgY2xhc3MgSWd4TmF2aWdhdGlvblRvZ2dsZURpcmVjdGl2ZSB7XG4gICAgcHVibGljIHN0YXRlOiBJZ3hOYXZpZ2F0aW9uU2VydmljZTtcblxuICAgIEBJbnB1dCgnaWd4TmF2VG9nZ2xlJykgcHJpdmF0ZSB0YXJnZXQ7XG5cbiAgICBjb25zdHJ1Y3RvcihuYXY6IElneE5hdmlnYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuYXY7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIHB1YmxpYyB0b2dnbGVOYXZpZ2F0aW9uRHJhd2VyKCkge1xuICAgICAgICB0aGlzLnN0YXRlLnRvZ2dsZSh0aGlzLnRhcmdldCwgdHJ1ZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIERpcmVjdGl2ZSB0aGF0IGNhbiBjbG9zZSB0YXJnZXRzIHRocm91Z2ggcHJvdmlkZWQgTmF2aWdhdGlvblNlcnZpY2UuXG4gKlxuICogVXNhZ2U6XG4gKiBgYGBcbiAqIDxidXR0b24gaWd4TmF2Q2xvc2U9XCJJRFwiPiBDbG9zZSA8L2J1dHRvbj5cbiAqIGBgYFxuICogV2hlcmUgdGhlIGBJRGAgbWF0Y2hlcyB0aGUgSUQgb2YgY29tcGF0aWJsZSBgSVRvZ2dsZVZpZXdgIGNvbXBvbmVudC5cbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2lneE5hdkNsb3NlXScgfSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZpZ2F0aW9uQ2xvc2VEaXJlY3RpdmUge1xuICAgIHB1YmxpYyBzdGF0ZTogSWd4TmF2aWdhdGlvblNlcnZpY2U7XG5cbiAgICBASW5wdXQoJ2lneE5hdkNsb3NlJykgcHJpdmF0ZSB0YXJnZXQ7XG5cbiAgICBjb25zdHJ1Y3RvcihuYXY6IElneE5hdmlnYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuYXY7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIHB1YmxpYyBjbG9zZU5hdmlnYXRpb25EcmF3ZXIoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuY2xvc2UodGhpcy50YXJnZXQsIHRydWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbSWd4TmF2aWdhdGlvbkNsb3NlRGlyZWN0aXZlLCBJZ3hOYXZpZ2F0aW9uVG9nZ2xlRGlyZWN0aXZlXSxcbiAgICBleHBvcnRzOiBbSWd4TmF2aWdhdGlvbkNsb3NlRGlyZWN0aXZlLCBJZ3hOYXZpZ2F0aW9uVG9nZ2xlRGlyZWN0aXZlXSxcbiAgICBwcm92aWRlcnM6IFtJZ3hOYXZpZ2F0aW9uU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4TmF2aWdhdGlvbk1vZHVsZSB7fVxuIl19