import { Component, Input, HostBinding } from '@angular/core';
import { TicksOrientation, TickLabelsOrientation } from '../slider.common';
/**
 * @hidden
 */
export class IgxTicksComponent {
    constructor() {
        /**
         * @hidden
         */
        this.ticksClass = true;
    }
    /**
     * @hidden
     */
    get ticksTopClass() {
        return this.ticksOrientation === TicksOrientation.Top;
    }
    /**
     * @hidden
     */
    get hasPrimaryClass() {
        return this.primaryTicks > 0;
    }
    /**
     * @hidden
     */
    get labelsTopToBottomClass() {
        return this.tickLabelsOrientation === TickLabelsOrientation.TopToBottom;
    }
    /**
     * @hidden
     */
    get labelsBottomToTopClass() {
        return this.tickLabelsOrientation === TickLabelsOrientation.BottomToTop;
    }
    /**
     * Returns the template context corresponding to
     * {@link IgxTickLabelTemplateDirective}
     *
     * ```typescript
     * return {
     *  $implicit //returns the value per each tick label.
     *  isPrimery //returns if the tick is primary.
     *  labels // returns the {@link labels} collection.
     *  index // returns the index per each tick of the whole sequence.
     * }
     * ```
     *
     * @param idx the index per each tick label.
     */
    context(idx) {
        return {
            $implicit: this.tickLabel(idx),
            isPrimary: this.isPrimary(idx),
            labels: this.labels,
            index: idx
        };
    }
    /**
     * @hidden
     */
    get ticksLength() {
        return this.primaryTicks > 0 ?
            ((this.primaryTicks - 1) * this.secondaryTicks) + this.primaryTicks :
            this.secondaryTicks > 0 ? this.secondaryTicks : 0;
    }
    hiddenTickLabels(idx) {
        return this.isPrimary(idx) ? this.primaryTickLabels : this.secondaryTickLabels;
    }
    /**
     * @hidden
     */
    isPrimary(idx) {
        return this.primaryTicks <= 0 ? false :
            idx % (this.secondaryTicks + 1) === 0;
    }
    /**
     * @hidden
     */
    tickLabel(idx) {
        if (this.labelsViewEnabled) {
            return this.labels[idx];
        }
        const labelStep = (Math.max(this.minValue, this.maxValue) - Math.min(this.minValue, this.maxValue)) / (this.ticksLength - 1);
        const labelVal = labelStep * idx;
        return (this.minValue + labelVal).toFixed(2);
    }
}
IgxTicksComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-ticks',
                template: "<div class=\"igx-slider__ticks-group\" *ngFor=\"let n of [].constructor(ticksLength); let idx=index\" [ngClass]=\"{ 'igx-slider__ticks-group--tall': isPrimary(idx)}\">\n    <div class=\"igx-slider__ticks-tick\">\n        <span class=\"igx-slider__ticks-label\" [ngClass]=\"{ 'igx-slider__tick-label--hidden': !hiddenTickLabels(idx)}\">\n            <ng-container *ngTemplateOutlet=\"tickLabelTemplateRef ? tickLabelTemplateRef : tickLabelDefaultTemplate; context: context(idx)\"></ng-container>\n        </span>\n    </div>\n</div>\n\n<ng-template #tickLabelDefaultTemplate let-value>\n    {{ value }}\n</ng-template>\n"
            },] }
];
IgxTicksComponent.propDecorators = {
    primaryTicks: [{ type: Input }],
    secondaryTicks: [{ type: Input }],
    primaryTickLabels: [{ type: Input }],
    secondaryTickLabels: [{ type: Input }],
    ticksOrientation: [{ type: Input }],
    tickLabelsOrientation: [{ type: Input }],
    maxValue: [{ type: Input }],
    minValue: [{ type: Input }],
    labelsViewEnabled: [{ type: Input }],
    labels: [{ type: Input }],
    tickLabelTemplateRef: [{ type: Input }],
    ticksClass: [{ type: HostBinding, args: ['class.igx-slider__ticks',] }],
    ticksTopClass: [{ type: HostBinding, args: ['class.igx-slider__ticks--top',] }],
    hasPrimaryClass: [{ type: HostBinding, args: ['class.igx-slider__ticks--tall',] }],
    labelsTopToBottomClass: [{ type: HostBinding, args: ['class.igx-slider__tick-labels--top-bottom',] }],
    labelsBottomToTopClass: [{ type: HostBinding, args: ['class.igx-slider__tick-labels--bottom-top',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL2lnbml0ZXVpLWFuZ3VsYXIvaWduaXRldWktYW5ndWxhci9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zbGlkZXIvdGlja3MvdGlja3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFlLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzRTs7R0FFRztBQUtILE1BQU0sT0FBTyxpQkFBaUI7SUFKOUI7UUFzQ0k7O1dBRUc7UUFFSSxlQUFVLEdBQUcsSUFBSSxDQUFDO0lBNEY3QixDQUFDO0lBMUZHOztPQUVHO0lBQ0gsSUFDVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixLQUFLLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNXLGVBQWU7UUFDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNXLHNCQUFzQjtRQUM3QixPQUFPLElBQUksQ0FBQyxxQkFBcUIsS0FBSyxxQkFBcUIsQ0FBQyxXQUFXLENBQUM7SUFDNUUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFDVyxzQkFBc0I7UUFDN0IsT0FBTyxJQUFJLENBQUMscUJBQXFCLEtBQUsscUJBQXFCLENBQUMsV0FBVyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7T0FjRztJQUNJLE9BQU8sQ0FBQyxHQUFXO1FBQ3RCLE9BQU87WUFDSCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7WUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixLQUFLLEVBQUUsR0FBRztTQUNiLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFdBQVc7UUFDbEIsT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsR0FBVztRQUMvQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ25GLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFXO1FBQ3hCLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtRQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdILE1BQU0sUUFBUSxHQUFHLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFFakMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7OztZQXJJSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLHVuQkFBbUM7YUFDdEM7OzsyQkFFSSxLQUFLOzZCQUdMLEtBQUs7Z0NBR0wsS0FBSztrQ0FHTCxLQUFLOytCQUdMLEtBQUs7b0NBR0wsS0FBSzt1QkFHTCxLQUFLO3VCQUdMLEtBQUs7Z0NBR0wsS0FBSztxQkFHTCxLQUFLO21DQUdMLEtBQUs7eUJBTUwsV0FBVyxTQUFDLHlCQUF5Qjs0QkFNckMsV0FBVyxTQUFDLDhCQUE4Qjs4QkFRMUMsV0FBVyxTQUFDLCtCQUErQjtxQ0FRM0MsV0FBVyxTQUFDLDJDQUEyQztxQ0FRdkQsV0FBVyxTQUFDLDJDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGlja3NPcmllbnRhdGlvbiwgVGlja0xhYmVsc09yaWVudGF0aW9uIH0gZnJvbSAnLi4vc2xpZGVyLmNvbW1vbic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC10aWNrcycsXG4gICAgdGVtcGxhdGVVcmw6ICd0aWNrcy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIElneFRpY2tzQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBwcmltYXJ5VGlja3M6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNlY29uZGFyeVRpY2tzOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBwcmltYXJ5VGlja0xhYmVsczogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNlY29uZGFyeVRpY2tMYWJlbHM6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0aWNrc09yaWVudGF0aW9uOiBUaWNrc09yaWVudGF0aW9uO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGlja0xhYmVsc09yaWVudGF0aW9uOiBUaWNrTGFiZWxzT3JpZW50YXRpb247XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBtYXhWYWx1ZTogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbWluVmFsdWU6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGxhYmVsc1ZpZXdFbmFibGVkOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGFiZWxzOiBBcnJheTxudW1iZXIgfCBzdHJpbmcgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZD47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0aWNrTGFiZWxUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX3RpY2tzJylcbiAgICBwdWJsaWMgdGlja3NDbGFzcyA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX190aWNrcy0tdG9wJylcbiAgICBwdWJsaWMgZ2V0IHRpY2tzVG9wQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpY2tzT3JpZW50YXRpb24gPT09IFRpY2tzT3JpZW50YXRpb24uVG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX3RpY2tzLS10YWxsJylcbiAgICBwdWJsaWMgZ2V0IGhhc1ByaW1hcnlDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeVRpY2tzID4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX190aWNrLWxhYmVscy0tdG9wLWJvdHRvbScpXG4gICAgcHVibGljIGdldCBsYWJlbHNUb3BUb0JvdHRvbUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrTGFiZWxzT3JpZW50YXRpb24gPT09IFRpY2tMYWJlbHNPcmllbnRhdGlvbi5Ub3BUb0JvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX190aWNrLWxhYmVscy0tYm90dG9tLXRvcCcpXG4gICAgcHVibGljIGdldCBsYWJlbHNCb3R0b21Ub1RvcENsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrTGFiZWxzT3JpZW50YXRpb24gPT09IFRpY2tMYWJlbHNPcmllbnRhdGlvbi5Cb3R0b21Ub1RvcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBjb250ZXh0IGNvcnJlc3BvbmRpbmcgdG9cbiAgICAgKiB7QGxpbmsgSWd4VGlja0xhYmVsVGVtcGxhdGVEaXJlY3RpdmV9XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcmV0dXJuIHtcbiAgICAgKiAgJGltcGxpY2l0IC8vcmV0dXJucyB0aGUgdmFsdWUgcGVyIGVhY2ggdGljayBsYWJlbC5cbiAgICAgKiAgaXNQcmltZXJ5IC8vcmV0dXJucyBpZiB0aGUgdGljayBpcyBwcmltYXJ5LlxuICAgICAqICBsYWJlbHMgLy8gcmV0dXJucyB0aGUge0BsaW5rIGxhYmVsc30gY29sbGVjdGlvbi5cbiAgICAgKiAgaW5kZXggLy8gcmV0dXJucyB0aGUgaW5kZXggcGVyIGVhY2ggdGljayBvZiB0aGUgd2hvbGUgc2VxdWVuY2UuXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGlkeCB0aGUgaW5kZXggcGVyIGVhY2ggdGljayBsYWJlbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29udGV4dChpZHg6IG51bWJlcik6IGFueSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkaW1wbGljaXQ6IHRoaXMudGlja0xhYmVsKGlkeCksXG4gICAgICAgICAgICBpc1ByaW1hcnk6IHRoaXMuaXNQcmltYXJ5KGlkeCksXG4gICAgICAgICAgICBsYWJlbHM6IHRoaXMubGFiZWxzLFxuICAgICAgICAgICAgaW5kZXg6IGlkeFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHRpY2tzTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmltYXJ5VGlja3MgPiAwID9cbiAgICAgICAgICAgICAgICAoKHRoaXMucHJpbWFyeVRpY2tzIC0gMSkgKiB0aGlzLnNlY29uZGFyeVRpY2tzKSArIHRoaXMucHJpbWFyeVRpY2tzIDpcbiAgICAgICAgICAgICAgICB0aGlzLnNlY29uZGFyeVRpY2tzID4gMCA/IHRoaXMuc2Vjb25kYXJ5VGlja3MgOiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRkZW5UaWNrTGFiZWxzKGlkeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzUHJpbWFyeShpZHgpID8gdGhpcy5wcmltYXJ5VGlja0xhYmVscyA6IHRoaXMuc2Vjb25kYXJ5VGlja0xhYmVscztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGlzUHJpbWFyeShpZHg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmltYXJ5VGlja3MgPD0gMCA/IGZhbHNlIDpcbiAgICAgICAgICAgIGlkeCAlICh0aGlzLnNlY29uZGFyeVRpY2tzICsgMSkgPT09IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyB0aWNrTGFiZWwoaWR4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubGFiZWxzVmlld0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsc1tpZHhdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFiZWxTdGVwID0gKE1hdGgubWF4KHRoaXMubWluVmFsdWUsIHRoaXMubWF4VmFsdWUpIC0gTWF0aC5taW4odGhpcy5taW5WYWx1ZSwgdGhpcy5tYXhWYWx1ZSkpIC8gKHRoaXMudGlja3NMZW5ndGggLSAxKTtcbiAgICAgICAgY29uc3QgbGFiZWxWYWwgPSBsYWJlbFN0ZXAgKiBpZHg7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLm1pblZhbHVlICsgbGFiZWxWYWwpLnRvRml4ZWQoMik7XG4gICAgfVxufVxuIl19