import { Directive } from '@angular/core';
/**
 * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbFromTemplateDirective {
}
IgxThumbFromTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbFrom]'
            },] }
];
/**
 * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbToTemplateDirective {
}
IgxThumbToTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbTo]'
            },] }
];
/**
 * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}
 *
 * @context {@link IgxTicksComponent.context}
 */
export class IgxTickLabelTemplateDirective {
}
IgxTickLabelTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderTickLabel]'
            },] }
];
export var IgxSliderType;
(function (IgxSliderType) {
    /**
     * Slider with single thumb.
     */
    IgxSliderType[IgxSliderType["SLIDER"] = 0] = "SLIDER";
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    IgxSliderType[IgxSliderType["RANGE"] = 1] = "RANGE";
})(IgxSliderType || (IgxSliderType = {}));
export var SliderHandle;
(function (SliderHandle) {
    SliderHandle[SliderHandle["FROM"] = 0] = "FROM";
    SliderHandle[SliderHandle["TO"] = 1] = "TO";
})(SliderHandle || (SliderHandle = {}));
/**
 * Slider Tick labels Orientation
 */
export var TickLabelsOrientation;
(function (TickLabelsOrientation) {
    TickLabelsOrientation[TickLabelsOrientation["Horizontal"] = 0] = "Horizontal";
    TickLabelsOrientation[TickLabelsOrientation["TopToBottom"] = 1] = "TopToBottom";
    TickLabelsOrientation[TickLabelsOrientation["BottomToTop"] = 2] = "BottomToTop";
})(TickLabelsOrientation || (TickLabelsOrientation = {}));
/**
 * Slider Ticks orientation
 */
export var TicksOrientation;
(function (TicksOrientation) {
    TicksOrientation[TicksOrientation["Top"] = 0] = "Top";
    TicksOrientation[TicksOrientation["Bottom"] = 1] = "Bottom";
    TicksOrientation[TicksOrientation["Mirror"] = 2] = "Mirror";
})(TicksOrientation || (TicksOrientation = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9pZ25pdGV1aS1hbmd1bGFyL2lnbml0ZXVpLWFuZ3VsYXIvcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvc2xpZGVyL3NsaWRlci5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcxQzs7Ozs7Ozs7OztHQVVHO0FBSUgsTUFBTSxPQUFPLDZCQUE2Qjs7O1lBSHpDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOztBQUdEOzs7Ozs7Ozs7O0dBVUc7QUFJSCxNQUFNLE9BQU8sMkJBQTJCOzs7WUFIdkMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7YUFDakM7O0FBR0Q7Ozs7R0FJRztBQUlILE1BQU0sT0FBTyw2QkFBNkI7OztZQUh6QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7QUFhRCxNQUFNLENBQU4sSUFBWSxhQVNYO0FBVEQsV0FBWSxhQUFhO0lBQ3JCOztPQUVHO0lBQ0gscURBQU0sQ0FBQTtJQUNOOztPQUVHO0lBQ0gsbURBQUssQ0FBQTtBQUNULENBQUMsRUFUVyxhQUFhLEtBQWIsYUFBYSxRQVN4QjtBQUVELE1BQU0sQ0FBTixJQUFZLFlBR1g7QUFIRCxXQUFZLFlBQVk7SUFDcEIsK0NBQUksQ0FBQTtJQUNKLDJDQUFFLENBQUE7QUFDTixDQUFDLEVBSFcsWUFBWSxLQUFaLFlBQVksUUFHdkI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLHFCQUlYO0FBSkQsV0FBWSxxQkFBcUI7SUFDN0IsNkVBQVUsQ0FBQTtJQUNWLCtFQUFXLENBQUE7SUFDWCwrRUFBVyxDQUFBO0FBQ2YsQ0FBQyxFQUpXLHFCQUFxQixLQUFyQixxQkFBcUIsUUFJaEM7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQUlYO0FBSkQsV0FBWSxnQkFBZ0I7SUFDeEIscURBQUcsQ0FBQTtJQUNILDJEQUFNLENBQUE7SUFDTiwyREFBTSxDQUFBO0FBQ1YsQ0FBQyxFQUpXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFJM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUgcmVwcmVzZW50aW5nIHRoZSBsb3dlciBsYWJlbCB2YWx1ZSBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBgYGBodG1sXG4gKiA8aWd4LXNsaWRlcj5cbiAqICA8bmctdGVtcGxhdGUgaWd4U2xpZGVyVGh1bWJGcm9tIGxldC12YWx1ZSBsZXQtbGFiZWxzPnt7dmFsdWV9fTwvbmctdGVtcGxhdGU+XG4gKiA8L2lneC1zbGlkZXI+XG4gKiBgYGBcbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50LmNvbnRleHR9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFNsaWRlclRodW1iRnJvbV0nXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iRnJvbVRlbXBsYXRlRGlyZWN0aXZlIHt9XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUgcmVwcmVzZW50aW5nIHRoZSB1cHBlciBsYWJlbCB2YWx1ZSBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBgYGBodG1sXG4gKiA8aWd4LXNsaWRlcj5cbiAqICA8bmctdGVtcGxhdGUgaWd4U2xpZGVyVGh1bWJUbyBsZXQtdmFsdWUgbGV0LWxhYmVscz57e3ZhbHVlfX08L25nLXRlbXBsYXRlPlxuICogPC9pZ3gtc2xpZGVyPlxuICogYGBgXG4gKlxuICogQGNvbnRleHQge0BsaW5rIElneFNsaWRlckNvbXBvbmVudC5jb250ZXh0fVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hTbGlkZXJUaHVtYlRvXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGh1bWJUb1RlbXBsYXRlRGlyZWN0aXZlIHt9XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUsIHJlcHJlc2V0aW5nIHByaW1hcnkvc2Vjb25kYXJ5IHRpY2sgbGFiZWxzIG9mIHRoZSB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50fVxuICpcbiAqIEBjb250ZXh0IHtAbGluayBJZ3hUaWNrc0NvbXBvbmVudC5jb250ZXh0fVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hTbGlkZXJUaWNrTGFiZWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaWNrTGFiZWxUZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIElSYW5nZVNsaWRlclZhbHVlIHtcbiAgICBsb3dlcjogbnVtYmVyO1xuICAgIHVwcGVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNsaWRlclZhbHVlQ2hhbmdlRXZlbnRBcmdzIHtcbiAgICBvbGRWYWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWU7XG4gICAgdmFsdWU6IG51bWJlciB8IElSYW5nZVNsaWRlclZhbHVlO1xufVxuXG5leHBvcnQgZW51bSBJZ3hTbGlkZXJUeXBlIHtcbiAgICAvKipcbiAgICAgKiBTbGlkZXIgd2l0aCBzaW5nbGUgdGh1bWIuXG4gICAgICovXG4gICAgU0xJREVSLFxuICAgIC8qKlxuICAgICAqICBSYW5nZSBzbGlkZXIgd2l0aCBtdWx0aXBsZSB0aHVtYnMsIHRoYXQgY2FuIG1hcmsgdGhlIHJhbmdlLlxuICAgICAqL1xuICAgIFJBTkdFXG59XG5cbmV4cG9ydCBlbnVtIFNsaWRlckhhbmRsZSB7XG4gICAgRlJPTSxcbiAgICBUT1xufVxuXG4vKipcbiAqIFNsaWRlciBUaWNrIGxhYmVscyBPcmllbnRhdGlvblxuICovXG5leHBvcnQgZW51bSBUaWNrTGFiZWxzT3JpZW50YXRpb24ge1xuICAgIEhvcml6b250YWwsXG4gICAgVG9wVG9Cb3R0b20sXG4gICAgQm90dG9tVG9Ub3Bcbn1cblxuLyoqXG4gKiBTbGlkZXIgVGlja3Mgb3JpZW50YXRpb25cbiAqL1xuZXhwb3J0IGVudW0gVGlja3NPcmllbnRhdGlvbiB7XG4gICAgVG9wLFxuICAgIEJvdHRvbSxcbiAgICBNaXJyb3Jcbn1cbiJdfQ==