import { IgxGridActionButtonComponent } from './grid-action-button.component';
import { Directive, Input, ViewChildren, IterableDiffers } from '@angular/core';
import { IgxRowDirective } from '../../grids/row.directive';
import { IgxIconService } from '../../icon/icon.service';
export class IgxGridActionsBaseDirective {
    constructor(iconService, differs) {
        this.iconService = iconService;
        this.differs = differs;
        /**
         * Gets/Sets if the action buttons will be rendered as menu items. When in menu, items will be rendered with text label.
         * @example
         * ```html
         *  <igx-grid-pinning-actions [asMenuItems]='true'></igx-grid-pinning-actions>
         *  <igx-grid-editing-actions [asMenuItems]='true'></igx-grid-editing-actions>
         * ```
         */
        this.asMenuItems = false;
    }
    /**
     * @hidden
     * @internal
     */
    get grid() {
        return this.strip.context.grid;
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit() {
        if (this.asMenuItems) {
            this.buttons.changes.subscribe((change) => {
                this.strip.cdr.detectChanges();
            });
        }
    }
    /**
     * Getter to be used in template
     * @hidden
     * @internal
     */
    get isRowContext() {
        return this.isRow(this.strip.context) && !this.strip.context.inEditMode;
    }
    /**
     * Check if the param is a row from a grid
     * @hidden
     * @internal
     * @param context
     */
    isRow(context) {
        return context && context instanceof IgxRowDirective;
    }
}
IgxGridActionsBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGridActionsBase]'
            },] }
];
IgxGridActionsBaseDirective.ctorParameters = () => [
    { type: IgxIconService },
    { type: IterableDiffers }
];
IgxGridActionsBaseDirective.propDecorators = {
    buttons: [{ type: ViewChildren, args: [IgxGridActionButtonComponent,] }],
    asMenuItems: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL2lnbml0ZXVpLWFuZ3VsYXIvaWduaXRldWktYW5ndWxhci9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9hY3Rpb24tc3RyaXAvZ3JpZC1hY3Rpb25zL2dyaWQtYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBNEIsWUFBWSxFQUM1RCxlQUFlLEVBQW1DLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNekQsTUFBTSxPQUFPLDJCQUEyQjtJQUNwQyxZQUFzQixXQUEyQixFQUNuQyxPQUF3QjtRQURoQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDbkMsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFPdEM7Ozs7Ozs7V0FPRztRQUVILGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBaEJzQixDQUFDO0lBa0IzQzs7O09BR0c7SUFDSCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZUFBZTtRQUNYLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQStDLEVBQUUsRUFBRTtnQkFDM0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDVjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDNUUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ08sS0FBSyxDQUFDLE9BQU87UUFDbkIsT0FBTyxPQUFPLElBQUksT0FBTyxZQUFZLGVBQWUsQ0FBQztJQUN6RCxDQUFDOzs7WUE1REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7YUFDbkM7OztZQUxRLGNBQWM7WUFIVixlQUFlOzs7c0JBZXZCLFlBQVksU0FBQyw0QkFBNEI7MEJBV3pDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLWFjdGlvbi1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGRyZW4sXG4gICAgIE9uSW5pdCwgSXRlcmFibGVEaWZmZXJzLCBJdGVyYWJsZUNoYW5nZVJlY29yZCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCB9IGZyb20gJy4uL2FjdGlvbi1zdHJpcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Um93RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZ3JpZHMvcm93LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJY29uU2VydmljZSB9IGZyb20gJy4uLy4uL2ljb24vaWNvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4R3JpZEFjdGlvbnNCYXNlXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZEFjdGlvbnNCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGljb25TZXJ2aWNlOiBJZ3hJY29uU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycykgeyB9XG5cbiAgICBwdWJsaWMgc3RyaXA6IElneEFjdGlvblN0cmlwQ29tcG9uZW50O1xuXG4gICAgQFZpZXdDaGlsZHJlbihJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50KVxuICAgIHB1YmxpYyBidXR0b25zOiBRdWVyeUxpc3Q8SWd4R3JpZEFjdGlvbkJ1dHRvbkNvbXBvbmVudD47XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgaWYgdGhlIGFjdGlvbiBidXR0b25zIHdpbGwgYmUgcmVuZGVyZWQgYXMgbWVudSBpdGVtcy4gV2hlbiBpbiBtZW51LCBpdGVtcyB3aWxsIGJlIHJlbmRlcmVkIHdpdGggdGV4dCBsYWJlbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1ncmlkLXBpbm5pbmctYWN0aW9ucyBbYXNNZW51SXRlbXNdPSd0cnVlJz48L2lneC1ncmlkLXBpbm5pbmctYWN0aW9ucz5cbiAgICAgKiAgPGlneC1ncmlkLWVkaXRpbmctYWN0aW9ucyBbYXNNZW51SXRlbXNdPSd0cnVlJz48L2lneC1ncmlkLWVkaXRpbmctYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGFzTWVudUl0ZW1zID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGdyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwLmNvbnRleHQuZ3JpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5hc01lbnVJdGVtcykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5jaGFuZ2VzLnN1YnNjcmliZSgoY2hhbmdlOiBRdWVyeUxpc3Q8SWd4R3JpZEFjdGlvbkJ1dHRvbkNvbXBvbmVudD4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyaXAuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciB0byBiZSB1c2VkIGluIHRlbXBsYXRlXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBpc1Jvd0NvbnRleHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzUm93KHRoaXMuc3RyaXAuY29udGV4dCkgJiYgIXRoaXMuc3RyaXAuY29udGV4dC5pbkVkaXRNb2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBwYXJhbSBpcyBhIHJvdyBmcm9tIGEgZ3JpZFxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc1Jvdyhjb250ZXh0KTogY29udGV4dCBpcyBJZ3hSb3dEaXJlY3RpdmU8YW55PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ICYmIGNvbnRleHQgaW5zdGFuY2VvZiBJZ3hSb3dEaXJlY3RpdmU7XG4gICAgfVxufVxuIl19