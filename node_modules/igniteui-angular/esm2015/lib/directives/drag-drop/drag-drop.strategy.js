// @dynamic
export class IgxDefaultDropStrategy {
    dropAction(drag, drop, atIndex) { }
}
// @dynamic
export class IgxAppendDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, atIndex) {
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        this._renderer.appendChild(dropAreaElement, dragElement);
    }
}
// @dynamic
export class IgxPrependDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, atIndex) {
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (dropAreaElement.children.length) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    }
}
// @dynamic
export class IgxInsertDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, atIndex) {
        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {
            return;
        }
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLnN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL2lnbml0ZXVpLWFuZ3VsYXIvaWduaXRldWktYW5ndWxhci9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2RyYWctZHJvcC9kcmFnLWRyb3Auc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsV0FBVztBQUNYLE1BQU0sT0FBTyxzQkFBc0I7SUFFL0IsVUFBVSxDQUFDLElBQXNCLEVBQUUsSUFBc0IsRUFBRSxPQUFlLElBQUksQ0FBQztDQUNsRjtBQUVELFdBQVc7QUFDWCxNQUFNLE9BQU8scUJBQXFCO0lBRTlCLFlBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBSSxDQUFDO0lBRTdDLFVBQVUsQ0FBQyxJQUFzQixFQUFFLElBQXNCLEVBQUUsT0FBZTtRQUN0RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUMvQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0o7QUFFRCxXQUFXO0FBQ1gsTUFBTSxPQUFPLHNCQUFzQjtJQUUvQixZQUFvQixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQUksQ0FBQztJQUU3QyxVQUFVLENBQUMsSUFBc0IsRUFBRSxJQUFzQixFQUFFLE9BQWU7UUFDdEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFGO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDO0NBQ0o7QUFFRCxXQUFXO0FBQ1gsTUFBTSxPQUFPLHFCQUFxQjtJQUU5QixZQUFvQixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQUksQ0FBQztJQUU3QyxVQUFVLENBQUMsSUFBc0IsRUFBRSxJQUFzQixFQUFFLE9BQWU7UUFDdEUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzNGLE9BQU87U0FDVjtRQUVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQy9DLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ25ELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDaEUsSUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsT0FBTyxFQUFFO1lBQzdELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2hHO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneERyYWdEaXJlY3RpdmUsIElneERyb3BEaXJlY3RpdmUgfSBmcm9tICcuL2RyYWctZHJvcC5kaXJlY3RpdmUnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSURyb3BTdHJhdGVneSB7XG4gICAgZHJvcEFjdGlvbjogKGRyYWc6IElneERyYWdEaXJlY3RpdmUsIGRyb3A6IElneERyb3BEaXJlY3RpdmUsIGF0SW5kZXg6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBJZ3hEZWZhdWx0RHJvcFN0cmF0ZWd5IGltcGxlbWVudHMgSURyb3BTdHJhdGVneSB7XG5cbiAgICBkcm9wQWN0aW9uKGRyYWc6IElneERyYWdEaXJlY3RpdmUsIGRyb3A6IElneERyb3BEaXJlY3RpdmUsIGF0SW5kZXg6IG51bWJlcikgeyB9XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgSWd4QXBwZW5kRHJvcFN0cmF0ZWd5IGltcGxlbWVudHMgSURyb3BTdHJhdGVneSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cblxuICAgIGRyb3BBY3Rpb24oZHJhZzogSWd4RHJhZ0RpcmVjdGl2ZSwgZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgYXRJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRyYWdFbGVtZW50ID0gZHJhZy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGRyb3BBcmVhRWxlbWVudCA9IGRyb3AuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZChkcmFnRWxlbWVudC5wYXJlbnROb2RlLCBkcmFnRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xuICAgIH1cbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBJZ3hQcmVwZW5kRHJvcFN0cmF0ZWd5IGltcGxlbWVudHMgSURyb3BTdHJhdGVneSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cblxuICAgIGRyb3BBY3Rpb24oZHJhZzogSWd4RHJhZ0RpcmVjdGl2ZSwgZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgYXRJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRyYWdFbGVtZW50ID0gZHJhZy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGRyb3BBcmVhRWxlbWVudCA9IGRyb3AuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZChkcmFnRWxlbWVudC5wYXJlbnROb2RlLCBkcmFnRWxlbWVudCk7XG4gICAgICAgIGlmIChkcm9wQXJlYUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5pbnNlcnRCZWZvcmUoZHJvcEFyZWFFbGVtZW50LCBkcmFnRWxlbWVudCwgZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIElneEluc2VydERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgICBkcm9wQWN0aW9uKGRyYWc6IElneERyYWdEaXJlY3RpdmUsIGRyb3A6IElneERyb3BEaXJlY3RpdmUsIGF0SW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAoZHJhZy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCA9PT0gZHJvcC5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgJiYgYXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRyYWdFbGVtZW50ID0gZHJhZy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGRyb3BBcmVhRWxlbWVudCA9IGRyb3AuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZChkcmFnRWxlbWVudC5wYXJlbnROb2RlLCBkcmFnRWxlbWVudCk7XG4gICAgICAgIGlmIChhdEluZGV4ICE9PSAtMSAmJiBkcm9wQXJlYUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gYXRJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuaW5zZXJ0QmVmb3JlKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQsIGRyb3BBcmVhRWxlbWVudC5jaGlsZHJlblthdEluZGV4XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==