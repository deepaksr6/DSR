import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostListener, Output, Renderer2, Input, NgModule, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DeprecateProperty } from '../../core/deprecateDecorators';
import { MaskParsingService } from './mask-parsing.service';
import { isIE } from '../../core/utils';
const noop = () => { };
const Éµ0 = noop;
export class IgxMaskDirective {
    constructor(elementRef, maskParser, renderer) {
        this.elementRef = elementRef;
        this.maskParser = maskParser;
        this.renderer = renderer;
        /**
         * Sets the character representing a fillable spot in the input mask.
         * Default value is "'_'".
         * ```html
         * <input [promptChar] = "'/'">
         * ```
         */
        this.promptChar = '_';
        /**
         * Emits an event each time the value changes.
         * Provides `rawValue: string` and `formattedValue: string` as event arguments.
         * ```html
         * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
         * ```
         */
        this.onValueChange = new EventEmitter();
        this._end = 0;
        this._start = 0;
        this._oldText = '';
        this._dataValue = '';
        this._focused = false;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    /**
     * Specifies a placeholder.
     * ```html
     * <input placeholder = "enter text...">
     * ```
     */
    set placeholder(val) {
        this.renderer.setAttribute(this.nativeElement, 'placeholder', val);
    }
    get placeholder() {
        return this.nativeElement.placeholder;
    }
    /** @hidden */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /** @hidden @internal; */
    get inputValue() {
        return this.nativeElement.value;
    }
    /** @hidden @internal */
    set inputValue(val) {
        this.nativeElement.value = val;
    }
    /** @hidden */
    get maskOptions() {
        const format = this.mask || 'CCCCCCCCCC';
        const promptChar = this.promptChar && this.promptChar.substring(0, 1);
        return { format, promptChar };
    }
    /** @hidden */
    get selectionStart() {
        // Edge(classic) and FF don't select text on drop
        return this.nativeElement.selectionStart === this.nativeElement.selectionEnd && this._hasDropAction ?
            this.nativeElement.selectionEnd - this._droppedData.length :
            this.nativeElement.selectionStart;
    }
    /** @hidden */
    get selectionEnd() {
        return this.nativeElement.selectionEnd;
    }
    /** @hidden */
    get start() {
        return this._start;
    }
    /** @hidden */
    get end() {
        return this._end;
    }
    /** @hidden */
    ngOnInit() {
        if (!this.nativeElement.placeholder) {
            this.renderer.setAttribute(this.nativeElement, 'placeholder', this.maskOptions.format);
        }
    }
    /**
     * TODO: Remove after date/time picker integration refactor
     * @hidden
     */
    ngAfterViewChecked() {
        this._oldText = this.inputValue;
    }
    /** @hidden */
    onKeyDown(event) {
        const key = event.keyCode || event.charCode;
        if (!key) {
            return;
        }
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
        }
        if ((key === 17 /* CTRL */ && key === 90 /* Z */) || (key === 17 /* CTRL */ && key === 89 /* Y */)) {
            event.preventDefault();
        }
        this._key = key;
        this._start = this.selectionStart;
        this._end = this.selectionEnd;
    }
    /** @hidden */
    onInputChanged() {
        /**
         * '!this._focused' is a fix for #8165
         * On page load IE triggers input events before focus events and
         * it does so for every single input on the page.
         * The mask needs to be prevented from doing anything while this is happening because
         * the end user will be unable to blur the input.
         * https://stackoverflow.com/questions/21406138/input-event-triggered-on-internet-explorer-when-placeholder-changed
         */
        if (isIE() && (this._stopPropagation || !this._focused)) {
            this._stopPropagation = false;
            return;
        }
        if (this._hasDropAction) {
            this._start = this.selectionStart;
        }
        if (this.inputValue.length < this._oldText.length && this._key === 229 /* INPUT_METHOD */) {
            // software keyboard input delete
            this._key = 8 /* BACKSPACE */;
        }
        let valueToParse = '';
        switch (this._key) {
            case 46 /* DELETE */:
                this._end = this._start === this._end ? ++this._end : this._end;
                break;
            case 8 /* BACKSPACE */:
                this._start = this.selectionStart;
                break;
            default:
                valueToParse = this.inputValue.substring(this._start, this.selectionEnd);
                break;
        }
        const replacedData = this.maskParser.replaceInMask(this._oldText, valueToParse, this.maskOptions, this._start, this._end);
        this.inputValue = replacedData.value;
        if (this._key === 8 /* BACKSPACE */) {
            replacedData.end = this._start;
        }
        this.setSelectionRange(replacedData.end);
        const rawVal = this.maskParser.parseValueFromMask(this.inputValue, this.maskOptions);
        this._dataValue = this.includeLiterals ? this.inputValue : rawVal;
        this._onChangeCallback(this._dataValue);
        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.inputValue });
        this.afterInput();
    }
    /** @hidden */
    onPaste() {
        this._oldText = this.inputValue;
        this._start = this.selectionStart;
    }
    /** @hidden */
    onFocus() {
        this._focused = true;
        this.showMask(this._dataValue);
    }
    /** @hidden */
    onBlur(value) {
        this._focused = false;
        this.showDisplayValue(value);
        this._onTouchedCallback();
    }
    /** @hidden */
    onDragEnter() {
        if (!this._focused) {
            this.showMask(this._dataValue);
        }
    }
    /** @hidden */
    onDragLeave() {
        if (!this._focused) {
            this.showDisplayValue(this.inputValue);
        }
    }
    /** @hidden */
    onDrop(event) {
        this._hasDropAction = true;
        this._droppedData = event.dataTransfer.getData('text');
    }
    /** @hidden */
    showMask(value) {
        if (this.focusedValuePipe) {
            if (isIE()) {
                this._stopPropagation = true;
            }
            // TODO(D.P.): focusedValuePipe should be deprecated or force-checked to match mask format
            this.inputValue = this.focusedValuePipe.transform(value);
        }
        else {
            this.inputValue = this.maskParser.applyMask(this.inputValue, this.maskOptions);
        }
        this._oldText = this.inputValue;
    }
    /** @hidden */
    setSelectionRange(start, end = start) {
        this.nativeElement.setSelectionRange(start, end);
    }
    /** @hidden */
    afterInput() {
        this._oldText = this.inputValue;
        this._hasDropAction = false;
        this._start = 0;
        this._end = 0;
        this._key = null;
    }
    showDisplayValue(value) {
        if (this.displayValuePipe) {
            this.inputValue = this.displayValuePipe.transform(value);
        }
        else if (value === this.maskParser.applyMask(null, this.maskOptions)) {
            this.inputValue = '';
        }
    }
    /** @hidden */
    writeValue(value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this.maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.inputValue = value ? this.maskParser.applyMask(value, this.maskOptions) : '';
        if (this.displayValuePipe) {
            this.inputValue = this.displayValuePipe.transform(this.inputValue);
        }
        this._dataValue = this.includeLiterals ? this.inputValue : value;
        this.onValueChange.emit({ rawValue: value, formattedValue: this.inputValue });
    }
    /** @hidden */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /** @hidden */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
}
IgxMaskDirective.decorators = [
    { type: Directive, args: [{
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],
                selector: '[igxMask]',
                exportAs: 'igxMask'
            },] }
];
IgxMaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MaskParsingService },
    { type: Renderer2 }
];
IgxMaskDirective.propDecorators = {
    mask: [{ type: Input, args: ['igxMask',] }],
    promptChar: [{ type: Input }],
    includeLiterals: [{ type: Input }],
    displayValuePipe: [{ type: Input }],
    focusedValuePipe: [{ type: Input }],
    onValueChange: [{ type: Output }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onInputChanged: [{ type: HostListener, args: ['input',] }],
    onPaste: [{ type: HostListener, args: ['paste',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur', ['$event.target.value'],] }],
    onDragEnter: [{ type: HostListener, args: ['dragenter',] }],
    onDragLeave: [{ type: HostListener, args: ['dragleave',] }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
};
__decorate([
    DeprecateProperty('"placeholder" is deprecated, use native placeholder instead.')
], IgxMaskDirective.prototype, "placeholder", null);
/** @hidden */
export class IgxMaskModule {
}
IgxMaskModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxMaskDirective],
                exports: [IgxMaskDirective],
                imports: [CommonModule]
            },] }
];
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,