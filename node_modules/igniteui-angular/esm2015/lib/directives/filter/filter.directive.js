import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Input, NgModule, Output, Pipe, Renderer2 } from '@angular/core';
export class IgxFilterOptions {
    constructor() {
        // Input text value that will be used as a filtering pattern (matching condition is based on it)
        this.inputValue = '';
    }
    // Function - get value to be tested from the item
    // item - single item of the list to be filtered
    // key - property name of item, which value should be tested
    // Default behavior - returns "key"- named property value of item if key si provided,
    // otherwise textContent of the item's html element
    get_value(item, key) {
        let result = '';
        if (key && item[key]) {
            result = item[key].toString();
        }
        else if (item.element) {
            if (item.element.nativeElement) {
                result = item.element.nativeElement.textContent.trim();
                // Check if element doesn't return the DOM element directly
            }
            else if (item.element.textContent) {
                result = item.element.textContent.trim();
            }
        }
        return result;
    }
    // Function - formats the original text before matching process
    // Default behavior - returns text to lower case
    formatter(valueToTest) {
        return valueToTest.toLowerCase();
    }
    // Function - determines whether the item met the condition
    // valueToTest - text value that should be tested
    // inputValue - text value from input that condition is based on
    // Default behavior - "contains"
    matchFn(valueToTest, inputValue) {
        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;
    }
    // Function - executed after matching test for every matched item
    // Default behavior - shows the item
    metConditionFn(item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = false;
        }
    }
    // Function - executed for every NOT matched item after matching test
    // Default behavior - hides the item
    overdueConditionFn(item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = true;
        }
    }
}
export class IgxFilterDirective {
    constructor(element, renderer) {
        this.element = element;
        this.filtering = new EventEmitter(false); // synchronous event emitter
        this.filtered = new EventEmitter();
    }
    ngOnChanges(changes) {
        // Detect only changes of input value
        if (changes.filterOptions &&
            changes.filterOptions.currentValue &&
            changes.filterOptions.currentValue.inputValue !== undefined &&
            changes.filterOptions.previousValue &&
            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {
            this.filter();
        }
    }
    filter() {
        if (!this.filterOptions.items) {
            return;
        }
        const args = { cancel: false, items: this.filterOptions.items };
        this.filtering.emit(args);
        if (args.cancel) {
            return;
        }
        const pipe = new IgxFilterPipe();
        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);
        this.filtered.emit({ filteredItems: filtered });
    }
}
IgxFilterDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxFilter]'
            },] }
];
IgxFilterDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
IgxFilterDirective.propDecorators = {
    filtering: [{ type: Output }],
    filtered: [{ type: Output }],
    filterOptions: [{ type: Input, args: ['igxFilter',] }]
};
export class IgxFilterPipe {
    transform(items, 
    // options - initial settings of filter functionality
    options) {
        let result = [];
        if (!items || !items.length || !options) {
            return;
        }
        if (options.items) {
            items = options.items;
        }
        result = items.filter((item) => {
            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);
            if (match) {
                if (options.metConditionFn) {
                    options.metConditionFn(item);
                }
            }
            else {
                if (options.overdueConditionFn) {
                    options.overdueConditionFn(item);
                }
            }
            return match;
        });
        return result;
    }
}
IgxFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxFilter',
                pure: false
            },] }
];
/**
 * @hidden
 */
export class IgxFilterModule {
}
IgxFilterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxFilterDirective, IgxFilterPipe],
                exports: [IgxFilterDirective, IgxFilterPipe],
                imports: [CommonModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9pZ25pdGV1aS1hbmd1bGFyL2lnbml0ZXVpLWFuZ3VsYXIvcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9maWx0ZXIvZmlsdGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFDTCxRQUFRLEVBRVIsTUFBTSxFQUNOLElBQUksRUFFSixTQUFTLEVBRVosTUFBTSxlQUFlLENBQUM7QUFFdkIsTUFBTSxPQUFPLGdCQUFnQjtJQUE3QjtRQUNJLGdHQUFnRztRQUN6RixlQUFVLEdBQUcsRUFBRSxDQUFDO0lBMkQzQixDQUFDO0lBbkRHLGtEQUFrRDtJQUNsRCxnREFBZ0Q7SUFDaEQsNERBQTREO0lBQzVELHFGQUFxRjtJQUNyRixtREFBbUQ7SUFDNUMsU0FBUyxDQUFDLElBQVMsRUFBRSxHQUFXO1FBQ25DLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVoQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQzthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO2dCQUM1QixNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUMzRCwyREFBMkQ7YUFDMUQ7aUJBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtnQkFDakMsTUFB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QUMsWUFBWSxDQUFDO2FBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LFxuICAgIE5nTW9kdWxlLFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPdXRwdXQsXG4gICAgUGlwZSxcbiAgICBQaXBlVHJhbnNmb3JtLFxuICAgIFJlbmRlcmVyMixcbiAgICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgSWd4RmlsdGVyT3B0aW9ucyB7XG4gICAgLy8gSW5wdXQgdGV4dCB2YWx1ZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyBhIGZpbHRlcmluZyBwYXR0ZXJuIChtYXRjaGluZyBjb25kaXRpb24gaXMgYmFzZWQgb24gaXQpXG4gICAgcHVibGljIGlucHV0VmFsdWUgPSAnJztcblxuICAgIC8vIEl0ZW0gcHJvcGVydHksIHdoaWNoIHZhbHVlIHNob3VsZCBiZSB1c2VkIGZvciBmaWx0ZXJpbmdcbiAgICBwdWJsaWMga2V5OiBzdHJpbmc7XG5cbiAgICAvLyBSZXByZXNlbnQgaXRlbXMgb2YgdGhlIGxpc3QuIEl0IHNob3VsZCBiZSB1c2VkIHRvIGhhbmRsZSBkZWNhbGFyYXRldmVseSBkZWZpbmVkIHdpZGdldHNcbiAgICBwdWJsaWMgaXRlbXM6IGFueVtdO1xuXG4gICAgLy8gRnVuY3Rpb24gLSBnZXQgdmFsdWUgdG8gYmUgdGVzdGVkIGZyb20gdGhlIGl0ZW1cbiAgICAvLyBpdGVtIC0gc2luZ2xlIGl0ZW0gb2YgdGhlIGxpc3QgdG8gYmUgZmlsdGVyZWRcbiAgICAvLyBrZXkgLSBwcm9wZXJ0eSBuYW1lIG9mIGl0ZW0sIHdoaWNoIHZhbHVlIHNob3VsZCBiZSB0ZXN0ZWRcbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIC0gcmV0dXJucyBcImtleVwiLSBuYW1lZCBwcm9wZXJ0eSB2YWx1ZSBvZiBpdGVtIGlmIGtleSBzaSBwcm92aWRlZCxcbiAgICAvLyBvdGhlcndpc2UgdGV4dENvbnRlbnQgb2YgdGhlIGl0ZW0ncyBodG1sIGVsZW1lbnRcbiAgICBwdWJsaWMgZ2V0X3ZhbHVlKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgaWYgKGtleSAmJiBpdGVtW2tleV0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW1ba2V5XS50b1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0uZWxlbWVudC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBkb2Vzbid0IHJldHVybiB0aGUgRE9NIGVsZW1lbnQgZGlyZWN0bHlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5lbGVtZW50LnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbS5lbGVtZW50LnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gLSBmb3JtYXRzIHRoZSBvcmlnaW5hbCB0ZXh0IGJlZm9yZSBtYXRjaGluZyBwcm9jZXNzXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciAtIHJldHVybnMgdGV4dCB0byBsb3dlciBjYXNlXG4gICAgcHVibGljIGZvcm1hdHRlcih2YWx1ZVRvVGVzdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9UZXN0LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gLSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGl0ZW0gbWV0IHRoZSBjb25kaXRpb25cbiAgICAvLyB2YWx1ZVRvVGVzdCAtIHRleHQgdmFsdWUgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gICAgLy8gaW5wdXRWYWx1ZSAtIHRleHQgdmFsdWUgZnJvbSBpbnB1dCB0aGF0IGNvbmRpdGlvbiBpcyBiYXNlZCBvblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgLSBcImNvbnRhaW5zXCJcbiAgICBwdWJsaWMgbWF0Y2hGbih2YWx1ZVRvVGVzdDogc3RyaW5nLCBpbnB1dFZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9UZXN0LmluZGV4T2YoaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkgfHwgJycpID4gLTE7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gLSBleGVjdXRlZCBhZnRlciBtYXRjaGluZyB0ZXN0IGZvciBldmVyeSBtYXRjaGVkIGl0ZW1cbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIC0gc2hvd3MgdGhlIGl0ZW1cbiAgICBwdWJsaWMgbWV0Q29uZGl0aW9uRm4oaXRlbTogYW55KSB7XG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgaXRlbS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9uIC0gZXhlY3V0ZWQgZm9yIGV2ZXJ5IE5PVCBtYXRjaGVkIGl0ZW0gYWZ0ZXIgbWF0Y2hpbmcgdGVzdFxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgLSBoaWRlcyB0aGUgaXRlbVxuICAgIHB1YmxpYyBvdmVyZHVlQ29uZGl0aW9uRm4oaXRlbTogYW55KSB7XG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgaXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEZpbHRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneEZpbHRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgQE91dHB1dCgpIHB1YmxpYyBmaWx0ZXJpbmcgPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTsgLy8gc3luY2hyb25vdXMgZXZlbnQgZW1pdHRlclxuICAgIEBPdXRwdXQoKSBwdWJsaWMgZmlsdGVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBASW5wdXQoJ2lneEZpbHRlcicpIHB1YmxpYyBmaWx0ZXJPcHRpb25zOiBJZ3hGaWx0ZXJPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgLy8gRGV0ZWN0IG9ubHkgY2hhbmdlcyBvZiBpbnB1dCB2YWx1ZVxuICAgICAgICBpZiAoY2hhbmdlcy5maWx0ZXJPcHRpb25zICYmXG4gICAgICAgICAgICBjaGFuZ2VzLmZpbHRlck9wdGlvbnMuY3VycmVudFZhbHVlICYmXG4gICAgICAgICAgICBjaGFuZ2VzLmZpbHRlck9wdGlvbnMuY3VycmVudFZhbHVlLmlucHV0VmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgY2hhbmdlcy5maWx0ZXJPcHRpb25zLnByZXZpb3VzVmFsdWUgJiZcbiAgICAgICAgICAgIGNoYW5nZXMuZmlsdGVyT3B0aW9ucy5jdXJyZW50VmFsdWUuaW5wdXRWYWx1ZSAhPT0gY2hhbmdlcy5maWx0ZXJPcHRpb25zLnByZXZpb3VzVmFsdWUuaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsdGVyT3B0aW9ucy5pdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXJncyA9IHsgY2FuY2VsOiBmYWxzZSwgaXRlbXM6IHRoaXMuZmlsdGVyT3B0aW9ucy5pdGVtcyB9O1xuICAgICAgICB0aGlzLmZpbHRlcmluZy5lbWl0KGFyZ3MpO1xuXG4gICAgICAgIGlmIChhcmdzLmNhbmNlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGlwZSA9IG5ldyBJZ3hGaWx0ZXJQaXBlKCk7XG5cbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBwaXBlLnRyYW5zZm9ybSh0aGlzLmZpbHRlck9wdGlvbnMuaXRlbXMsIHRoaXMuZmlsdGVyT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZmlsdGVyZWQuZW1pdCh7IGZpbHRlcmVkSXRlbXM6IGZpbHRlcmVkIH0pO1xuICAgIH1cbn1cblxuQFBpcGUoe1xuICAgIG5hbWU6ICdpZ3hGaWx0ZXInLFxuICAgIHB1cmU6IGZhbHNlXG59KVxuXG5leHBvcnQgY2xhc3MgSWd4RmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyB0cmFuc2Zvcm0oaXRlbXM6IGFueVtdLFxuICAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9ucyAtIGluaXRpYWwgc2V0dGluZ3Mgb2YgZmlsdGVyIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IElneEZpbHRlck9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG5cbiAgICAgICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoIHx8ICFvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtcykge1xuICAgICAgICAgICAgaXRlbXMgPSBvcHRpb25zLml0ZW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gaXRlbXMuZmlsdGVyKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gb3B0aW9ucy5tYXRjaEZuKG9wdGlvbnMuZm9ybWF0dGVyKG9wdGlvbnMuZ2V0X3ZhbHVlKGl0ZW0sIG9wdGlvbnMua2V5KSksIG9wdGlvbnMuaW5wdXRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1ldENvbmRpdGlvbkZuKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWV0Q29uZGl0aW9uRm4oaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vdmVyZHVlQ29uZGl0aW9uRm4pIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vdmVyZHVlQ29uZGl0aW9uRm4oaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hGaWx0ZXJEaXJlY3RpdmUsIElneEZpbHRlclBpcGVdLFxuICAgIGV4cG9ydHM6IFtJZ3hGaWx0ZXJEaXJlY3RpdmUsIElneEZpbHRlclBpcGVdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIElneEZpbHRlck1vZHVsZSB7XG59XG4iXX0=